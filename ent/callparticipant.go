// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/eleven-am/enclave/ent/calllog"
	"github.com/eleven-am/enclave/ent/callparticipant"
	"github.com/eleven-am/enclave/ent/user"
)

// CallParticipant is the model entity for the CallParticipant schema.
type CallParticipant struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Role holds the value of the "role" field.
	Role callparticipant.Role `json:"role,omitempty"`
	// JoinedAt holds the value of the "joined_at" field.
	JoinedAt time.Time `json:"joined_at,omitempty"`
	// LeftAt holds the value of the "left_at" field.
	LeftAt *time.Time `json:"left_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CallParticipantQuery when eager-loading is set.
	Edges                        CallParticipantEdges `json:"edges"`
	call_participant_call        *int
	call_participant_participant *int
	selectValues                 sql.SelectValues
}

// CallParticipantEdges holds the relations/edges for other nodes in the graph.
type CallParticipantEdges struct {
	// Call holds the value of the call edge.
	Call *CallLog `json:"call,omitempty"`
	// Participant holds the value of the participant edge.
	Participant *User `json:"participant,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// CallOrErr returns the Call value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CallParticipantEdges) CallOrErr() (*CallLog, error) {
	if e.Call != nil {
		return e.Call, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: calllog.Label}
	}
	return nil, &NotLoadedError{edge: "call"}
}

// ParticipantOrErr returns the Participant value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CallParticipantEdges) ParticipantOrErr() (*User, error) {
	if e.Participant != nil {
		return e.Participant, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "participant"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*CallParticipant) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case callparticipant.FieldID:
			values[i] = new(sql.NullInt64)
		case callparticipant.FieldRole:
			values[i] = new(sql.NullString)
		case callparticipant.FieldJoinedAt, callparticipant.FieldLeftAt:
			values[i] = new(sql.NullTime)
		case callparticipant.ForeignKeys[0]: // call_participant_call
			values[i] = new(sql.NullInt64)
		case callparticipant.ForeignKeys[1]: // call_participant_participant
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the CallParticipant fields.
func (cp *CallParticipant) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case callparticipant.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			cp.ID = int(value.Int64)
		case callparticipant.FieldRole:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field role", values[i])
			} else if value.Valid {
				cp.Role = callparticipant.Role(value.String)
			}
		case callparticipant.FieldJoinedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field joined_at", values[i])
			} else if value.Valid {
				cp.JoinedAt = value.Time
			}
		case callparticipant.FieldLeftAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field left_at", values[i])
			} else if value.Valid {
				cp.LeftAt = new(time.Time)
				*cp.LeftAt = value.Time
			}
		case callparticipant.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field call_participant_call", value)
			} else if value.Valid {
				cp.call_participant_call = new(int)
				*cp.call_participant_call = int(value.Int64)
			}
		case callparticipant.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field call_participant_participant", value)
			} else if value.Valid {
				cp.call_participant_participant = new(int)
				*cp.call_participant_participant = int(value.Int64)
			}
		default:
			cp.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the CallParticipant.
// This includes values selected through modifiers, order, etc.
func (cp *CallParticipant) Value(name string) (ent.Value, error) {
	return cp.selectValues.Get(name)
}

// QueryCall queries the "call" edge of the CallParticipant entity.
func (cp *CallParticipant) QueryCall() *CallLogQuery {
	return NewCallParticipantClient(cp.config).QueryCall(cp)
}

// QueryParticipant queries the "participant" edge of the CallParticipant entity.
func (cp *CallParticipant) QueryParticipant() *UserQuery {
	return NewCallParticipantClient(cp.config).QueryParticipant(cp)
}

// Update returns a builder for updating this CallParticipant.
// Note that you need to call CallParticipant.Unwrap() before calling this method if this CallParticipant
// was returned from a transaction, and the transaction was committed or rolled back.
func (cp *CallParticipant) Update() *CallParticipantUpdateOne {
	return NewCallParticipantClient(cp.config).UpdateOne(cp)
}

// Unwrap unwraps the CallParticipant entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (cp *CallParticipant) Unwrap() *CallParticipant {
	_tx, ok := cp.config.driver.(*txDriver)
	if !ok {
		panic("ent: CallParticipant is not a transactional entity")
	}
	cp.config.driver = _tx.drv
	return cp
}

// String implements the fmt.Stringer.
func (cp *CallParticipant) String() string {
	var builder strings.Builder
	builder.WriteString("CallParticipant(")
	builder.WriteString(fmt.Sprintf("id=%v, ", cp.ID))
	builder.WriteString("role=")
	builder.WriteString(fmt.Sprintf("%v", cp.Role))
	builder.WriteString(", ")
	builder.WriteString("joined_at=")
	builder.WriteString(cp.JoinedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := cp.LeftAt; v != nil {
		builder.WriteString("left_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteByte(')')
	return builder.String()
}

// CallParticipants is a parsable slice of CallParticipant.
type CallParticipants []*CallParticipant
