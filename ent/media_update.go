// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/eleven-am/enclave/ent/media"
	"github.com/eleven-am/enclave/ent/message"
	"github.com/eleven-am/enclave/ent/predicate"
	"github.com/eleven-am/enclave/ent/user"
)

// MediaUpdate is the builder for updating Media entities.
type MediaUpdate struct {
	config
	hooks    []Hook
	mutation *MediaMutation
}

// Where appends a list predicates to the MediaUpdate builder.
func (mu *MediaUpdate) Where(ps ...predicate.Media) *MediaUpdate {
	mu.mutation.Where(ps...)
	return mu
}

// SetFilename sets the "filename" field.
func (mu *MediaUpdate) SetFilename(s string) *MediaUpdate {
	mu.mutation.SetFilename(s)
	return mu
}

// SetNillableFilename sets the "filename" field if the given value is not nil.
func (mu *MediaUpdate) SetNillableFilename(s *string) *MediaUpdate {
	if s != nil {
		mu.SetFilename(*s)
	}
	return mu
}

// SetContentType sets the "content_type" field.
func (mu *MediaUpdate) SetContentType(s string) *MediaUpdate {
	mu.mutation.SetContentType(s)
	return mu
}

// SetNillableContentType sets the "content_type" field if the given value is not nil.
func (mu *MediaUpdate) SetNillableContentType(s *string) *MediaUpdate {
	if s != nil {
		mu.SetContentType(*s)
	}
	return mu
}

// SetStoragePath sets the "storage_path" field.
func (mu *MediaUpdate) SetStoragePath(s string) *MediaUpdate {
	mu.mutation.SetStoragePath(s)
	return mu
}

// SetNillableStoragePath sets the "storage_path" field if the given value is not nil.
func (mu *MediaUpdate) SetNillableStoragePath(s *string) *MediaUpdate {
	if s != nil {
		mu.SetStoragePath(*s)
	}
	return mu
}

// SetChecksum sets the "checksum" field.
func (mu *MediaUpdate) SetChecksum(s string) *MediaUpdate {
	mu.mutation.SetChecksum(s)
	return mu
}

// SetNillableChecksum sets the "checksum" field if the given value is not nil.
func (mu *MediaUpdate) SetNillableChecksum(s *string) *MediaUpdate {
	if s != nil {
		mu.SetChecksum(*s)
	}
	return mu
}

// SetSizeBytes sets the "size_bytes" field.
func (mu *MediaUpdate) SetSizeBytes(i int64) *MediaUpdate {
	mu.mutation.ResetSizeBytes()
	mu.mutation.SetSizeBytes(i)
	return mu
}

// SetNillableSizeBytes sets the "size_bytes" field if the given value is not nil.
func (mu *MediaUpdate) SetNillableSizeBytes(i *int64) *MediaUpdate {
	if i != nil {
		mu.SetSizeBytes(*i)
	}
	return mu
}

// AddSizeBytes adds i to the "size_bytes" field.
func (mu *MediaUpdate) AddSizeBytes(i int64) *MediaUpdate {
	mu.mutation.AddSizeBytes(i)
	return mu
}

// SetCreatedAt sets the "created_at" field.
func (mu *MediaUpdate) SetCreatedAt(t time.Time) *MediaUpdate {
	mu.mutation.SetCreatedAt(t)
	return mu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (mu *MediaUpdate) SetNillableCreatedAt(t *time.Time) *MediaUpdate {
	if t != nil {
		mu.SetCreatedAt(*t)
	}
	return mu
}

// SetUploaderID sets the "uploader" edge to the User entity by ID.
func (mu *MediaUpdate) SetUploaderID(id int) *MediaUpdate {
	mu.mutation.SetUploaderID(id)
	return mu
}

// SetUploader sets the "uploader" edge to the User entity.
func (mu *MediaUpdate) SetUploader(u *User) *MediaUpdate {
	return mu.SetUploaderID(u.ID)
}

// SetMessageID sets the "message" edge to the Message entity by ID.
func (mu *MediaUpdate) SetMessageID(id int) *MediaUpdate {
	mu.mutation.SetMessageID(id)
	return mu
}

// SetNillableMessageID sets the "message" edge to the Message entity by ID if the given value is not nil.
func (mu *MediaUpdate) SetNillableMessageID(id *int) *MediaUpdate {
	if id != nil {
		mu = mu.SetMessageID(*id)
	}
	return mu
}

// SetMessage sets the "message" edge to the Message entity.
func (mu *MediaUpdate) SetMessage(m *Message) *MediaUpdate {
	return mu.SetMessageID(m.ID)
}

// Mutation returns the MediaMutation object of the builder.
func (mu *MediaUpdate) Mutation() *MediaMutation {
	return mu.mutation
}

// ClearUploader clears the "uploader" edge to the User entity.
func (mu *MediaUpdate) ClearUploader() *MediaUpdate {
	mu.mutation.ClearUploader()
	return mu
}

// ClearMessage clears the "message" edge to the Message entity.
func (mu *MediaUpdate) ClearMessage() *MediaUpdate {
	mu.mutation.ClearMessage()
	return mu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mu *MediaUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, mu.sqlSave, mu.mutation, mu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mu *MediaUpdate) SaveX(ctx context.Context) int {
	affected, err := mu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mu *MediaUpdate) Exec(ctx context.Context) error {
	_, err := mu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mu *MediaUpdate) ExecX(ctx context.Context) {
	if err := mu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mu *MediaUpdate) check() error {
	if v, ok := mu.mutation.Filename(); ok {
		if err := media.FilenameValidator(v); err != nil {
			return &ValidationError{Name: "filename", err: fmt.Errorf(`ent: validator failed for field "Media.filename": %w`, err)}
		}
	}
	if v, ok := mu.mutation.ContentType(); ok {
		if err := media.ContentTypeValidator(v); err != nil {
			return &ValidationError{Name: "content_type", err: fmt.Errorf(`ent: validator failed for field "Media.content_type": %w`, err)}
		}
	}
	if v, ok := mu.mutation.StoragePath(); ok {
		if err := media.StoragePathValidator(v); err != nil {
			return &ValidationError{Name: "storage_path", err: fmt.Errorf(`ent: validator failed for field "Media.storage_path": %w`, err)}
		}
	}
	if v, ok := mu.mutation.Checksum(); ok {
		if err := media.ChecksumValidator(v); err != nil {
			return &ValidationError{Name: "checksum", err: fmt.Errorf(`ent: validator failed for field "Media.checksum": %w`, err)}
		}
	}
	if v, ok := mu.mutation.SizeBytes(); ok {
		if err := media.SizeBytesValidator(v); err != nil {
			return &ValidationError{Name: "size_bytes", err: fmt.Errorf(`ent: validator failed for field "Media.size_bytes": %w`, err)}
		}
	}
	if _, ok := mu.mutation.UploaderID(); mu.mutation.UploaderCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Media.uploader"`)
	}
	return nil
}

func (mu *MediaUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := mu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(media.Table, media.Columns, sqlgraph.NewFieldSpec(media.FieldID, field.TypeInt))
	if ps := mu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mu.mutation.Filename(); ok {
		_spec.SetField(media.FieldFilename, field.TypeString, value)
	}
	if value, ok := mu.mutation.ContentType(); ok {
		_spec.SetField(media.FieldContentType, field.TypeString, value)
	}
	if value, ok := mu.mutation.StoragePath(); ok {
		_spec.SetField(media.FieldStoragePath, field.TypeString, value)
	}
	if value, ok := mu.mutation.Checksum(); ok {
		_spec.SetField(media.FieldChecksum, field.TypeString, value)
	}
	if value, ok := mu.mutation.SizeBytes(); ok {
		_spec.SetField(media.FieldSizeBytes, field.TypeInt64, value)
	}
	if value, ok := mu.mutation.AddedSizeBytes(); ok {
		_spec.AddField(media.FieldSizeBytes, field.TypeInt64, value)
	}
	if value, ok := mu.mutation.CreatedAt(); ok {
		_spec.SetField(media.FieldCreatedAt, field.TypeTime, value)
	}
	if mu.mutation.UploaderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   media.UploaderTable,
			Columns: []string{media.UploaderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.UploaderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   media.UploaderTable,
			Columns: []string{media.UploaderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mu.mutation.MessageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   media.MessageTable,
			Columns: []string{media.MessageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(message.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.MessageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   media.MessageTable,
			Columns: []string{media.MessageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(message.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, mu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{media.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	mu.mutation.done = true
	return n, nil
}

// MediaUpdateOne is the builder for updating a single Media entity.
type MediaUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *MediaMutation
}

// SetFilename sets the "filename" field.
func (muo *MediaUpdateOne) SetFilename(s string) *MediaUpdateOne {
	muo.mutation.SetFilename(s)
	return muo
}

// SetNillableFilename sets the "filename" field if the given value is not nil.
func (muo *MediaUpdateOne) SetNillableFilename(s *string) *MediaUpdateOne {
	if s != nil {
		muo.SetFilename(*s)
	}
	return muo
}

// SetContentType sets the "content_type" field.
func (muo *MediaUpdateOne) SetContentType(s string) *MediaUpdateOne {
	muo.mutation.SetContentType(s)
	return muo
}

// SetNillableContentType sets the "content_type" field if the given value is not nil.
func (muo *MediaUpdateOne) SetNillableContentType(s *string) *MediaUpdateOne {
	if s != nil {
		muo.SetContentType(*s)
	}
	return muo
}

// SetStoragePath sets the "storage_path" field.
func (muo *MediaUpdateOne) SetStoragePath(s string) *MediaUpdateOne {
	muo.mutation.SetStoragePath(s)
	return muo
}

// SetNillableStoragePath sets the "storage_path" field if the given value is not nil.
func (muo *MediaUpdateOne) SetNillableStoragePath(s *string) *MediaUpdateOne {
	if s != nil {
		muo.SetStoragePath(*s)
	}
	return muo
}

// SetChecksum sets the "checksum" field.
func (muo *MediaUpdateOne) SetChecksum(s string) *MediaUpdateOne {
	muo.mutation.SetChecksum(s)
	return muo
}

// SetNillableChecksum sets the "checksum" field if the given value is not nil.
func (muo *MediaUpdateOne) SetNillableChecksum(s *string) *MediaUpdateOne {
	if s != nil {
		muo.SetChecksum(*s)
	}
	return muo
}

// SetSizeBytes sets the "size_bytes" field.
func (muo *MediaUpdateOne) SetSizeBytes(i int64) *MediaUpdateOne {
	muo.mutation.ResetSizeBytes()
	muo.mutation.SetSizeBytes(i)
	return muo
}

// SetNillableSizeBytes sets the "size_bytes" field if the given value is not nil.
func (muo *MediaUpdateOne) SetNillableSizeBytes(i *int64) *MediaUpdateOne {
	if i != nil {
		muo.SetSizeBytes(*i)
	}
	return muo
}

// AddSizeBytes adds i to the "size_bytes" field.
func (muo *MediaUpdateOne) AddSizeBytes(i int64) *MediaUpdateOne {
	muo.mutation.AddSizeBytes(i)
	return muo
}

// SetCreatedAt sets the "created_at" field.
func (muo *MediaUpdateOne) SetCreatedAt(t time.Time) *MediaUpdateOne {
	muo.mutation.SetCreatedAt(t)
	return muo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (muo *MediaUpdateOne) SetNillableCreatedAt(t *time.Time) *MediaUpdateOne {
	if t != nil {
		muo.SetCreatedAt(*t)
	}
	return muo
}

// SetUploaderID sets the "uploader" edge to the User entity by ID.
func (muo *MediaUpdateOne) SetUploaderID(id int) *MediaUpdateOne {
	muo.mutation.SetUploaderID(id)
	return muo
}

// SetUploader sets the "uploader" edge to the User entity.
func (muo *MediaUpdateOne) SetUploader(u *User) *MediaUpdateOne {
	return muo.SetUploaderID(u.ID)
}

// SetMessageID sets the "message" edge to the Message entity by ID.
func (muo *MediaUpdateOne) SetMessageID(id int) *MediaUpdateOne {
	muo.mutation.SetMessageID(id)
	return muo
}

// SetNillableMessageID sets the "message" edge to the Message entity by ID if the given value is not nil.
func (muo *MediaUpdateOne) SetNillableMessageID(id *int) *MediaUpdateOne {
	if id != nil {
		muo = muo.SetMessageID(*id)
	}
	return muo
}

// SetMessage sets the "message" edge to the Message entity.
func (muo *MediaUpdateOne) SetMessage(m *Message) *MediaUpdateOne {
	return muo.SetMessageID(m.ID)
}

// Mutation returns the MediaMutation object of the builder.
func (muo *MediaUpdateOne) Mutation() *MediaMutation {
	return muo.mutation
}

// ClearUploader clears the "uploader" edge to the User entity.
func (muo *MediaUpdateOne) ClearUploader() *MediaUpdateOne {
	muo.mutation.ClearUploader()
	return muo
}

// ClearMessage clears the "message" edge to the Message entity.
func (muo *MediaUpdateOne) ClearMessage() *MediaUpdateOne {
	muo.mutation.ClearMessage()
	return muo
}

// Where appends a list predicates to the MediaUpdate builder.
func (muo *MediaUpdateOne) Where(ps ...predicate.Media) *MediaUpdateOne {
	muo.mutation.Where(ps...)
	return muo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (muo *MediaUpdateOne) Select(field string, fields ...string) *MediaUpdateOne {
	muo.fields = append([]string{field}, fields...)
	return muo
}

// Save executes the query and returns the updated Media entity.
func (muo *MediaUpdateOne) Save(ctx context.Context) (*Media, error) {
	return withHooks(ctx, muo.sqlSave, muo.mutation, muo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (muo *MediaUpdateOne) SaveX(ctx context.Context) *Media {
	node, err := muo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (muo *MediaUpdateOne) Exec(ctx context.Context) error {
	_, err := muo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (muo *MediaUpdateOne) ExecX(ctx context.Context) {
	if err := muo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (muo *MediaUpdateOne) check() error {
	if v, ok := muo.mutation.Filename(); ok {
		if err := media.FilenameValidator(v); err != nil {
			return &ValidationError{Name: "filename", err: fmt.Errorf(`ent: validator failed for field "Media.filename": %w`, err)}
		}
	}
	if v, ok := muo.mutation.ContentType(); ok {
		if err := media.ContentTypeValidator(v); err != nil {
			return &ValidationError{Name: "content_type", err: fmt.Errorf(`ent: validator failed for field "Media.content_type": %w`, err)}
		}
	}
	if v, ok := muo.mutation.StoragePath(); ok {
		if err := media.StoragePathValidator(v); err != nil {
			return &ValidationError{Name: "storage_path", err: fmt.Errorf(`ent: validator failed for field "Media.storage_path": %w`, err)}
		}
	}
	if v, ok := muo.mutation.Checksum(); ok {
		if err := media.ChecksumValidator(v); err != nil {
			return &ValidationError{Name: "checksum", err: fmt.Errorf(`ent: validator failed for field "Media.checksum": %w`, err)}
		}
	}
	if v, ok := muo.mutation.SizeBytes(); ok {
		if err := media.SizeBytesValidator(v); err != nil {
			return &ValidationError{Name: "size_bytes", err: fmt.Errorf(`ent: validator failed for field "Media.size_bytes": %w`, err)}
		}
	}
	if _, ok := muo.mutation.UploaderID(); muo.mutation.UploaderCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Media.uploader"`)
	}
	return nil
}

func (muo *MediaUpdateOne) sqlSave(ctx context.Context) (_node *Media, err error) {
	if err := muo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(media.Table, media.Columns, sqlgraph.NewFieldSpec(media.FieldID, field.TypeInt))
	id, ok := muo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Media.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := muo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, media.FieldID)
		for _, f := range fields {
			if !media.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != media.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := muo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := muo.mutation.Filename(); ok {
		_spec.SetField(media.FieldFilename, field.TypeString, value)
	}
	if value, ok := muo.mutation.ContentType(); ok {
		_spec.SetField(media.FieldContentType, field.TypeString, value)
	}
	if value, ok := muo.mutation.StoragePath(); ok {
		_spec.SetField(media.FieldStoragePath, field.TypeString, value)
	}
	if value, ok := muo.mutation.Checksum(); ok {
		_spec.SetField(media.FieldChecksum, field.TypeString, value)
	}
	if value, ok := muo.mutation.SizeBytes(); ok {
		_spec.SetField(media.FieldSizeBytes, field.TypeInt64, value)
	}
	if value, ok := muo.mutation.AddedSizeBytes(); ok {
		_spec.AddField(media.FieldSizeBytes, field.TypeInt64, value)
	}
	if value, ok := muo.mutation.CreatedAt(); ok {
		_spec.SetField(media.FieldCreatedAt, field.TypeTime, value)
	}
	if muo.mutation.UploaderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   media.UploaderTable,
			Columns: []string{media.UploaderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.UploaderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   media.UploaderTable,
			Columns: []string{media.UploaderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if muo.mutation.MessageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   media.MessageTable,
			Columns: []string{media.MessageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(message.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.MessageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   media.MessageTable,
			Columns: []string{media.MessageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(message.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Media{config: muo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, muo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{media.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	muo.mutation.done = true
	return _node, nil
}
