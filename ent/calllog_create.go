// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/eleven-am/enclave/ent/calllog"
	"github.com/eleven-am/enclave/ent/callparticipant"
	"github.com/eleven-am/enclave/ent/room"
	"github.com/eleven-am/enclave/ent/user"
)

// CallLogCreate is the builder for creating a CallLog entity.
type CallLogCreate struct {
	config
	mutation *CallLogMutation
	hooks    []Hook
}

// SetStatus sets the "status" field.
func (clc *CallLogCreate) SetStatus(c calllog.Status) *CallLogCreate {
	clc.mutation.SetStatus(c)
	return clc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (clc *CallLogCreate) SetNillableStatus(c *calllog.Status) *CallLogCreate {
	if c != nil {
		clc.SetStatus(*c)
	}
	return clc
}

// SetStartedAt sets the "started_at" field.
func (clc *CallLogCreate) SetStartedAt(t time.Time) *CallLogCreate {
	clc.mutation.SetStartedAt(t)
	return clc
}

// SetNillableStartedAt sets the "started_at" field if the given value is not nil.
func (clc *CallLogCreate) SetNillableStartedAt(t *time.Time) *CallLogCreate {
	if t != nil {
		clc.SetStartedAt(*t)
	}
	return clc
}

// SetEndedAt sets the "ended_at" field.
func (clc *CallLogCreate) SetEndedAt(t time.Time) *CallLogCreate {
	clc.mutation.SetEndedAt(t)
	return clc
}

// SetNillableEndedAt sets the "ended_at" field if the given value is not nil.
func (clc *CallLogCreate) SetNillableEndedAt(t *time.Time) *CallLogCreate {
	if t != nil {
		clc.SetEndedAt(*t)
	}
	return clc
}

// SetCreatedAt sets the "created_at" field.
func (clc *CallLogCreate) SetCreatedAt(t time.Time) *CallLogCreate {
	clc.mutation.SetCreatedAt(t)
	return clc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (clc *CallLogCreate) SetNillableCreatedAt(t *time.Time) *CallLogCreate {
	if t != nil {
		clc.SetCreatedAt(*t)
	}
	return clc
}

// SetInitiatorID sets the "initiator" edge to the User entity by ID.
func (clc *CallLogCreate) SetInitiatorID(id int) *CallLogCreate {
	clc.mutation.SetInitiatorID(id)
	return clc
}

// SetInitiator sets the "initiator" edge to the User entity.
func (clc *CallLogCreate) SetInitiator(u *User) *CallLogCreate {
	return clc.SetInitiatorID(u.ID)
}

// SetRoomID sets the "room" edge to the Room entity by ID.
func (clc *CallLogCreate) SetRoomID(id int) *CallLogCreate {
	clc.mutation.SetRoomID(id)
	return clc
}

// SetNillableRoomID sets the "room" edge to the Room entity by ID if the given value is not nil.
func (clc *CallLogCreate) SetNillableRoomID(id *int) *CallLogCreate {
	if id != nil {
		clc = clc.SetRoomID(*id)
	}
	return clc
}

// SetRoom sets the "room" edge to the Room entity.
func (clc *CallLogCreate) SetRoom(r *Room) *CallLogCreate {
	return clc.SetRoomID(r.ID)
}

// AddParticipantIDs adds the "participants" edge to the CallParticipant entity by IDs.
func (clc *CallLogCreate) AddParticipantIDs(ids ...int) *CallLogCreate {
	clc.mutation.AddParticipantIDs(ids...)
	return clc
}

// AddParticipants adds the "participants" edges to the CallParticipant entity.
func (clc *CallLogCreate) AddParticipants(c ...*CallParticipant) *CallLogCreate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return clc.AddParticipantIDs(ids...)
}

// Mutation returns the CallLogMutation object of the builder.
func (clc *CallLogCreate) Mutation() *CallLogMutation {
	return clc.mutation
}

// Save creates the CallLog in the database.
func (clc *CallLogCreate) Save(ctx context.Context) (*CallLog, error) {
	clc.defaults()
	return withHooks(ctx, clc.sqlSave, clc.mutation, clc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (clc *CallLogCreate) SaveX(ctx context.Context) *CallLog {
	v, err := clc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (clc *CallLogCreate) Exec(ctx context.Context) error {
	_, err := clc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (clc *CallLogCreate) ExecX(ctx context.Context) {
	if err := clc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (clc *CallLogCreate) defaults() {
	if _, ok := clc.mutation.Status(); !ok {
		v := calllog.DefaultStatus
		clc.mutation.SetStatus(v)
	}
	if _, ok := clc.mutation.StartedAt(); !ok {
		v := calllog.DefaultStartedAt()
		clc.mutation.SetStartedAt(v)
	}
	if _, ok := clc.mutation.CreatedAt(); !ok {
		v := calllog.DefaultCreatedAt()
		clc.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (clc *CallLogCreate) check() error {
	if _, ok := clc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "CallLog.status"`)}
	}
	if v, ok := clc.mutation.Status(); ok {
		if err := calllog.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "CallLog.status": %w`, err)}
		}
	}
	if _, ok := clc.mutation.StartedAt(); !ok {
		return &ValidationError{Name: "started_at", err: errors.New(`ent: missing required field "CallLog.started_at"`)}
	}
	if _, ok := clc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "CallLog.created_at"`)}
	}
	if _, ok := clc.mutation.InitiatorID(); !ok {
		return &ValidationError{Name: "initiator", err: errors.New(`ent: missing required edge "CallLog.initiator"`)}
	}
	return nil
}

func (clc *CallLogCreate) sqlSave(ctx context.Context) (*CallLog, error) {
	if err := clc.check(); err != nil {
		return nil, err
	}
	_node, _spec := clc.createSpec()
	if err := sqlgraph.CreateNode(ctx, clc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	clc.mutation.id = &_node.ID
	clc.mutation.done = true
	return _node, nil
}

func (clc *CallLogCreate) createSpec() (*CallLog, *sqlgraph.CreateSpec) {
	var (
		_node = &CallLog{config: clc.config}
		_spec = sqlgraph.NewCreateSpec(calllog.Table, sqlgraph.NewFieldSpec(calllog.FieldID, field.TypeInt))
	)
	if value, ok := clc.mutation.Status(); ok {
		_spec.SetField(calllog.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := clc.mutation.StartedAt(); ok {
		_spec.SetField(calllog.FieldStartedAt, field.TypeTime, value)
		_node.StartedAt = value
	}
	if value, ok := clc.mutation.EndedAt(); ok {
		_spec.SetField(calllog.FieldEndedAt, field.TypeTime, value)
		_node.EndedAt = &value
	}
	if value, ok := clc.mutation.CreatedAt(); ok {
		_spec.SetField(calllog.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if nodes := clc.mutation.InitiatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   calllog.InitiatorTable,
			Columns: []string{calllog.InitiatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.call_log_initiator = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := clc.mutation.RoomIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   calllog.RoomTable,
			Columns: []string{calllog.RoomColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(room.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.call_log_room = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := clc.mutation.ParticipantsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   calllog.ParticipantsTable,
			Columns: []string{calllog.ParticipantsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(callparticipant.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// CallLogCreateBulk is the builder for creating many CallLog entities in bulk.
type CallLogCreateBulk struct {
	config
	err      error
	builders []*CallLogCreate
}

// Save creates the CallLog entities in the database.
func (clcb *CallLogCreateBulk) Save(ctx context.Context) ([]*CallLog, error) {
	if clcb.err != nil {
		return nil, clcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(clcb.builders))
	nodes := make([]*CallLog, len(clcb.builders))
	mutators := make([]Mutator, len(clcb.builders))
	for i := range clcb.builders {
		func(i int, root context.Context) {
			builder := clcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CallLogMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, clcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, clcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, clcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (clcb *CallLogCreateBulk) SaveX(ctx context.Context) []*CallLog {
	v, err := clcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (clcb *CallLogCreateBulk) Exec(ctx context.Context) error {
	_, err := clcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (clcb *CallLogCreateBulk) ExecX(ctx context.Context) {
	if err := clcb.Exec(ctx); err != nil {
		panic(err)
	}
}
