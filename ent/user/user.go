// Code generated by ent, DO NOT EDIT.

package user

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the user type in the database.
	Label = "user"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldUsername holds the string denoting the username field in the database.
	FieldUsername = "username"
	// FieldDisplayName holds the string denoting the display_name field in the database.
	FieldDisplayName = "display_name"
	// FieldEmail holds the string denoting the email field in the database.
	FieldEmail = "email"
	// FieldAvatarURL holds the string denoting the avatar_url field in the database.
	FieldAvatarURL = "avatar_url"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldLastSeenAt holds the string denoting the last_seen_at field in the database.
	FieldLastSeenAt = "last_seen_at"
	// EdgeMemberships holds the string denoting the memberships edge name in mutations.
	EdgeMemberships = "memberships"
	// EdgeMessages holds the string denoting the messages edge name in mutations.
	EdgeMessages = "messages"
	// EdgeUploadedMedia holds the string denoting the uploaded_media edge name in mutations.
	EdgeUploadedMedia = "uploaded_media"
	// EdgeOwnedRooms holds the string denoting the owned_rooms edge name in mutations.
	EdgeOwnedRooms = "owned_rooms"
	// EdgeContacts holds the string denoting the contacts edge name in mutations.
	EdgeContacts = "contacts"
	// EdgeContactEntries holds the string denoting the contact_entries edge name in mutations.
	EdgeContactEntries = "contact_entries"
	// EdgeFavourites holds the string denoting the favourites edge name in mutations.
	EdgeFavourites = "favourites"
	// EdgeInitiatedCalls holds the string denoting the initiated_calls edge name in mutations.
	EdgeInitiatedCalls = "initiated_calls"
	// EdgeCallParticipations holds the string denoting the call_participations edge name in mutations.
	EdgeCallParticipations = "call_participations"
	// Table holds the table name of the user in the database.
	Table = "users"
	// MembershipsTable is the table that holds the memberships relation/edge.
	MembershipsTable = "room_memberships"
	// MembershipsInverseTable is the table name for the RoomMembership entity.
	// It exists in this package in order to avoid circular dependency with the "roommembership" package.
	MembershipsInverseTable = "room_memberships"
	// MembershipsColumn is the table column denoting the memberships relation/edge.
	MembershipsColumn = "room_membership_user"
	// MessagesTable is the table that holds the messages relation/edge.
	MessagesTable = "messages"
	// MessagesInverseTable is the table name for the Message entity.
	// It exists in this package in order to avoid circular dependency with the "message" package.
	MessagesInverseTable = "messages"
	// MessagesColumn is the table column denoting the messages relation/edge.
	MessagesColumn = "message_sender"
	// UploadedMediaTable is the table that holds the uploaded_media relation/edge.
	UploadedMediaTable = "media"
	// UploadedMediaInverseTable is the table name for the Media entity.
	// It exists in this package in order to avoid circular dependency with the "media" package.
	UploadedMediaInverseTable = "media"
	// UploadedMediaColumn is the table column denoting the uploaded_media relation/edge.
	UploadedMediaColumn = "media_uploader"
	// OwnedRoomsTable is the table that holds the owned_rooms relation/edge.
	OwnedRoomsTable = "rooms"
	// OwnedRoomsInverseTable is the table name for the Room entity.
	// It exists in this package in order to avoid circular dependency with the "room" package.
	OwnedRoomsInverseTable = "rooms"
	// OwnedRoomsColumn is the table column denoting the owned_rooms relation/edge.
	OwnedRoomsColumn = "room_owner"
	// ContactsTable is the table that holds the contacts relation/edge.
	ContactsTable = "contacts"
	// ContactsInverseTable is the table name for the Contact entity.
	// It exists in this package in order to avoid circular dependency with the "contact" package.
	ContactsInverseTable = "contacts"
	// ContactsColumn is the table column denoting the contacts relation/edge.
	ContactsColumn = "contact_owner"
	// ContactEntriesTable is the table that holds the contact_entries relation/edge.
	ContactEntriesTable = "contacts"
	// ContactEntriesInverseTable is the table name for the Contact entity.
	// It exists in this package in order to avoid circular dependency with the "contact" package.
	ContactEntriesInverseTable = "contacts"
	// ContactEntriesColumn is the table column denoting the contact_entries relation/edge.
	ContactEntriesColumn = "contact_contact"
	// FavouritesTable is the table that holds the favourites relation/edge.
	FavouritesTable = "favourites"
	// FavouritesInverseTable is the table name for the Favourite entity.
	// It exists in this package in order to avoid circular dependency with the "favourite" package.
	FavouritesInverseTable = "favourites"
	// FavouritesColumn is the table column denoting the favourites relation/edge.
	FavouritesColumn = "favourite_user"
	// InitiatedCallsTable is the table that holds the initiated_calls relation/edge.
	InitiatedCallsTable = "call_logs"
	// InitiatedCallsInverseTable is the table name for the CallLog entity.
	// It exists in this package in order to avoid circular dependency with the "calllog" package.
	InitiatedCallsInverseTable = "call_logs"
	// InitiatedCallsColumn is the table column denoting the initiated_calls relation/edge.
	InitiatedCallsColumn = "call_log_initiator"
	// CallParticipationsTable is the table that holds the call_participations relation/edge.
	CallParticipationsTable = "call_participants"
	// CallParticipationsInverseTable is the table name for the CallParticipant entity.
	// It exists in this package in order to avoid circular dependency with the "callparticipant" package.
	CallParticipationsInverseTable = "call_participants"
	// CallParticipationsColumn is the table column denoting the call_participations relation/edge.
	CallParticipationsColumn = "call_participant_participant"
)

// Columns holds all SQL columns for user fields.
var Columns = []string{
	FieldID,
	FieldUsername,
	FieldDisplayName,
	FieldEmail,
	FieldAvatarURL,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldLastSeenAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// UsernameValidator is a validator for the "username" field. It is called by the builders before save.
	UsernameValidator func(string) error
	// DisplayNameValidator is a validator for the "display_name" field. It is called by the builders before save.
	DisplayNameValidator func(string) error
	// EmailValidator is a validator for the "email" field. It is called by the builders before save.
	EmailValidator func(string) error
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultLastSeenAt holds the default value on creation for the "last_seen_at" field.
	DefaultLastSeenAt func() time.Time
	// UpdateDefaultLastSeenAt holds the default value on update for the "last_seen_at" field.
	UpdateDefaultLastSeenAt func() time.Time
)

// OrderOption defines the ordering options for the User queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByUsername orders the results by the username field.
func ByUsername(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUsername, opts...).ToFunc()
}

// ByDisplayName orders the results by the display_name field.
func ByDisplayName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDisplayName, opts...).ToFunc()
}

// ByEmail orders the results by the email field.
func ByEmail(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmail, opts...).ToFunc()
}

// ByAvatarURL orders the results by the avatar_url field.
func ByAvatarURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAvatarURL, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByLastSeenAt orders the results by the last_seen_at field.
func ByLastSeenAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLastSeenAt, opts...).ToFunc()
}

// ByMembershipsCount orders the results by memberships count.
func ByMembershipsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newMembershipsStep(), opts...)
	}
}

// ByMemberships orders the results by memberships terms.
func ByMemberships(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newMembershipsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByMessagesCount orders the results by messages count.
func ByMessagesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newMessagesStep(), opts...)
	}
}

// ByMessages orders the results by messages terms.
func ByMessages(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newMessagesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByUploadedMediaCount orders the results by uploaded_media count.
func ByUploadedMediaCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newUploadedMediaStep(), opts...)
	}
}

// ByUploadedMedia orders the results by uploaded_media terms.
func ByUploadedMedia(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUploadedMediaStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByOwnedRoomsCount orders the results by owned_rooms count.
func ByOwnedRoomsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newOwnedRoomsStep(), opts...)
	}
}

// ByOwnedRooms orders the results by owned_rooms terms.
func ByOwnedRooms(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOwnedRoomsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByContactsCount orders the results by contacts count.
func ByContactsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newContactsStep(), opts...)
	}
}

// ByContacts orders the results by contacts terms.
func ByContacts(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newContactsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByContactEntriesCount orders the results by contact_entries count.
func ByContactEntriesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newContactEntriesStep(), opts...)
	}
}

// ByContactEntries orders the results by contact_entries terms.
func ByContactEntries(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newContactEntriesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByFavouritesCount orders the results by favourites count.
func ByFavouritesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newFavouritesStep(), opts...)
	}
}

// ByFavourites orders the results by favourites terms.
func ByFavourites(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newFavouritesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByInitiatedCallsCount orders the results by initiated_calls count.
func ByInitiatedCallsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newInitiatedCallsStep(), opts...)
	}
}

// ByInitiatedCalls orders the results by initiated_calls terms.
func ByInitiatedCalls(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newInitiatedCallsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByCallParticipationsCount orders the results by call_participations count.
func ByCallParticipationsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newCallParticipationsStep(), opts...)
	}
}

// ByCallParticipations orders the results by call_participations terms.
func ByCallParticipations(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCallParticipationsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newMembershipsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(MembershipsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, MembershipsTable, MembershipsColumn),
	)
}
func newMessagesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(MessagesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, MessagesTable, MessagesColumn),
	)
}
func newUploadedMediaStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UploadedMediaInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, UploadedMediaTable, UploadedMediaColumn),
	)
}
func newOwnedRoomsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OwnedRoomsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, OwnedRoomsTable, OwnedRoomsColumn),
	)
}
func newContactsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ContactsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, ContactsTable, ContactsColumn),
	)
}
func newContactEntriesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ContactEntriesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, ContactEntriesTable, ContactEntriesColumn),
	)
}
func newFavouritesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(FavouritesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, FavouritesTable, FavouritesColumn),
	)
}
func newInitiatedCallsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(InitiatedCallsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, InitiatedCallsTable, InitiatedCallsColumn),
	)
}
func newCallParticipationsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CallParticipationsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, CallParticipationsTable, CallParticipationsColumn),
	)
}
