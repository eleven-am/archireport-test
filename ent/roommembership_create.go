// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/eleven-am/enclave/ent/room"
	"github.com/eleven-am/enclave/ent/roommembership"
	"github.com/eleven-am/enclave/ent/user"
)

// RoomMembershipCreate is the builder for creating a RoomMembership entity.
type RoomMembershipCreate struct {
	config
	mutation *RoomMembershipMutation
	hooks    []Hook
}

// SetRole sets the "role" field.
func (rmc *RoomMembershipCreate) SetRole(r roommembership.Role) *RoomMembershipCreate {
	rmc.mutation.SetRole(r)
	return rmc
}

// SetNillableRole sets the "role" field if the given value is not nil.
func (rmc *RoomMembershipCreate) SetNillableRole(r *roommembership.Role) *RoomMembershipCreate {
	if r != nil {
		rmc.SetRole(*r)
	}
	return rmc
}

// SetCanPost sets the "can_post" field.
func (rmc *RoomMembershipCreate) SetCanPost(b bool) *RoomMembershipCreate {
	rmc.mutation.SetCanPost(b)
	return rmc
}

// SetNillableCanPost sets the "can_post" field if the given value is not nil.
func (rmc *RoomMembershipCreate) SetNillableCanPost(b *bool) *RoomMembershipCreate {
	if b != nil {
		rmc.SetCanPost(*b)
	}
	return rmc
}

// SetCanCall sets the "can_call" field.
func (rmc *RoomMembershipCreate) SetCanCall(b bool) *RoomMembershipCreate {
	rmc.mutation.SetCanCall(b)
	return rmc
}

// SetNillableCanCall sets the "can_call" field if the given value is not nil.
func (rmc *RoomMembershipCreate) SetNillableCanCall(b *bool) *RoomMembershipCreate {
	if b != nil {
		rmc.SetCanCall(*b)
	}
	return rmc
}

// SetJoinedAt sets the "joined_at" field.
func (rmc *RoomMembershipCreate) SetJoinedAt(t time.Time) *RoomMembershipCreate {
	rmc.mutation.SetJoinedAt(t)
	return rmc
}

// SetNillableJoinedAt sets the "joined_at" field if the given value is not nil.
func (rmc *RoomMembershipCreate) SetNillableJoinedAt(t *time.Time) *RoomMembershipCreate {
	if t != nil {
		rmc.SetJoinedAt(*t)
	}
	return rmc
}

// SetUpdatedAt sets the "updated_at" field.
func (rmc *RoomMembershipCreate) SetUpdatedAt(t time.Time) *RoomMembershipCreate {
	rmc.mutation.SetUpdatedAt(t)
	return rmc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (rmc *RoomMembershipCreate) SetNillableUpdatedAt(t *time.Time) *RoomMembershipCreate {
	if t != nil {
		rmc.SetUpdatedAt(*t)
	}
	return rmc
}

// SetUserID sets the "user" edge to the User entity by ID.
func (rmc *RoomMembershipCreate) SetUserID(id int) *RoomMembershipCreate {
	rmc.mutation.SetUserID(id)
	return rmc
}

// SetUser sets the "user" edge to the User entity.
func (rmc *RoomMembershipCreate) SetUser(u *User) *RoomMembershipCreate {
	return rmc.SetUserID(u.ID)
}

// SetRoomID sets the "room" edge to the Room entity by ID.
func (rmc *RoomMembershipCreate) SetRoomID(id int) *RoomMembershipCreate {
	rmc.mutation.SetRoomID(id)
	return rmc
}

// SetRoom sets the "room" edge to the Room entity.
func (rmc *RoomMembershipCreate) SetRoom(r *Room) *RoomMembershipCreate {
	return rmc.SetRoomID(r.ID)
}

// Mutation returns the RoomMembershipMutation object of the builder.
func (rmc *RoomMembershipCreate) Mutation() *RoomMembershipMutation {
	return rmc.mutation
}

// Save creates the RoomMembership in the database.
func (rmc *RoomMembershipCreate) Save(ctx context.Context) (*RoomMembership, error) {
	rmc.defaults()
	return withHooks(ctx, rmc.sqlSave, rmc.mutation, rmc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (rmc *RoomMembershipCreate) SaveX(ctx context.Context) *RoomMembership {
	v, err := rmc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rmc *RoomMembershipCreate) Exec(ctx context.Context) error {
	_, err := rmc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rmc *RoomMembershipCreate) ExecX(ctx context.Context) {
	if err := rmc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rmc *RoomMembershipCreate) defaults() {
	if _, ok := rmc.mutation.Role(); !ok {
		v := roommembership.DefaultRole
		rmc.mutation.SetRole(v)
	}
	if _, ok := rmc.mutation.CanPost(); !ok {
		v := roommembership.DefaultCanPost
		rmc.mutation.SetCanPost(v)
	}
	if _, ok := rmc.mutation.CanCall(); !ok {
		v := roommembership.DefaultCanCall
		rmc.mutation.SetCanCall(v)
	}
	if _, ok := rmc.mutation.JoinedAt(); !ok {
		v := roommembership.DefaultJoinedAt()
		rmc.mutation.SetJoinedAt(v)
	}
	if _, ok := rmc.mutation.UpdatedAt(); !ok {
		v := roommembership.DefaultUpdatedAt()
		rmc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rmc *RoomMembershipCreate) check() error {
	if _, ok := rmc.mutation.Role(); !ok {
		return &ValidationError{Name: "role", err: errors.New(`ent: missing required field "RoomMembership.role"`)}
	}
	if v, ok := rmc.mutation.Role(); ok {
		if err := roommembership.RoleValidator(v); err != nil {
			return &ValidationError{Name: "role", err: fmt.Errorf(`ent: validator failed for field "RoomMembership.role": %w`, err)}
		}
	}
	if _, ok := rmc.mutation.CanPost(); !ok {
		return &ValidationError{Name: "can_post", err: errors.New(`ent: missing required field "RoomMembership.can_post"`)}
	}
	if _, ok := rmc.mutation.CanCall(); !ok {
		return &ValidationError{Name: "can_call", err: errors.New(`ent: missing required field "RoomMembership.can_call"`)}
	}
	if _, ok := rmc.mutation.JoinedAt(); !ok {
		return &ValidationError{Name: "joined_at", err: errors.New(`ent: missing required field "RoomMembership.joined_at"`)}
	}
	if _, ok := rmc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "RoomMembership.updated_at"`)}
	}
	if _, ok := rmc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required edge "RoomMembership.user"`)}
	}
	if _, ok := rmc.mutation.RoomID(); !ok {
		return &ValidationError{Name: "room", err: errors.New(`ent: missing required edge "RoomMembership.room"`)}
	}
	return nil
}

func (rmc *RoomMembershipCreate) sqlSave(ctx context.Context) (*RoomMembership, error) {
	if err := rmc.check(); err != nil {
		return nil, err
	}
	_node, _spec := rmc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rmc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	rmc.mutation.id = &_node.ID
	rmc.mutation.done = true
	return _node, nil
}

func (rmc *RoomMembershipCreate) createSpec() (*RoomMembership, *sqlgraph.CreateSpec) {
	var (
		_node = &RoomMembership{config: rmc.config}
		_spec = sqlgraph.NewCreateSpec(roommembership.Table, sqlgraph.NewFieldSpec(roommembership.FieldID, field.TypeInt))
	)
	if value, ok := rmc.mutation.Role(); ok {
		_spec.SetField(roommembership.FieldRole, field.TypeEnum, value)
		_node.Role = value
	}
	if value, ok := rmc.mutation.CanPost(); ok {
		_spec.SetField(roommembership.FieldCanPost, field.TypeBool, value)
		_node.CanPost = value
	}
	if value, ok := rmc.mutation.CanCall(); ok {
		_spec.SetField(roommembership.FieldCanCall, field.TypeBool, value)
		_node.CanCall = value
	}
	if value, ok := rmc.mutation.JoinedAt(); ok {
		_spec.SetField(roommembership.FieldJoinedAt, field.TypeTime, value)
		_node.JoinedAt = value
	}
	if value, ok := rmc.mutation.UpdatedAt(); ok {
		_spec.SetField(roommembership.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := rmc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   roommembership.UserTable,
			Columns: []string{roommembership.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.room_membership_user = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rmc.mutation.RoomIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   roommembership.RoomTable,
			Columns: []string{roommembership.RoomColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(room.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.room_membership_room = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// RoomMembershipCreateBulk is the builder for creating many RoomMembership entities in bulk.
type RoomMembershipCreateBulk struct {
	config
	err      error
	builders []*RoomMembershipCreate
}

// Save creates the RoomMembership entities in the database.
func (rmcb *RoomMembershipCreateBulk) Save(ctx context.Context) ([]*RoomMembership, error) {
	if rmcb.err != nil {
		return nil, rmcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(rmcb.builders))
	nodes := make([]*RoomMembership, len(rmcb.builders))
	mutators := make([]Mutator, len(rmcb.builders))
	for i := range rmcb.builders {
		func(i int, root context.Context) {
			builder := rmcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*RoomMembershipMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rmcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rmcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rmcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rmcb *RoomMembershipCreateBulk) SaveX(ctx context.Context) []*RoomMembership {
	v, err := rmcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rmcb *RoomMembershipCreateBulk) Exec(ctx context.Context) error {
	_, err := rmcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rmcb *RoomMembershipCreateBulk) ExecX(ctx context.Context) {
	if err := rmcb.Exec(ctx); err != nil {
		panic(err)
	}
}
