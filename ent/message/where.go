// Code generated by ent, DO NOT EDIT.

package message

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/eleven-am/enclave/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Message {
	return predicate.Message(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Message {
	return predicate.Message(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Message {
	return predicate.Message(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Message {
	return predicate.Message(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Message {
	return predicate.Message(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Message {
	return predicate.Message(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Message {
	return predicate.Message(sql.FieldLTE(FieldID, id))
}

// CipherText applies equality check predicate on the "cipher_text" field. It's identical to CipherTextEQ.
func CipherText(v string) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldCipherText, v))
}

// ContentType applies equality check predicate on the "content_type" field. It's identical to ContentTypeEQ.
func ContentType(v string) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldContentType, v))
}

// EncryptionScheme applies equality check predicate on the "encryption_scheme" field. It's identical to EncryptionSchemeEQ.
func EncryptionScheme(v string) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldEncryptionScheme, v))
}

// Edited applies equality check predicate on the "edited" field. It's identical to EditedEQ.
func Edited(v bool) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldEdited, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldUpdatedAt, v))
}

// CipherTextEQ applies the EQ predicate on the "cipher_text" field.
func CipherTextEQ(v string) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldCipherText, v))
}

// CipherTextNEQ applies the NEQ predicate on the "cipher_text" field.
func CipherTextNEQ(v string) predicate.Message {
	return predicate.Message(sql.FieldNEQ(FieldCipherText, v))
}

// CipherTextIn applies the In predicate on the "cipher_text" field.
func CipherTextIn(vs ...string) predicate.Message {
	return predicate.Message(sql.FieldIn(FieldCipherText, vs...))
}

// CipherTextNotIn applies the NotIn predicate on the "cipher_text" field.
func CipherTextNotIn(vs ...string) predicate.Message {
	return predicate.Message(sql.FieldNotIn(FieldCipherText, vs...))
}

// CipherTextGT applies the GT predicate on the "cipher_text" field.
func CipherTextGT(v string) predicate.Message {
	return predicate.Message(sql.FieldGT(FieldCipherText, v))
}

// CipherTextGTE applies the GTE predicate on the "cipher_text" field.
func CipherTextGTE(v string) predicate.Message {
	return predicate.Message(sql.FieldGTE(FieldCipherText, v))
}

// CipherTextLT applies the LT predicate on the "cipher_text" field.
func CipherTextLT(v string) predicate.Message {
	return predicate.Message(sql.FieldLT(FieldCipherText, v))
}

// CipherTextLTE applies the LTE predicate on the "cipher_text" field.
func CipherTextLTE(v string) predicate.Message {
	return predicate.Message(sql.FieldLTE(FieldCipherText, v))
}

// CipherTextContains applies the Contains predicate on the "cipher_text" field.
func CipherTextContains(v string) predicate.Message {
	return predicate.Message(sql.FieldContains(FieldCipherText, v))
}

// CipherTextHasPrefix applies the HasPrefix predicate on the "cipher_text" field.
func CipherTextHasPrefix(v string) predicate.Message {
	return predicate.Message(sql.FieldHasPrefix(FieldCipherText, v))
}

// CipherTextHasSuffix applies the HasSuffix predicate on the "cipher_text" field.
func CipherTextHasSuffix(v string) predicate.Message {
	return predicate.Message(sql.FieldHasSuffix(FieldCipherText, v))
}

// CipherTextEqualFold applies the EqualFold predicate on the "cipher_text" field.
func CipherTextEqualFold(v string) predicate.Message {
	return predicate.Message(sql.FieldEqualFold(FieldCipherText, v))
}

// CipherTextContainsFold applies the ContainsFold predicate on the "cipher_text" field.
func CipherTextContainsFold(v string) predicate.Message {
	return predicate.Message(sql.FieldContainsFold(FieldCipherText, v))
}

// ContentTypeEQ applies the EQ predicate on the "content_type" field.
func ContentTypeEQ(v string) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldContentType, v))
}

// ContentTypeNEQ applies the NEQ predicate on the "content_type" field.
func ContentTypeNEQ(v string) predicate.Message {
	return predicate.Message(sql.FieldNEQ(FieldContentType, v))
}

// ContentTypeIn applies the In predicate on the "content_type" field.
func ContentTypeIn(vs ...string) predicate.Message {
	return predicate.Message(sql.FieldIn(FieldContentType, vs...))
}

// ContentTypeNotIn applies the NotIn predicate on the "content_type" field.
func ContentTypeNotIn(vs ...string) predicate.Message {
	return predicate.Message(sql.FieldNotIn(FieldContentType, vs...))
}

// ContentTypeGT applies the GT predicate on the "content_type" field.
func ContentTypeGT(v string) predicate.Message {
	return predicate.Message(sql.FieldGT(FieldContentType, v))
}

// ContentTypeGTE applies the GTE predicate on the "content_type" field.
func ContentTypeGTE(v string) predicate.Message {
	return predicate.Message(sql.FieldGTE(FieldContentType, v))
}

// ContentTypeLT applies the LT predicate on the "content_type" field.
func ContentTypeLT(v string) predicate.Message {
	return predicate.Message(sql.FieldLT(FieldContentType, v))
}

// ContentTypeLTE applies the LTE predicate on the "content_type" field.
func ContentTypeLTE(v string) predicate.Message {
	return predicate.Message(sql.FieldLTE(FieldContentType, v))
}

// ContentTypeContains applies the Contains predicate on the "content_type" field.
func ContentTypeContains(v string) predicate.Message {
	return predicate.Message(sql.FieldContains(FieldContentType, v))
}

// ContentTypeHasPrefix applies the HasPrefix predicate on the "content_type" field.
func ContentTypeHasPrefix(v string) predicate.Message {
	return predicate.Message(sql.FieldHasPrefix(FieldContentType, v))
}

// ContentTypeHasSuffix applies the HasSuffix predicate on the "content_type" field.
func ContentTypeHasSuffix(v string) predicate.Message {
	return predicate.Message(sql.FieldHasSuffix(FieldContentType, v))
}

// ContentTypeEqualFold applies the EqualFold predicate on the "content_type" field.
func ContentTypeEqualFold(v string) predicate.Message {
	return predicate.Message(sql.FieldEqualFold(FieldContentType, v))
}

// ContentTypeContainsFold applies the ContainsFold predicate on the "content_type" field.
func ContentTypeContainsFold(v string) predicate.Message {
	return predicate.Message(sql.FieldContainsFold(FieldContentType, v))
}

// EncryptionSchemeEQ applies the EQ predicate on the "encryption_scheme" field.
func EncryptionSchemeEQ(v string) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldEncryptionScheme, v))
}

// EncryptionSchemeNEQ applies the NEQ predicate on the "encryption_scheme" field.
func EncryptionSchemeNEQ(v string) predicate.Message {
	return predicate.Message(sql.FieldNEQ(FieldEncryptionScheme, v))
}

// EncryptionSchemeIn applies the In predicate on the "encryption_scheme" field.
func EncryptionSchemeIn(vs ...string) predicate.Message {
	return predicate.Message(sql.FieldIn(FieldEncryptionScheme, vs...))
}

// EncryptionSchemeNotIn applies the NotIn predicate on the "encryption_scheme" field.
func EncryptionSchemeNotIn(vs ...string) predicate.Message {
	return predicate.Message(sql.FieldNotIn(FieldEncryptionScheme, vs...))
}

// EncryptionSchemeGT applies the GT predicate on the "encryption_scheme" field.
func EncryptionSchemeGT(v string) predicate.Message {
	return predicate.Message(sql.FieldGT(FieldEncryptionScheme, v))
}

// EncryptionSchemeGTE applies the GTE predicate on the "encryption_scheme" field.
func EncryptionSchemeGTE(v string) predicate.Message {
	return predicate.Message(sql.FieldGTE(FieldEncryptionScheme, v))
}

// EncryptionSchemeLT applies the LT predicate on the "encryption_scheme" field.
func EncryptionSchemeLT(v string) predicate.Message {
	return predicate.Message(sql.FieldLT(FieldEncryptionScheme, v))
}

// EncryptionSchemeLTE applies the LTE predicate on the "encryption_scheme" field.
func EncryptionSchemeLTE(v string) predicate.Message {
	return predicate.Message(sql.FieldLTE(FieldEncryptionScheme, v))
}

// EncryptionSchemeContains applies the Contains predicate on the "encryption_scheme" field.
func EncryptionSchemeContains(v string) predicate.Message {
	return predicate.Message(sql.FieldContains(FieldEncryptionScheme, v))
}

// EncryptionSchemeHasPrefix applies the HasPrefix predicate on the "encryption_scheme" field.
func EncryptionSchemeHasPrefix(v string) predicate.Message {
	return predicate.Message(sql.FieldHasPrefix(FieldEncryptionScheme, v))
}

// EncryptionSchemeHasSuffix applies the HasSuffix predicate on the "encryption_scheme" field.
func EncryptionSchemeHasSuffix(v string) predicate.Message {
	return predicate.Message(sql.FieldHasSuffix(FieldEncryptionScheme, v))
}

// EncryptionSchemeEqualFold applies the EqualFold predicate on the "encryption_scheme" field.
func EncryptionSchemeEqualFold(v string) predicate.Message {
	return predicate.Message(sql.FieldEqualFold(FieldEncryptionScheme, v))
}

// EncryptionSchemeContainsFold applies the ContainsFold predicate on the "encryption_scheme" field.
func EncryptionSchemeContainsFold(v string) predicate.Message {
	return predicate.Message(sql.FieldContainsFold(FieldEncryptionScheme, v))
}

// EditedEQ applies the EQ predicate on the "edited" field.
func EditedEQ(v bool) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldEdited, v))
}

// EditedNEQ applies the NEQ predicate on the "edited" field.
func EditedNEQ(v bool) predicate.Message {
	return predicate.Message(sql.FieldNEQ(FieldEdited, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Message {
	return predicate.Message(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Message {
	return predicate.Message(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Message {
	return predicate.Message(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Message {
	return predicate.Message(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Message {
	return predicate.Message(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Message {
	return predicate.Message(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Message {
	return predicate.Message(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Message {
	return predicate.Message(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Message {
	return predicate.Message(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Message {
	return predicate.Message(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Message {
	return predicate.Message(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Message {
	return predicate.Message(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Message {
	return predicate.Message(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Message {
	return predicate.Message(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasSender applies the HasEdge predicate on the "sender" edge.
func HasSender() predicate.Message {
	return predicate.Message(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, SenderTable, SenderColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSenderWith applies the HasEdge predicate on the "sender" edge with a given conditions (other predicates).
func HasSenderWith(preds ...predicate.User) predicate.Message {
	return predicate.Message(func(s *sql.Selector) {
		step := newSenderStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasRoom applies the HasEdge predicate on the "room" edge.
func HasRoom() predicate.Message {
	return predicate.Message(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, RoomTable, RoomColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRoomWith applies the HasEdge predicate on the "room" edge with a given conditions (other predicates).
func HasRoomWith(preds ...predicate.Room) predicate.Message {
	return predicate.Message(func(s *sql.Selector) {
		step := newRoomStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasMedia applies the HasEdge predicate on the "media" edge.
func HasMedia() predicate.Message {
	return predicate.Message(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, MediaTable, MediaColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMediaWith applies the HasEdge predicate on the "media" edge with a given conditions (other predicates).
func HasMediaWith(preds ...predicate.Media) predicate.Message {
	return predicate.Message(func(s *sql.Selector) {
		step := newMediaStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Message) predicate.Message {
	return predicate.Message(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Message) predicate.Message {
	return predicate.Message(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Message) predicate.Message {
	return predicate.Message(sql.NotPredicates(p))
}
