// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/eleven-am/enclave/ent/media"
	"github.com/eleven-am/enclave/ent/message"
	"github.com/eleven-am/enclave/ent/user"
)

// Media is the model entity for the Media schema.
type Media struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Filename holds the value of the "filename" field.
	Filename string `json:"filename,omitempty"`
	// ContentType holds the value of the "content_type" field.
	ContentType string `json:"content_type,omitempty"`
	// StoragePath holds the value of the "storage_path" field.
	StoragePath string `json:"storage_path,omitempty"`
	// Checksum holds the value of the "checksum" field.
	Checksum string `json:"checksum,omitempty"`
	// SizeBytes holds the value of the "size_bytes" field.
	SizeBytes int64 `json:"size_bytes,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the MediaQuery when eager-loading is set.
	Edges          MediaEdges `json:"edges"`
	media_uploader *int
	media_message  *int
	selectValues   sql.SelectValues
}

// MediaEdges holds the relations/edges for other nodes in the graph.
type MediaEdges struct {
	// Uploader holds the value of the uploader edge.
	Uploader *User `json:"uploader,omitempty"`
	// Message holds the value of the message edge.
	Message *Message `json:"message,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// UploaderOrErr returns the Uploader value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e MediaEdges) UploaderOrErr() (*User, error) {
	if e.Uploader != nil {
		return e.Uploader, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "uploader"}
}

// MessageOrErr returns the Message value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e MediaEdges) MessageOrErr() (*Message, error) {
	if e.Message != nil {
		return e.Message, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: message.Label}
	}
	return nil, &NotLoadedError{edge: "message"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Media) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case media.FieldID, media.FieldSizeBytes:
			values[i] = new(sql.NullInt64)
		case media.FieldFilename, media.FieldContentType, media.FieldStoragePath, media.FieldChecksum:
			values[i] = new(sql.NullString)
		case media.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case media.ForeignKeys[0]: // media_uploader
			values[i] = new(sql.NullInt64)
		case media.ForeignKeys[1]: // media_message
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Media fields.
func (m *Media) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case media.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			m.ID = int(value.Int64)
		case media.FieldFilename:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field filename", values[i])
			} else if value.Valid {
				m.Filename = value.String
			}
		case media.FieldContentType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field content_type", values[i])
			} else if value.Valid {
				m.ContentType = value.String
			}
		case media.FieldStoragePath:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field storage_path", values[i])
			} else if value.Valid {
				m.StoragePath = value.String
			}
		case media.FieldChecksum:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field checksum", values[i])
			} else if value.Valid {
				m.Checksum = value.String
			}
		case media.FieldSizeBytes:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field size_bytes", values[i])
			} else if value.Valid {
				m.SizeBytes = value.Int64
			}
		case media.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				m.CreatedAt = value.Time
			}
		case media.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field media_uploader", value)
			} else if value.Valid {
				m.media_uploader = new(int)
				*m.media_uploader = int(value.Int64)
			}
		case media.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field media_message", value)
			} else if value.Valid {
				m.media_message = new(int)
				*m.media_message = int(value.Int64)
			}
		default:
			m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Media.
// This includes values selected through modifiers, order, etc.
func (m *Media) Value(name string) (ent.Value, error) {
	return m.selectValues.Get(name)
}

// QueryUploader queries the "uploader" edge of the Media entity.
func (m *Media) QueryUploader() *UserQuery {
	return NewMediaClient(m.config).QueryUploader(m)
}

// QueryMessage queries the "message" edge of the Media entity.
func (m *Media) QueryMessage() *MessageQuery {
	return NewMediaClient(m.config).QueryMessage(m)
}

// Update returns a builder for updating this Media.
// Note that you need to call Media.Unwrap() before calling this method if this Media
// was returned from a transaction, and the transaction was committed or rolled back.
func (m *Media) Update() *MediaUpdateOne {
	return NewMediaClient(m.config).UpdateOne(m)
}

// Unwrap unwraps the Media entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (m *Media) Unwrap() *Media {
	_tx, ok := m.config.driver.(*txDriver)
	if !ok {
		panic("ent: Media is not a transactional entity")
	}
	m.config.driver = _tx.drv
	return m
}

// String implements the fmt.Stringer.
func (m *Media) String() string {
	var builder strings.Builder
	builder.WriteString("Media(")
	builder.WriteString(fmt.Sprintf("id=%v, ", m.ID))
	builder.WriteString("filename=")
	builder.WriteString(m.Filename)
	builder.WriteString(", ")
	builder.WriteString("content_type=")
	builder.WriteString(m.ContentType)
	builder.WriteString(", ")
	builder.WriteString("storage_path=")
	builder.WriteString(m.StoragePath)
	builder.WriteString(", ")
	builder.WriteString("checksum=")
	builder.WriteString(m.Checksum)
	builder.WriteString(", ")
	builder.WriteString("size_bytes=")
	builder.WriteString(fmt.Sprintf("%v", m.SizeBytes))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(m.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// MediaSlice is a parsable slice of Media.
type MediaSlice []*Media
