// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/eleven-am/enclave/ent/calllog"
	"github.com/eleven-am/enclave/ent/callparticipant"
	"github.com/eleven-am/enclave/ent/predicate"
	"github.com/eleven-am/enclave/ent/room"
	"github.com/eleven-am/enclave/ent/user"
)

// CallLogUpdate is the builder for updating CallLog entities.
type CallLogUpdate struct {
	config
	hooks    []Hook
	mutation *CallLogMutation
}

// Where appends a list predicates to the CallLogUpdate builder.
func (clu *CallLogUpdate) Where(ps ...predicate.CallLog) *CallLogUpdate {
	clu.mutation.Where(ps...)
	return clu
}

// SetStatus sets the "status" field.
func (clu *CallLogUpdate) SetStatus(c calllog.Status) *CallLogUpdate {
	clu.mutation.SetStatus(c)
	return clu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (clu *CallLogUpdate) SetNillableStatus(c *calllog.Status) *CallLogUpdate {
	if c != nil {
		clu.SetStatus(*c)
	}
	return clu
}

// SetStartedAt sets the "started_at" field.
func (clu *CallLogUpdate) SetStartedAt(t time.Time) *CallLogUpdate {
	clu.mutation.SetStartedAt(t)
	return clu
}

// SetNillableStartedAt sets the "started_at" field if the given value is not nil.
func (clu *CallLogUpdate) SetNillableStartedAt(t *time.Time) *CallLogUpdate {
	if t != nil {
		clu.SetStartedAt(*t)
	}
	return clu
}

// SetEndedAt sets the "ended_at" field.
func (clu *CallLogUpdate) SetEndedAt(t time.Time) *CallLogUpdate {
	clu.mutation.SetEndedAt(t)
	return clu
}

// SetNillableEndedAt sets the "ended_at" field if the given value is not nil.
func (clu *CallLogUpdate) SetNillableEndedAt(t *time.Time) *CallLogUpdate {
	if t != nil {
		clu.SetEndedAt(*t)
	}
	return clu
}

// ClearEndedAt clears the value of the "ended_at" field.
func (clu *CallLogUpdate) ClearEndedAt() *CallLogUpdate {
	clu.mutation.ClearEndedAt()
	return clu
}

// SetCreatedAt sets the "created_at" field.
func (clu *CallLogUpdate) SetCreatedAt(t time.Time) *CallLogUpdate {
	clu.mutation.SetCreatedAt(t)
	return clu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (clu *CallLogUpdate) SetNillableCreatedAt(t *time.Time) *CallLogUpdate {
	if t != nil {
		clu.SetCreatedAt(*t)
	}
	return clu
}

// SetInitiatorID sets the "initiator" edge to the User entity by ID.
func (clu *CallLogUpdate) SetInitiatorID(id int) *CallLogUpdate {
	clu.mutation.SetInitiatorID(id)
	return clu
}

// SetInitiator sets the "initiator" edge to the User entity.
func (clu *CallLogUpdate) SetInitiator(u *User) *CallLogUpdate {
	return clu.SetInitiatorID(u.ID)
}

// SetRoomID sets the "room" edge to the Room entity by ID.
func (clu *CallLogUpdate) SetRoomID(id int) *CallLogUpdate {
	clu.mutation.SetRoomID(id)
	return clu
}

// SetNillableRoomID sets the "room" edge to the Room entity by ID if the given value is not nil.
func (clu *CallLogUpdate) SetNillableRoomID(id *int) *CallLogUpdate {
	if id != nil {
		clu = clu.SetRoomID(*id)
	}
	return clu
}

// SetRoom sets the "room" edge to the Room entity.
func (clu *CallLogUpdate) SetRoom(r *Room) *CallLogUpdate {
	return clu.SetRoomID(r.ID)
}

// AddParticipantIDs adds the "participants" edge to the CallParticipant entity by IDs.
func (clu *CallLogUpdate) AddParticipantIDs(ids ...int) *CallLogUpdate {
	clu.mutation.AddParticipantIDs(ids...)
	return clu
}

// AddParticipants adds the "participants" edges to the CallParticipant entity.
func (clu *CallLogUpdate) AddParticipants(c ...*CallParticipant) *CallLogUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return clu.AddParticipantIDs(ids...)
}

// Mutation returns the CallLogMutation object of the builder.
func (clu *CallLogUpdate) Mutation() *CallLogMutation {
	return clu.mutation
}

// ClearInitiator clears the "initiator" edge to the User entity.
func (clu *CallLogUpdate) ClearInitiator() *CallLogUpdate {
	clu.mutation.ClearInitiator()
	return clu
}

// ClearRoom clears the "room" edge to the Room entity.
func (clu *CallLogUpdate) ClearRoom() *CallLogUpdate {
	clu.mutation.ClearRoom()
	return clu
}

// ClearParticipants clears all "participants" edges to the CallParticipant entity.
func (clu *CallLogUpdate) ClearParticipants() *CallLogUpdate {
	clu.mutation.ClearParticipants()
	return clu
}

// RemoveParticipantIDs removes the "participants" edge to CallParticipant entities by IDs.
func (clu *CallLogUpdate) RemoveParticipantIDs(ids ...int) *CallLogUpdate {
	clu.mutation.RemoveParticipantIDs(ids...)
	return clu
}

// RemoveParticipants removes "participants" edges to CallParticipant entities.
func (clu *CallLogUpdate) RemoveParticipants(c ...*CallParticipant) *CallLogUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return clu.RemoveParticipantIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (clu *CallLogUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, clu.sqlSave, clu.mutation, clu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (clu *CallLogUpdate) SaveX(ctx context.Context) int {
	affected, err := clu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (clu *CallLogUpdate) Exec(ctx context.Context) error {
	_, err := clu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (clu *CallLogUpdate) ExecX(ctx context.Context) {
	if err := clu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (clu *CallLogUpdate) check() error {
	if v, ok := clu.mutation.Status(); ok {
		if err := calllog.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "CallLog.status": %w`, err)}
		}
	}
	if _, ok := clu.mutation.InitiatorID(); clu.mutation.InitiatorCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "CallLog.initiator"`)
	}
	return nil
}

func (clu *CallLogUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := clu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(calllog.Table, calllog.Columns, sqlgraph.NewFieldSpec(calllog.FieldID, field.TypeInt))
	if ps := clu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := clu.mutation.Status(); ok {
		_spec.SetField(calllog.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := clu.mutation.StartedAt(); ok {
		_spec.SetField(calllog.FieldStartedAt, field.TypeTime, value)
	}
	if value, ok := clu.mutation.EndedAt(); ok {
		_spec.SetField(calllog.FieldEndedAt, field.TypeTime, value)
	}
	if clu.mutation.EndedAtCleared() {
		_spec.ClearField(calllog.FieldEndedAt, field.TypeTime)
	}
	if value, ok := clu.mutation.CreatedAt(); ok {
		_spec.SetField(calllog.FieldCreatedAt, field.TypeTime, value)
	}
	if clu.mutation.InitiatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   calllog.InitiatorTable,
			Columns: []string{calllog.InitiatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := clu.mutation.InitiatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   calllog.InitiatorTable,
			Columns: []string{calllog.InitiatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if clu.mutation.RoomCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   calllog.RoomTable,
			Columns: []string{calllog.RoomColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(room.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := clu.mutation.RoomIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   calllog.RoomTable,
			Columns: []string{calllog.RoomColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(room.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if clu.mutation.ParticipantsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   calllog.ParticipantsTable,
			Columns: []string{calllog.ParticipantsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(callparticipant.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := clu.mutation.RemovedParticipantsIDs(); len(nodes) > 0 && !clu.mutation.ParticipantsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   calllog.ParticipantsTable,
			Columns: []string{calllog.ParticipantsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(callparticipant.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := clu.mutation.ParticipantsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   calllog.ParticipantsTable,
			Columns: []string{calllog.ParticipantsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(callparticipant.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, clu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{calllog.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	clu.mutation.done = true
	return n, nil
}

// CallLogUpdateOne is the builder for updating a single CallLog entity.
type CallLogUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CallLogMutation
}

// SetStatus sets the "status" field.
func (cluo *CallLogUpdateOne) SetStatus(c calllog.Status) *CallLogUpdateOne {
	cluo.mutation.SetStatus(c)
	return cluo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (cluo *CallLogUpdateOne) SetNillableStatus(c *calllog.Status) *CallLogUpdateOne {
	if c != nil {
		cluo.SetStatus(*c)
	}
	return cluo
}

// SetStartedAt sets the "started_at" field.
func (cluo *CallLogUpdateOne) SetStartedAt(t time.Time) *CallLogUpdateOne {
	cluo.mutation.SetStartedAt(t)
	return cluo
}

// SetNillableStartedAt sets the "started_at" field if the given value is not nil.
func (cluo *CallLogUpdateOne) SetNillableStartedAt(t *time.Time) *CallLogUpdateOne {
	if t != nil {
		cluo.SetStartedAt(*t)
	}
	return cluo
}

// SetEndedAt sets the "ended_at" field.
func (cluo *CallLogUpdateOne) SetEndedAt(t time.Time) *CallLogUpdateOne {
	cluo.mutation.SetEndedAt(t)
	return cluo
}

// SetNillableEndedAt sets the "ended_at" field if the given value is not nil.
func (cluo *CallLogUpdateOne) SetNillableEndedAt(t *time.Time) *CallLogUpdateOne {
	if t != nil {
		cluo.SetEndedAt(*t)
	}
	return cluo
}

// ClearEndedAt clears the value of the "ended_at" field.
func (cluo *CallLogUpdateOne) ClearEndedAt() *CallLogUpdateOne {
	cluo.mutation.ClearEndedAt()
	return cluo
}

// SetCreatedAt sets the "created_at" field.
func (cluo *CallLogUpdateOne) SetCreatedAt(t time.Time) *CallLogUpdateOne {
	cluo.mutation.SetCreatedAt(t)
	return cluo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cluo *CallLogUpdateOne) SetNillableCreatedAt(t *time.Time) *CallLogUpdateOne {
	if t != nil {
		cluo.SetCreatedAt(*t)
	}
	return cluo
}

// SetInitiatorID sets the "initiator" edge to the User entity by ID.
func (cluo *CallLogUpdateOne) SetInitiatorID(id int) *CallLogUpdateOne {
	cluo.mutation.SetInitiatorID(id)
	return cluo
}

// SetInitiator sets the "initiator" edge to the User entity.
func (cluo *CallLogUpdateOne) SetInitiator(u *User) *CallLogUpdateOne {
	return cluo.SetInitiatorID(u.ID)
}

// SetRoomID sets the "room" edge to the Room entity by ID.
func (cluo *CallLogUpdateOne) SetRoomID(id int) *CallLogUpdateOne {
	cluo.mutation.SetRoomID(id)
	return cluo
}

// SetNillableRoomID sets the "room" edge to the Room entity by ID if the given value is not nil.
func (cluo *CallLogUpdateOne) SetNillableRoomID(id *int) *CallLogUpdateOne {
	if id != nil {
		cluo = cluo.SetRoomID(*id)
	}
	return cluo
}

// SetRoom sets the "room" edge to the Room entity.
func (cluo *CallLogUpdateOne) SetRoom(r *Room) *CallLogUpdateOne {
	return cluo.SetRoomID(r.ID)
}

// AddParticipantIDs adds the "participants" edge to the CallParticipant entity by IDs.
func (cluo *CallLogUpdateOne) AddParticipantIDs(ids ...int) *CallLogUpdateOne {
	cluo.mutation.AddParticipantIDs(ids...)
	return cluo
}

// AddParticipants adds the "participants" edges to the CallParticipant entity.
func (cluo *CallLogUpdateOne) AddParticipants(c ...*CallParticipant) *CallLogUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cluo.AddParticipantIDs(ids...)
}

// Mutation returns the CallLogMutation object of the builder.
func (cluo *CallLogUpdateOne) Mutation() *CallLogMutation {
	return cluo.mutation
}

// ClearInitiator clears the "initiator" edge to the User entity.
func (cluo *CallLogUpdateOne) ClearInitiator() *CallLogUpdateOne {
	cluo.mutation.ClearInitiator()
	return cluo
}

// ClearRoom clears the "room" edge to the Room entity.
func (cluo *CallLogUpdateOne) ClearRoom() *CallLogUpdateOne {
	cluo.mutation.ClearRoom()
	return cluo
}

// ClearParticipants clears all "participants" edges to the CallParticipant entity.
func (cluo *CallLogUpdateOne) ClearParticipants() *CallLogUpdateOne {
	cluo.mutation.ClearParticipants()
	return cluo
}

// RemoveParticipantIDs removes the "participants" edge to CallParticipant entities by IDs.
func (cluo *CallLogUpdateOne) RemoveParticipantIDs(ids ...int) *CallLogUpdateOne {
	cluo.mutation.RemoveParticipantIDs(ids...)
	return cluo
}

// RemoveParticipants removes "participants" edges to CallParticipant entities.
func (cluo *CallLogUpdateOne) RemoveParticipants(c ...*CallParticipant) *CallLogUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cluo.RemoveParticipantIDs(ids...)
}

// Where appends a list predicates to the CallLogUpdate builder.
func (cluo *CallLogUpdateOne) Where(ps ...predicate.CallLog) *CallLogUpdateOne {
	cluo.mutation.Where(ps...)
	return cluo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cluo *CallLogUpdateOne) Select(field string, fields ...string) *CallLogUpdateOne {
	cluo.fields = append([]string{field}, fields...)
	return cluo
}

// Save executes the query and returns the updated CallLog entity.
func (cluo *CallLogUpdateOne) Save(ctx context.Context) (*CallLog, error) {
	return withHooks(ctx, cluo.sqlSave, cluo.mutation, cluo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cluo *CallLogUpdateOne) SaveX(ctx context.Context) *CallLog {
	node, err := cluo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cluo *CallLogUpdateOne) Exec(ctx context.Context) error {
	_, err := cluo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cluo *CallLogUpdateOne) ExecX(ctx context.Context) {
	if err := cluo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cluo *CallLogUpdateOne) check() error {
	if v, ok := cluo.mutation.Status(); ok {
		if err := calllog.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "CallLog.status": %w`, err)}
		}
	}
	if _, ok := cluo.mutation.InitiatorID(); cluo.mutation.InitiatorCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "CallLog.initiator"`)
	}
	return nil
}

func (cluo *CallLogUpdateOne) sqlSave(ctx context.Context) (_node *CallLog, err error) {
	if err := cluo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(calllog.Table, calllog.Columns, sqlgraph.NewFieldSpec(calllog.FieldID, field.TypeInt))
	id, ok := cluo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "CallLog.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cluo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, calllog.FieldID)
		for _, f := range fields {
			if !calllog.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != calllog.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cluo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cluo.mutation.Status(); ok {
		_spec.SetField(calllog.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := cluo.mutation.StartedAt(); ok {
		_spec.SetField(calllog.FieldStartedAt, field.TypeTime, value)
	}
	if value, ok := cluo.mutation.EndedAt(); ok {
		_spec.SetField(calllog.FieldEndedAt, field.TypeTime, value)
	}
	if cluo.mutation.EndedAtCleared() {
		_spec.ClearField(calllog.FieldEndedAt, field.TypeTime)
	}
	if value, ok := cluo.mutation.CreatedAt(); ok {
		_spec.SetField(calllog.FieldCreatedAt, field.TypeTime, value)
	}
	if cluo.mutation.InitiatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   calllog.InitiatorTable,
			Columns: []string{calllog.InitiatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cluo.mutation.InitiatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   calllog.InitiatorTable,
			Columns: []string{calllog.InitiatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cluo.mutation.RoomCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   calllog.RoomTable,
			Columns: []string{calllog.RoomColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(room.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cluo.mutation.RoomIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   calllog.RoomTable,
			Columns: []string{calllog.RoomColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(room.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cluo.mutation.ParticipantsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   calllog.ParticipantsTable,
			Columns: []string{calllog.ParticipantsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(callparticipant.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cluo.mutation.RemovedParticipantsIDs(); len(nodes) > 0 && !cluo.mutation.ParticipantsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   calllog.ParticipantsTable,
			Columns: []string{calllog.ParticipantsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(callparticipant.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cluo.mutation.ParticipantsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   calllog.ParticipantsTable,
			Columns: []string{calllog.ParticipantsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(callparticipant.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &CallLog{config: cluo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cluo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{calllog.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cluo.mutation.done = true
	return _node, nil
}
