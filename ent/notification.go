// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/eleven-am/enclave/ent/message"
	"github.com/eleven-am/enclave/ent/notification"
	"github.com/eleven-am/enclave/ent/room"
	"github.com/eleven-am/enclave/ent/user"
)

// Notification is the model entity for the Notification schema.
type Notification struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Kind holds the value of the "kind" field.
	Kind string `json:"kind,omitempty"`
	// CipherText holds the value of the "cipher_text" field.
	CipherText string `json:"cipher_text,omitempty"`
	// EncryptionScheme holds the value of the "encryption_scheme" field.
	EncryptionScheme string `json:"encryption_scheme,omitempty"`
	// Read holds the value of the "read" field.
	Read bool `json:"read,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the NotificationQuery when eager-loading is set.
	Edges                  NotificationEdges `json:"edges"`
	notification_recipient *int
	notification_room      *int
	notification_message   *int
	selectValues           sql.SelectValues
}

// NotificationEdges holds the relations/edges for other nodes in the graph.
type NotificationEdges struct {
	// Recipient holds the value of the recipient edge.
	Recipient *User `json:"recipient,omitempty"`
	// Room holds the value of the room edge.
	Room *Room `json:"room,omitempty"`
	// Message holds the value of the message edge.
	Message *Message `json:"message,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// RecipientOrErr returns the Recipient value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e NotificationEdges) RecipientOrErr() (*User, error) {
	if e.Recipient != nil {
		return e.Recipient, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "recipient"}
}

// RoomOrErr returns the Room value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e NotificationEdges) RoomOrErr() (*Room, error) {
	if e.Room != nil {
		return e.Room, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: room.Label}
	}
	return nil, &NotLoadedError{edge: "room"}
}

// MessageOrErr returns the Message value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e NotificationEdges) MessageOrErr() (*Message, error) {
	if e.Message != nil {
		return e.Message, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: message.Label}
	}
	return nil, &NotLoadedError{edge: "message"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Notification) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case notification.FieldRead:
			values[i] = new(sql.NullBool)
		case notification.FieldID:
			values[i] = new(sql.NullInt64)
		case notification.FieldKind, notification.FieldCipherText, notification.FieldEncryptionScheme:
			values[i] = new(sql.NullString)
		case notification.FieldCreatedAt, notification.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case notification.ForeignKeys[0]: // notification_recipient
			values[i] = new(sql.NullInt64)
		case notification.ForeignKeys[1]: // notification_room
			values[i] = new(sql.NullInt64)
		case notification.ForeignKeys[2]: // notification_message
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Notification fields.
func (n *Notification) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case notification.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			n.ID = int(value.Int64)
		case notification.FieldKind:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field kind", values[i])
			} else if value.Valid {
				n.Kind = value.String
			}
		case notification.FieldCipherText:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field cipher_text", values[i])
			} else if value.Valid {
				n.CipherText = value.String
			}
		case notification.FieldEncryptionScheme:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field encryption_scheme", values[i])
			} else if value.Valid {
				n.EncryptionScheme = value.String
			}
		case notification.FieldRead:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field read", values[i])
			} else if value.Valid {
				n.Read = value.Bool
			}
		case notification.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				n.CreatedAt = value.Time
			}
		case notification.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				n.UpdatedAt = value.Time
			}
		case notification.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field notification_recipient", value)
			} else if value.Valid {
				n.notification_recipient = new(int)
				*n.notification_recipient = int(value.Int64)
			}
		case notification.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field notification_room", value)
			} else if value.Valid {
				n.notification_room = new(int)
				*n.notification_room = int(value.Int64)
			}
		case notification.ForeignKeys[2]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field notification_message", value)
			} else if value.Valid {
				n.notification_message = new(int)
				*n.notification_message = int(value.Int64)
			}
		default:
			n.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Notification.
// This includes values selected through modifiers, order, etc.
func (n *Notification) Value(name string) (ent.Value, error) {
	return n.selectValues.Get(name)
}

// QueryRecipient queries the "recipient" edge of the Notification entity.
func (n *Notification) QueryRecipient() *UserQuery {
	return NewNotificationClient(n.config).QueryRecipient(n)
}

// QueryRoom queries the "room" edge of the Notification entity.
func (n *Notification) QueryRoom() *RoomQuery {
	return NewNotificationClient(n.config).QueryRoom(n)
}

// QueryMessage queries the "message" edge of the Notification entity.
func (n *Notification) QueryMessage() *MessageQuery {
	return NewNotificationClient(n.config).QueryMessage(n)
}

// Update returns a builder for updating this Notification.
// Note that you need to call Notification.Unwrap() before calling this method if this Notification
// was returned from a transaction, and the transaction was committed or rolled back.
func (n *Notification) Update() *NotificationUpdateOne {
	return NewNotificationClient(n.config).UpdateOne(n)
}

// Unwrap unwraps the Notification entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (n *Notification) Unwrap() *Notification {
	_tx, ok := n.config.driver.(*txDriver)
	if !ok {
		panic("ent: Notification is not a transactional entity")
	}
	n.config.driver = _tx.drv
	return n
}

// String implements the fmt.Stringer.
func (n *Notification) String() string {
	var builder strings.Builder
	builder.WriteString("Notification(")
	builder.WriteString(fmt.Sprintf("id=%v, ", n.ID))
	builder.WriteString("kind=")
	builder.WriteString(n.Kind)
	builder.WriteString(", ")
	builder.WriteString("cipher_text=")
	builder.WriteString(n.CipherText)
	builder.WriteString(", ")
	builder.WriteString("encryption_scheme=")
	builder.WriteString(n.EncryptionScheme)
	builder.WriteString(", ")
	builder.WriteString("read=")
	builder.WriteString(fmt.Sprintf("%v", n.Read))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(n.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(n.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Notifications is a parsable slice of Notification.
type Notifications []*Notification
