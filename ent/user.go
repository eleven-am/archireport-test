// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/eleven-am/enclave/ent/user"
)

// User is the model entity for the User schema.
type User struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Username holds the value of the "username" field.
	Username string `json:"username,omitempty"`
	// DisplayName holds the value of the "display_name" field.
	DisplayName string `json:"display_name,omitempty"`
	// Email holds the value of the "email" field.
	Email string `json:"email,omitempty"`
	// AvatarURL holds the value of the "avatar_url" field.
	AvatarURL *string `json:"avatar_url,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// LastSeenAt holds the value of the "last_seen_at" field.
	LastSeenAt time.Time `json:"last_seen_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UserQuery when eager-loading is set.
	Edges        UserEdges `json:"edges"`
	selectValues sql.SelectValues
}

// UserEdges holds the relations/edges for other nodes in the graph.
type UserEdges struct {
	// Memberships holds the value of the memberships edge.
	Memberships []*RoomMembership `json:"memberships,omitempty"`
	// Messages holds the value of the messages edge.
	Messages []*Message `json:"messages,omitempty"`
	// UploadedMedia holds the value of the uploaded_media edge.
	UploadedMedia []*Media `json:"uploaded_media,omitempty"`
	// OwnedRooms holds the value of the owned_rooms edge.
	OwnedRooms []*Room `json:"owned_rooms,omitempty"`
	// Contacts holds the value of the contacts edge.
	Contacts []*Contact `json:"contacts,omitempty"`
	// ContactEntries holds the value of the contact_entries edge.
	ContactEntries []*Contact `json:"contact_entries,omitempty"`
	// Favourites holds the value of the favourites edge.
	Favourites []*Favourite `json:"favourites,omitempty"`
	// InitiatedCalls holds the value of the initiated_calls edge.
	InitiatedCalls []*CallLog `json:"initiated_calls,omitempty"`
	// CallParticipations holds the value of the call_participations edge.
	CallParticipations []*CallParticipant `json:"call_participations,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [9]bool
}

// MembershipsOrErr returns the Memberships value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) MembershipsOrErr() ([]*RoomMembership, error) {
	if e.loadedTypes[0] {
		return e.Memberships, nil
	}
	return nil, &NotLoadedError{edge: "memberships"}
}

// MessagesOrErr returns the Messages value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) MessagesOrErr() ([]*Message, error) {
	if e.loadedTypes[1] {
		return e.Messages, nil
	}
	return nil, &NotLoadedError{edge: "messages"}
}

// UploadedMediaOrErr returns the UploadedMedia value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) UploadedMediaOrErr() ([]*Media, error) {
	if e.loadedTypes[2] {
		return e.UploadedMedia, nil
	}
	return nil, &NotLoadedError{edge: "uploaded_media"}
}

// OwnedRoomsOrErr returns the OwnedRooms value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) OwnedRoomsOrErr() ([]*Room, error) {
	if e.loadedTypes[3] {
		return e.OwnedRooms, nil
	}
	return nil, &NotLoadedError{edge: "owned_rooms"}
}

// ContactsOrErr returns the Contacts value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) ContactsOrErr() ([]*Contact, error) {
	if e.loadedTypes[4] {
		return e.Contacts, nil
	}
	return nil, &NotLoadedError{edge: "contacts"}
}

// ContactEntriesOrErr returns the ContactEntries value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) ContactEntriesOrErr() ([]*Contact, error) {
	if e.loadedTypes[5] {
		return e.ContactEntries, nil
	}
	return nil, &NotLoadedError{edge: "contact_entries"}
}

// FavouritesOrErr returns the Favourites value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) FavouritesOrErr() ([]*Favourite, error) {
	if e.loadedTypes[6] {
		return e.Favourites, nil
	}
	return nil, &NotLoadedError{edge: "favourites"}
}

// InitiatedCallsOrErr returns the InitiatedCalls value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) InitiatedCallsOrErr() ([]*CallLog, error) {
	if e.loadedTypes[7] {
		return e.InitiatedCalls, nil
	}
	return nil, &NotLoadedError{edge: "initiated_calls"}
}

// CallParticipationsOrErr returns the CallParticipations value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) CallParticipationsOrErr() ([]*CallParticipant, error) {
	if e.loadedTypes[8] {
		return e.CallParticipations, nil
	}
	return nil, &NotLoadedError{edge: "call_participations"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*User) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case user.FieldID:
			values[i] = new(sql.NullInt64)
		case user.FieldUsername, user.FieldDisplayName, user.FieldEmail, user.FieldAvatarURL:
			values[i] = new(sql.NullString)
		case user.FieldCreatedAt, user.FieldUpdatedAt, user.FieldLastSeenAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the User fields.
func (u *User) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case user.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			u.ID = int(value.Int64)
		case user.FieldUsername:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field username", values[i])
			} else if value.Valid {
				u.Username = value.String
			}
		case user.FieldDisplayName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field display_name", values[i])
			} else if value.Valid {
				u.DisplayName = value.String
			}
		case user.FieldEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field email", values[i])
			} else if value.Valid {
				u.Email = value.String
			}
		case user.FieldAvatarURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field avatar_url", values[i])
			} else if value.Valid {
				u.AvatarURL = new(string)
				*u.AvatarURL = value.String
			}
		case user.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				u.CreatedAt = value.Time
			}
		case user.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				u.UpdatedAt = value.Time
			}
		case user.FieldLastSeenAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field last_seen_at", values[i])
			} else if value.Valid {
				u.LastSeenAt = value.Time
			}
		default:
			u.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the User.
// This includes values selected through modifiers, order, etc.
func (u *User) Value(name string) (ent.Value, error) {
	return u.selectValues.Get(name)
}

// QueryMemberships queries the "memberships" edge of the User entity.
func (u *User) QueryMemberships() *RoomMembershipQuery {
	return NewUserClient(u.config).QueryMemberships(u)
}

// QueryMessages queries the "messages" edge of the User entity.
func (u *User) QueryMessages() *MessageQuery {
	return NewUserClient(u.config).QueryMessages(u)
}

// QueryUploadedMedia queries the "uploaded_media" edge of the User entity.
func (u *User) QueryUploadedMedia() *MediaQuery {
	return NewUserClient(u.config).QueryUploadedMedia(u)
}

// QueryOwnedRooms queries the "owned_rooms" edge of the User entity.
func (u *User) QueryOwnedRooms() *RoomQuery {
	return NewUserClient(u.config).QueryOwnedRooms(u)
}

// QueryContacts queries the "contacts" edge of the User entity.
func (u *User) QueryContacts() *ContactQuery {
	return NewUserClient(u.config).QueryContacts(u)
}

// QueryContactEntries queries the "contact_entries" edge of the User entity.
func (u *User) QueryContactEntries() *ContactQuery {
	return NewUserClient(u.config).QueryContactEntries(u)
}

// QueryFavourites queries the "favourites" edge of the User entity.
func (u *User) QueryFavourites() *FavouriteQuery {
	return NewUserClient(u.config).QueryFavourites(u)
}

// QueryInitiatedCalls queries the "initiated_calls" edge of the User entity.
func (u *User) QueryInitiatedCalls() *CallLogQuery {
	return NewUserClient(u.config).QueryInitiatedCalls(u)
}

// QueryCallParticipations queries the "call_participations" edge of the User entity.
func (u *User) QueryCallParticipations() *CallParticipantQuery {
	return NewUserClient(u.config).QueryCallParticipations(u)
}

// Update returns a builder for updating this User.
// Note that you need to call User.Unwrap() before calling this method if this User
// was returned from a transaction, and the transaction was committed or rolled back.
func (u *User) Update() *UserUpdateOne {
	return NewUserClient(u.config).UpdateOne(u)
}

// Unwrap unwraps the User entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (u *User) Unwrap() *User {
	_tx, ok := u.config.driver.(*txDriver)
	if !ok {
		panic("ent: User is not a transactional entity")
	}
	u.config.driver = _tx.drv
	return u
}

// String implements the fmt.Stringer.
func (u *User) String() string {
	var builder strings.Builder
	builder.WriteString("User(")
	builder.WriteString(fmt.Sprintf("id=%v, ", u.ID))
	builder.WriteString("username=")
	builder.WriteString(u.Username)
	builder.WriteString(", ")
	builder.WriteString("display_name=")
	builder.WriteString(u.DisplayName)
	builder.WriteString(", ")
	builder.WriteString("email=")
	builder.WriteString(u.Email)
	builder.WriteString(", ")
	if v := u.AvatarURL; v != nil {
		builder.WriteString("avatar_url=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(u.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(u.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("last_seen_at=")
	builder.WriteString(u.LastSeenAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Users is a parsable slice of User.
type Users []*User
