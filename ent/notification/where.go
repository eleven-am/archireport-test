// Code generated by ent, DO NOT EDIT.

package notification

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/eleven-am/enclave/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Notification {
	return predicate.Notification(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Notification {
	return predicate.Notification(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Notification {
	return predicate.Notification(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Notification {
	return predicate.Notification(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Notification {
	return predicate.Notification(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Notification {
	return predicate.Notification(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Notification {
	return predicate.Notification(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Notification {
	return predicate.Notification(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Notification {
	return predicate.Notification(sql.FieldLTE(FieldID, id))
}

// Kind applies equality check predicate on the "kind" field. It's identical to KindEQ.
func Kind(v string) predicate.Notification {
	return predicate.Notification(sql.FieldEQ(FieldKind, v))
}

// CipherText applies equality check predicate on the "cipher_text" field. It's identical to CipherTextEQ.
func CipherText(v string) predicate.Notification {
	return predicate.Notification(sql.FieldEQ(FieldCipherText, v))
}

// EncryptionScheme applies equality check predicate on the "encryption_scheme" field. It's identical to EncryptionSchemeEQ.
func EncryptionScheme(v string) predicate.Notification {
	return predicate.Notification(sql.FieldEQ(FieldEncryptionScheme, v))
}

// Read applies equality check predicate on the "read" field. It's identical to ReadEQ.
func Read(v bool) predicate.Notification {
	return predicate.Notification(sql.FieldEQ(FieldRead, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldEQ(FieldUpdatedAt, v))
}

// KindEQ applies the EQ predicate on the "kind" field.
func KindEQ(v string) predicate.Notification {
	return predicate.Notification(sql.FieldEQ(FieldKind, v))
}

// KindNEQ applies the NEQ predicate on the "kind" field.
func KindNEQ(v string) predicate.Notification {
	return predicate.Notification(sql.FieldNEQ(FieldKind, v))
}

// KindIn applies the In predicate on the "kind" field.
func KindIn(vs ...string) predicate.Notification {
	return predicate.Notification(sql.FieldIn(FieldKind, vs...))
}

// KindNotIn applies the NotIn predicate on the "kind" field.
func KindNotIn(vs ...string) predicate.Notification {
	return predicate.Notification(sql.FieldNotIn(FieldKind, vs...))
}

// KindGT applies the GT predicate on the "kind" field.
func KindGT(v string) predicate.Notification {
	return predicate.Notification(sql.FieldGT(FieldKind, v))
}

// KindGTE applies the GTE predicate on the "kind" field.
func KindGTE(v string) predicate.Notification {
	return predicate.Notification(sql.FieldGTE(FieldKind, v))
}

// KindLT applies the LT predicate on the "kind" field.
func KindLT(v string) predicate.Notification {
	return predicate.Notification(sql.FieldLT(FieldKind, v))
}

// KindLTE applies the LTE predicate on the "kind" field.
func KindLTE(v string) predicate.Notification {
	return predicate.Notification(sql.FieldLTE(FieldKind, v))
}

// KindContains applies the Contains predicate on the "kind" field.
func KindContains(v string) predicate.Notification {
	return predicate.Notification(sql.FieldContains(FieldKind, v))
}

// KindHasPrefix applies the HasPrefix predicate on the "kind" field.
func KindHasPrefix(v string) predicate.Notification {
	return predicate.Notification(sql.FieldHasPrefix(FieldKind, v))
}

// KindHasSuffix applies the HasSuffix predicate on the "kind" field.
func KindHasSuffix(v string) predicate.Notification {
	return predicate.Notification(sql.FieldHasSuffix(FieldKind, v))
}

// KindEqualFold applies the EqualFold predicate on the "kind" field.
func KindEqualFold(v string) predicate.Notification {
	return predicate.Notification(sql.FieldEqualFold(FieldKind, v))
}

// KindContainsFold applies the ContainsFold predicate on the "kind" field.
func KindContainsFold(v string) predicate.Notification {
	return predicate.Notification(sql.FieldContainsFold(FieldKind, v))
}

// CipherTextEQ applies the EQ predicate on the "cipher_text" field.
func CipherTextEQ(v string) predicate.Notification {
	return predicate.Notification(sql.FieldEQ(FieldCipherText, v))
}

// CipherTextNEQ applies the NEQ predicate on the "cipher_text" field.
func CipherTextNEQ(v string) predicate.Notification {
	return predicate.Notification(sql.FieldNEQ(FieldCipherText, v))
}

// CipherTextIn applies the In predicate on the "cipher_text" field.
func CipherTextIn(vs ...string) predicate.Notification {
	return predicate.Notification(sql.FieldIn(FieldCipherText, vs...))
}

// CipherTextNotIn applies the NotIn predicate on the "cipher_text" field.
func CipherTextNotIn(vs ...string) predicate.Notification {
	return predicate.Notification(sql.FieldNotIn(FieldCipherText, vs...))
}

// CipherTextGT applies the GT predicate on the "cipher_text" field.
func CipherTextGT(v string) predicate.Notification {
	return predicate.Notification(sql.FieldGT(FieldCipherText, v))
}

// CipherTextGTE applies the GTE predicate on the "cipher_text" field.
func CipherTextGTE(v string) predicate.Notification {
	return predicate.Notification(sql.FieldGTE(FieldCipherText, v))
}

// CipherTextLT applies the LT predicate on the "cipher_text" field.
func CipherTextLT(v string) predicate.Notification {
	return predicate.Notification(sql.FieldLT(FieldCipherText, v))
}

// CipherTextLTE applies the LTE predicate on the "cipher_text" field.
func CipherTextLTE(v string) predicate.Notification {
	return predicate.Notification(sql.FieldLTE(FieldCipherText, v))
}

// CipherTextContains applies the Contains predicate on the "cipher_text" field.
func CipherTextContains(v string) predicate.Notification {
	return predicate.Notification(sql.FieldContains(FieldCipherText, v))
}

// CipherTextHasPrefix applies the HasPrefix predicate on the "cipher_text" field.
func CipherTextHasPrefix(v string) predicate.Notification {
	return predicate.Notification(sql.FieldHasPrefix(FieldCipherText, v))
}

// CipherTextHasSuffix applies the HasSuffix predicate on the "cipher_text" field.
func CipherTextHasSuffix(v string) predicate.Notification {
	return predicate.Notification(sql.FieldHasSuffix(FieldCipherText, v))
}

// CipherTextEqualFold applies the EqualFold predicate on the "cipher_text" field.
func CipherTextEqualFold(v string) predicate.Notification {
	return predicate.Notification(sql.FieldEqualFold(FieldCipherText, v))
}

// CipherTextContainsFold applies the ContainsFold predicate on the "cipher_text" field.
func CipherTextContainsFold(v string) predicate.Notification {
	return predicate.Notification(sql.FieldContainsFold(FieldCipherText, v))
}

// EncryptionSchemeEQ applies the EQ predicate on the "encryption_scheme" field.
func EncryptionSchemeEQ(v string) predicate.Notification {
	return predicate.Notification(sql.FieldEQ(FieldEncryptionScheme, v))
}

// EncryptionSchemeNEQ applies the NEQ predicate on the "encryption_scheme" field.
func EncryptionSchemeNEQ(v string) predicate.Notification {
	return predicate.Notification(sql.FieldNEQ(FieldEncryptionScheme, v))
}

// EncryptionSchemeIn applies the In predicate on the "encryption_scheme" field.
func EncryptionSchemeIn(vs ...string) predicate.Notification {
	return predicate.Notification(sql.FieldIn(FieldEncryptionScheme, vs...))
}

// EncryptionSchemeNotIn applies the NotIn predicate on the "encryption_scheme" field.
func EncryptionSchemeNotIn(vs ...string) predicate.Notification {
	return predicate.Notification(sql.FieldNotIn(FieldEncryptionScheme, vs...))
}

// EncryptionSchemeGT applies the GT predicate on the "encryption_scheme" field.
func EncryptionSchemeGT(v string) predicate.Notification {
	return predicate.Notification(sql.FieldGT(FieldEncryptionScheme, v))
}

// EncryptionSchemeGTE applies the GTE predicate on the "encryption_scheme" field.
func EncryptionSchemeGTE(v string) predicate.Notification {
	return predicate.Notification(sql.FieldGTE(FieldEncryptionScheme, v))
}

// EncryptionSchemeLT applies the LT predicate on the "encryption_scheme" field.
func EncryptionSchemeLT(v string) predicate.Notification {
	return predicate.Notification(sql.FieldLT(FieldEncryptionScheme, v))
}

// EncryptionSchemeLTE applies the LTE predicate on the "encryption_scheme" field.
func EncryptionSchemeLTE(v string) predicate.Notification {
	return predicate.Notification(sql.FieldLTE(FieldEncryptionScheme, v))
}

// EncryptionSchemeContains applies the Contains predicate on the "encryption_scheme" field.
func EncryptionSchemeContains(v string) predicate.Notification {
	return predicate.Notification(sql.FieldContains(FieldEncryptionScheme, v))
}

// EncryptionSchemeHasPrefix applies the HasPrefix predicate on the "encryption_scheme" field.
func EncryptionSchemeHasPrefix(v string) predicate.Notification {
	return predicate.Notification(sql.FieldHasPrefix(FieldEncryptionScheme, v))
}

// EncryptionSchemeHasSuffix applies the HasSuffix predicate on the "encryption_scheme" field.
func EncryptionSchemeHasSuffix(v string) predicate.Notification {
	return predicate.Notification(sql.FieldHasSuffix(FieldEncryptionScheme, v))
}

// EncryptionSchemeEqualFold applies the EqualFold predicate on the "encryption_scheme" field.
func EncryptionSchemeEqualFold(v string) predicate.Notification {
	return predicate.Notification(sql.FieldEqualFold(FieldEncryptionScheme, v))
}

// EncryptionSchemeContainsFold applies the ContainsFold predicate on the "encryption_scheme" field.
func EncryptionSchemeContainsFold(v string) predicate.Notification {
	return predicate.Notification(sql.FieldContainsFold(FieldEncryptionScheme, v))
}

// ReadEQ applies the EQ predicate on the "read" field.
func ReadEQ(v bool) predicate.Notification {
	return predicate.Notification(sql.FieldEQ(FieldRead, v))
}

// ReadNEQ applies the NEQ predicate on the "read" field.
func ReadNEQ(v bool) predicate.Notification {
	return predicate.Notification(sql.FieldNEQ(FieldRead, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasRecipient applies the HasEdge predicate on the "recipient" edge.
func HasRecipient() predicate.Notification {
	return predicate.Notification(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, RecipientTable, RecipientColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRecipientWith applies the HasEdge predicate on the "recipient" edge with a given conditions (other predicates).
func HasRecipientWith(preds ...predicate.User) predicate.Notification {
	return predicate.Notification(func(s *sql.Selector) {
		step := newRecipientStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasRoom applies the HasEdge predicate on the "room" edge.
func HasRoom() predicate.Notification {
	return predicate.Notification(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, RoomTable, RoomColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRoomWith applies the HasEdge predicate on the "room" edge with a given conditions (other predicates).
func HasRoomWith(preds ...predicate.Room) predicate.Notification {
	return predicate.Notification(func(s *sql.Selector) {
		step := newRoomStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasMessage applies the HasEdge predicate on the "message" edge.
func HasMessage() predicate.Notification {
	return predicate.Notification(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, MessageTable, MessageColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMessageWith applies the HasEdge predicate on the "message" edge with a given conditions (other predicates).
func HasMessageWith(preds ...predicate.Message) predicate.Notification {
	return predicate.Notification(func(s *sql.Selector) {
		step := newMessageStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Notification) predicate.Notification {
	return predicate.Notification(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Notification) predicate.Notification {
	return predicate.Notification(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Notification) predicate.Notification {
	return predicate.Notification(sql.NotPredicates(p))
}
