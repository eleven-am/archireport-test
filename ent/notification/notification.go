// Code generated by ent, DO NOT EDIT.

package notification

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the notification type in the database.
	Label = "notification"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldKind holds the string denoting the kind field in the database.
	FieldKind = "kind"
	// FieldCipherText holds the string denoting the cipher_text field in the database.
	FieldCipherText = "cipher_text"
	// FieldEncryptionScheme holds the string denoting the encryption_scheme field in the database.
	FieldEncryptionScheme = "encryption_scheme"
	// FieldRead holds the string denoting the read field in the database.
	FieldRead = "read"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeRecipient holds the string denoting the recipient edge name in mutations.
	EdgeRecipient = "recipient"
	// EdgeRoom holds the string denoting the room edge name in mutations.
	EdgeRoom = "room"
	// EdgeMessage holds the string denoting the message edge name in mutations.
	EdgeMessage = "message"
	// Table holds the table name of the notification in the database.
	Table = "notifications"
	// RecipientTable is the table that holds the recipient relation/edge.
	RecipientTable = "notifications"
	// RecipientInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	RecipientInverseTable = "users"
	// RecipientColumn is the table column denoting the recipient relation/edge.
	RecipientColumn = "notification_recipient"
	// RoomTable is the table that holds the room relation/edge.
	RoomTable = "notifications"
	// RoomInverseTable is the table name for the Room entity.
	// It exists in this package in order to avoid circular dependency with the "room" package.
	RoomInverseTable = "rooms"
	// RoomColumn is the table column denoting the room relation/edge.
	RoomColumn = "notification_room"
	// MessageTable is the table that holds the message relation/edge.
	MessageTable = "notifications"
	// MessageInverseTable is the table name for the Message entity.
	// It exists in this package in order to avoid circular dependency with the "message" package.
	MessageInverseTable = "messages"
	// MessageColumn is the table column denoting the message relation/edge.
	MessageColumn = "notification_message"
)

// Columns holds all SQL columns for notification fields.
var Columns = []string{
	FieldID,
	FieldKind,
	FieldCipherText,
	FieldEncryptionScheme,
	FieldRead,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "notifications"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"notification_recipient",
	"notification_room",
	"notification_message",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// KindValidator is a validator for the "kind" field. It is called by the builders before save.
	KindValidator func(string) error
	// CipherTextValidator is a validator for the "cipher_text" field. It is called by the builders before save.
	CipherTextValidator func(string) error
	// DefaultEncryptionScheme holds the default value on creation for the "encryption_scheme" field.
	DefaultEncryptionScheme string
	// DefaultRead holds the default value on creation for the "read" field.
	DefaultRead bool
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
)

// OrderOption defines the ordering options for the Notification queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByKind orders the results by the kind field.
func ByKind(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldKind, opts...).ToFunc()
}

// ByCipherText orders the results by the cipher_text field.
func ByCipherText(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCipherText, opts...).ToFunc()
}

// ByEncryptionScheme orders the results by the encryption_scheme field.
func ByEncryptionScheme(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEncryptionScheme, opts...).ToFunc()
}

// ByRead orders the results by the read field.
func ByRead(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRead, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByRecipientField orders the results by recipient field.
func ByRecipientField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRecipientStep(), sql.OrderByField(field, opts...))
	}
}

// ByRoomField orders the results by room field.
func ByRoomField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRoomStep(), sql.OrderByField(field, opts...))
	}
}

// ByMessageField orders the results by message field.
func ByMessageField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newMessageStep(), sql.OrderByField(field, opts...))
	}
}
func newRecipientStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RecipientInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, RecipientTable, RecipientColumn),
	)
}
func newRoomStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RoomInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, RoomTable, RoomColumn),
	)
}
func newMessageStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(MessageInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, MessageTable, MessageColumn),
	)
}
