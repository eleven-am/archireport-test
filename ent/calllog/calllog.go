// Code generated by ent, DO NOT EDIT.

package calllog

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the calllog type in the database.
	Label = "call_log"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldStartedAt holds the string denoting the started_at field in the database.
	FieldStartedAt = "started_at"
	// FieldEndedAt holds the string denoting the ended_at field in the database.
	FieldEndedAt = "ended_at"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// EdgeInitiator holds the string denoting the initiator edge name in mutations.
	EdgeInitiator = "initiator"
	// EdgeRoom holds the string denoting the room edge name in mutations.
	EdgeRoom = "room"
	// EdgeParticipants holds the string denoting the participants edge name in mutations.
	EdgeParticipants = "participants"
	// Table holds the table name of the calllog in the database.
	Table = "call_logs"
	// InitiatorTable is the table that holds the initiator relation/edge.
	InitiatorTable = "call_logs"
	// InitiatorInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	InitiatorInverseTable = "users"
	// InitiatorColumn is the table column denoting the initiator relation/edge.
	InitiatorColumn = "call_log_initiator"
	// RoomTable is the table that holds the room relation/edge.
	RoomTable = "call_logs"
	// RoomInverseTable is the table name for the Room entity.
	// It exists in this package in order to avoid circular dependency with the "room" package.
	RoomInverseTable = "rooms"
	// RoomColumn is the table column denoting the room relation/edge.
	RoomColumn = "call_log_room"
	// ParticipantsTable is the table that holds the participants relation/edge.
	ParticipantsTable = "call_participants"
	// ParticipantsInverseTable is the table name for the CallParticipant entity.
	// It exists in this package in order to avoid circular dependency with the "callparticipant" package.
	ParticipantsInverseTable = "call_participants"
	// ParticipantsColumn is the table column denoting the participants relation/edge.
	ParticipantsColumn = "call_participant_call"
)

// Columns holds all SQL columns for calllog fields.
var Columns = []string{
	FieldID,
	FieldStatus,
	FieldStartedAt,
	FieldEndedAt,
	FieldCreatedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "call_logs"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"call_log_initiator",
	"call_log_room",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultStartedAt holds the default value on creation for the "started_at" field.
	DefaultStartedAt func() time.Time
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
)

// Status defines the type for the "status" enum field.
type Status string

// StatusOngoing is the default value of the Status enum.
const DefaultStatus = StatusOngoing

// Status values.
const (
	StatusMissed    Status = "missed"
	StatusCompleted Status = "completed"
	StatusCancelled Status = "cancelled"
	StatusOngoing   Status = "ongoing"
)

func (s Status) String() string {
	return string(s)
}

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s Status) error {
	switch s {
	case StatusMissed, StatusCompleted, StatusCancelled, StatusOngoing:
		return nil
	default:
		return fmt.Errorf("calllog: invalid enum value for status field: %q", s)
	}
}

// OrderOption defines the ordering options for the CallLog queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByStartedAt orders the results by the started_at field.
func ByStartedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStartedAt, opts...).ToFunc()
}

// ByEndedAt orders the results by the ended_at field.
func ByEndedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEndedAt, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByInitiatorField orders the results by initiator field.
func ByInitiatorField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newInitiatorStep(), sql.OrderByField(field, opts...))
	}
}

// ByRoomField orders the results by room field.
func ByRoomField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRoomStep(), sql.OrderByField(field, opts...))
	}
}

// ByParticipantsCount orders the results by participants count.
func ByParticipantsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newParticipantsStep(), opts...)
	}
}

// ByParticipants orders the results by participants terms.
func ByParticipants(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newParticipantsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newInitiatorStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(InitiatorInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, InitiatorTable, InitiatorColumn),
	)
}
func newRoomStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RoomInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, RoomTable, RoomColumn),
	)
}
func newParticipantsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ParticipantsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, ParticipantsTable, ParticipantsColumn),
	)
}
