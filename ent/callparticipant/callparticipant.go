// Code generated by ent, DO NOT EDIT.

package callparticipant

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the callparticipant type in the database.
	Label = "call_participant"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldRole holds the string denoting the role field in the database.
	FieldRole = "role"
	// FieldJoinedAt holds the string denoting the joined_at field in the database.
	FieldJoinedAt = "joined_at"
	// FieldLeftAt holds the string denoting the left_at field in the database.
	FieldLeftAt = "left_at"
	// EdgeCall holds the string denoting the call edge name in mutations.
	EdgeCall = "call"
	// EdgeParticipant holds the string denoting the participant edge name in mutations.
	EdgeParticipant = "participant"
	// Table holds the table name of the callparticipant in the database.
	Table = "call_participants"
	// CallTable is the table that holds the call relation/edge.
	CallTable = "call_participants"
	// CallInverseTable is the table name for the CallLog entity.
	// It exists in this package in order to avoid circular dependency with the "calllog" package.
	CallInverseTable = "call_logs"
	// CallColumn is the table column denoting the call relation/edge.
	CallColumn = "call_participant_call"
	// ParticipantTable is the table that holds the participant relation/edge.
	ParticipantTable = "call_participants"
	// ParticipantInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	ParticipantInverseTable = "users"
	// ParticipantColumn is the table column denoting the participant relation/edge.
	ParticipantColumn = "call_participant_participant"
)

// Columns holds all SQL columns for callparticipant fields.
var Columns = []string{
	FieldID,
	FieldRole,
	FieldJoinedAt,
	FieldLeftAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "call_participants"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"call_participant_call",
	"call_participant_participant",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultJoinedAt holds the default value on creation for the "joined_at" field.
	DefaultJoinedAt func() time.Time
)

// Role defines the type for the "role" enum field.
type Role string

// RoleCallee is the default value of the Role enum.
const DefaultRole = RoleCallee

// Role values.
const (
	RoleCaller   Role = "caller"
	RoleCallee   Role = "callee"
	RoleObserver Role = "observer"
)

func (r Role) String() string {
	return string(r)
}

// RoleValidator is a validator for the "role" field enum values. It is called by the builders before save.
func RoleValidator(r Role) error {
	switch r {
	case RoleCaller, RoleCallee, RoleObserver:
		return nil
	default:
		return fmt.Errorf("callparticipant: invalid enum value for role field: %q", r)
	}
}

// OrderOption defines the ordering options for the CallParticipant queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByRole orders the results by the role field.
func ByRole(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRole, opts...).ToFunc()
}

// ByJoinedAt orders the results by the joined_at field.
func ByJoinedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldJoinedAt, opts...).ToFunc()
}

// ByLeftAt orders the results by the left_at field.
func ByLeftAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLeftAt, opts...).ToFunc()
}

// ByCallField orders the results by call field.
func ByCallField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCallStep(), sql.OrderByField(field, opts...))
	}
}

// ByParticipantField orders the results by participant field.
func ByParticipantField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newParticipantStep(), sql.OrderByField(field, opts...))
	}
}
func newCallStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CallInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, CallTable, CallColumn),
	)
}
func newParticipantStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ParticipantInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, ParticipantTable, ParticipantColumn),
	)
}
