// Code generated by ent, DO NOT EDIT.

package callparticipant

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/eleven-am/enclave/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.CallParticipant {
	return predicate.CallParticipant(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.CallParticipant {
	return predicate.CallParticipant(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.CallParticipant {
	return predicate.CallParticipant(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.CallParticipant {
	return predicate.CallParticipant(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.CallParticipant {
	return predicate.CallParticipant(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.CallParticipant {
	return predicate.CallParticipant(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.CallParticipant {
	return predicate.CallParticipant(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.CallParticipant {
	return predicate.CallParticipant(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.CallParticipant {
	return predicate.CallParticipant(sql.FieldLTE(FieldID, id))
}

// JoinedAt applies equality check predicate on the "joined_at" field. It's identical to JoinedAtEQ.
func JoinedAt(v time.Time) predicate.CallParticipant {
	return predicate.CallParticipant(sql.FieldEQ(FieldJoinedAt, v))
}

// LeftAt applies equality check predicate on the "left_at" field. It's identical to LeftAtEQ.
func LeftAt(v time.Time) predicate.CallParticipant {
	return predicate.CallParticipant(sql.FieldEQ(FieldLeftAt, v))
}

// RoleEQ applies the EQ predicate on the "role" field.
func RoleEQ(v Role) predicate.CallParticipant {
	return predicate.CallParticipant(sql.FieldEQ(FieldRole, v))
}

// RoleNEQ applies the NEQ predicate on the "role" field.
func RoleNEQ(v Role) predicate.CallParticipant {
	return predicate.CallParticipant(sql.FieldNEQ(FieldRole, v))
}

// RoleIn applies the In predicate on the "role" field.
func RoleIn(vs ...Role) predicate.CallParticipant {
	return predicate.CallParticipant(sql.FieldIn(FieldRole, vs...))
}

// RoleNotIn applies the NotIn predicate on the "role" field.
func RoleNotIn(vs ...Role) predicate.CallParticipant {
	return predicate.CallParticipant(sql.FieldNotIn(FieldRole, vs...))
}

// JoinedAtEQ applies the EQ predicate on the "joined_at" field.
func JoinedAtEQ(v time.Time) predicate.CallParticipant {
	return predicate.CallParticipant(sql.FieldEQ(FieldJoinedAt, v))
}

// JoinedAtNEQ applies the NEQ predicate on the "joined_at" field.
func JoinedAtNEQ(v time.Time) predicate.CallParticipant {
	return predicate.CallParticipant(sql.FieldNEQ(FieldJoinedAt, v))
}

// JoinedAtIn applies the In predicate on the "joined_at" field.
func JoinedAtIn(vs ...time.Time) predicate.CallParticipant {
	return predicate.CallParticipant(sql.FieldIn(FieldJoinedAt, vs...))
}

// JoinedAtNotIn applies the NotIn predicate on the "joined_at" field.
func JoinedAtNotIn(vs ...time.Time) predicate.CallParticipant {
	return predicate.CallParticipant(sql.FieldNotIn(FieldJoinedAt, vs...))
}

// JoinedAtGT applies the GT predicate on the "joined_at" field.
func JoinedAtGT(v time.Time) predicate.CallParticipant {
	return predicate.CallParticipant(sql.FieldGT(FieldJoinedAt, v))
}

// JoinedAtGTE applies the GTE predicate on the "joined_at" field.
func JoinedAtGTE(v time.Time) predicate.CallParticipant {
	return predicate.CallParticipant(sql.FieldGTE(FieldJoinedAt, v))
}

// JoinedAtLT applies the LT predicate on the "joined_at" field.
func JoinedAtLT(v time.Time) predicate.CallParticipant {
	return predicate.CallParticipant(sql.FieldLT(FieldJoinedAt, v))
}

// JoinedAtLTE applies the LTE predicate on the "joined_at" field.
func JoinedAtLTE(v time.Time) predicate.CallParticipant {
	return predicate.CallParticipant(sql.FieldLTE(FieldJoinedAt, v))
}

// LeftAtEQ applies the EQ predicate on the "left_at" field.
func LeftAtEQ(v time.Time) predicate.CallParticipant {
	return predicate.CallParticipant(sql.FieldEQ(FieldLeftAt, v))
}

// LeftAtNEQ applies the NEQ predicate on the "left_at" field.
func LeftAtNEQ(v time.Time) predicate.CallParticipant {
	return predicate.CallParticipant(sql.FieldNEQ(FieldLeftAt, v))
}

// LeftAtIn applies the In predicate on the "left_at" field.
func LeftAtIn(vs ...time.Time) predicate.CallParticipant {
	return predicate.CallParticipant(sql.FieldIn(FieldLeftAt, vs...))
}

// LeftAtNotIn applies the NotIn predicate on the "left_at" field.
func LeftAtNotIn(vs ...time.Time) predicate.CallParticipant {
	return predicate.CallParticipant(sql.FieldNotIn(FieldLeftAt, vs...))
}

// LeftAtGT applies the GT predicate on the "left_at" field.
func LeftAtGT(v time.Time) predicate.CallParticipant {
	return predicate.CallParticipant(sql.FieldGT(FieldLeftAt, v))
}

// LeftAtGTE applies the GTE predicate on the "left_at" field.
func LeftAtGTE(v time.Time) predicate.CallParticipant {
	return predicate.CallParticipant(sql.FieldGTE(FieldLeftAt, v))
}

// LeftAtLT applies the LT predicate on the "left_at" field.
func LeftAtLT(v time.Time) predicate.CallParticipant {
	return predicate.CallParticipant(sql.FieldLT(FieldLeftAt, v))
}

// LeftAtLTE applies the LTE predicate on the "left_at" field.
func LeftAtLTE(v time.Time) predicate.CallParticipant {
	return predicate.CallParticipant(sql.FieldLTE(FieldLeftAt, v))
}

// LeftAtIsNil applies the IsNil predicate on the "left_at" field.
func LeftAtIsNil() predicate.CallParticipant {
	return predicate.CallParticipant(sql.FieldIsNull(FieldLeftAt))
}

// LeftAtNotNil applies the NotNil predicate on the "left_at" field.
func LeftAtNotNil() predicate.CallParticipant {
	return predicate.CallParticipant(sql.FieldNotNull(FieldLeftAt))
}

// HasCall applies the HasEdge predicate on the "call" edge.
func HasCall() predicate.CallParticipant {
	return predicate.CallParticipant(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, CallTable, CallColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCallWith applies the HasEdge predicate on the "call" edge with a given conditions (other predicates).
func HasCallWith(preds ...predicate.CallLog) predicate.CallParticipant {
	return predicate.CallParticipant(func(s *sql.Selector) {
		step := newCallStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasParticipant applies the HasEdge predicate on the "participant" edge.
func HasParticipant() predicate.CallParticipant {
	return predicate.CallParticipant(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, ParticipantTable, ParticipantColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasParticipantWith applies the HasEdge predicate on the "participant" edge with a given conditions (other predicates).
func HasParticipantWith(preds ...predicate.User) predicate.CallParticipant {
	return predicate.CallParticipant(func(s *sql.Selector) {
		step := newParticipantStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.CallParticipant) predicate.CallParticipant {
	return predicate.CallParticipant(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.CallParticipant) predicate.CallParticipant {
	return predicate.CallParticipant(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.CallParticipant) predicate.CallParticipant {
	return predicate.CallParticipant(sql.NotPredicates(p))
}
