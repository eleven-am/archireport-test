// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/eleven-am/enclave/ent/message"
	"github.com/eleven-am/enclave/ent/room"
	"github.com/eleven-am/enclave/ent/user"
)

// Message is the model entity for the Message schema.
type Message struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CipherText holds the value of the "cipher_text" field.
	CipherText string `json:"cipher_text,omitempty"`
	// ContentType holds the value of the "content_type" field.
	ContentType string `json:"content_type,omitempty"`
	// EncryptionScheme holds the value of the "encryption_scheme" field.
	EncryptionScheme string `json:"encryption_scheme,omitempty"`
	// Edited holds the value of the "edited" field.
	Edited bool `json:"edited,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the MessageQuery when eager-loading is set.
	Edges          MessageEdges `json:"edges"`
	message_sender *int
	message_room   *int
	selectValues   sql.SelectValues
}

// MessageEdges holds the relations/edges for other nodes in the graph.
type MessageEdges struct {
	// Sender holds the value of the sender edge.
	Sender *User `json:"sender,omitempty"`
	// Room holds the value of the room edge.
	Room *Room `json:"room,omitempty"`
	// Media holds the value of the media edge.
	Media []*Media `json:"media,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// SenderOrErr returns the Sender value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e MessageEdges) SenderOrErr() (*User, error) {
	if e.Sender != nil {
		return e.Sender, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "sender"}
}

// RoomOrErr returns the Room value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e MessageEdges) RoomOrErr() (*Room, error) {
	if e.Room != nil {
		return e.Room, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: room.Label}
	}
	return nil, &NotLoadedError{edge: "room"}
}

// MediaOrErr returns the Media value or an error if the edge
// was not loaded in eager-loading.
func (e MessageEdges) MediaOrErr() ([]*Media, error) {
	if e.loadedTypes[2] {
		return e.Media, nil
	}
	return nil, &NotLoadedError{edge: "media"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Message) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case message.FieldEdited:
			values[i] = new(sql.NullBool)
		case message.FieldID:
			values[i] = new(sql.NullInt64)
		case message.FieldCipherText, message.FieldContentType, message.FieldEncryptionScheme:
			values[i] = new(sql.NullString)
		case message.FieldCreatedAt, message.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case message.ForeignKeys[0]: // message_sender
			values[i] = new(sql.NullInt64)
		case message.ForeignKeys[1]: // message_room
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Message fields.
func (m *Message) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case message.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			m.ID = int(value.Int64)
		case message.FieldCipherText:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field cipher_text", values[i])
			} else if value.Valid {
				m.CipherText = value.String
			}
		case message.FieldContentType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field content_type", values[i])
			} else if value.Valid {
				m.ContentType = value.String
			}
		case message.FieldEncryptionScheme:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field encryption_scheme", values[i])
			} else if value.Valid {
				m.EncryptionScheme = value.String
			}
		case message.FieldEdited:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field edited", values[i])
			} else if value.Valid {
				m.Edited = value.Bool
			}
		case message.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				m.CreatedAt = value.Time
			}
		case message.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				m.UpdatedAt = value.Time
			}
		case message.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field message_sender", value)
			} else if value.Valid {
				m.message_sender = new(int)
				*m.message_sender = int(value.Int64)
			}
		case message.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field message_room", value)
			} else if value.Valid {
				m.message_room = new(int)
				*m.message_room = int(value.Int64)
			}
		default:
			m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Message.
// This includes values selected through modifiers, order, etc.
func (m *Message) Value(name string) (ent.Value, error) {
	return m.selectValues.Get(name)
}

// QuerySender queries the "sender" edge of the Message entity.
func (m *Message) QuerySender() *UserQuery {
	return NewMessageClient(m.config).QuerySender(m)
}

// QueryRoom queries the "room" edge of the Message entity.
func (m *Message) QueryRoom() *RoomQuery {
	return NewMessageClient(m.config).QueryRoom(m)
}

// QueryMedia queries the "media" edge of the Message entity.
func (m *Message) QueryMedia() *MediaQuery {
	return NewMessageClient(m.config).QueryMedia(m)
}

// Update returns a builder for updating this Message.
// Note that you need to call Message.Unwrap() before calling this method if this Message
// was returned from a transaction, and the transaction was committed or rolled back.
func (m *Message) Update() *MessageUpdateOne {
	return NewMessageClient(m.config).UpdateOne(m)
}

// Unwrap unwraps the Message entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (m *Message) Unwrap() *Message {
	_tx, ok := m.config.driver.(*txDriver)
	if !ok {
		panic("ent: Message is not a transactional entity")
	}
	m.config.driver = _tx.drv
	return m
}

// String implements the fmt.Stringer.
func (m *Message) String() string {
	var builder strings.Builder
	builder.WriteString("Message(")
	builder.WriteString(fmt.Sprintf("id=%v, ", m.ID))
	builder.WriteString("cipher_text=")
	builder.WriteString(m.CipherText)
	builder.WriteString(", ")
	builder.WriteString("content_type=")
	builder.WriteString(m.ContentType)
	builder.WriteString(", ")
	builder.WriteString("encryption_scheme=")
	builder.WriteString(m.EncryptionScheme)
	builder.WriteString(", ")
	builder.WriteString("edited=")
	builder.WriteString(fmt.Sprintf("%v", m.Edited))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(m.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(m.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Messages is a parsable slice of Message.
type Messages []*Message
