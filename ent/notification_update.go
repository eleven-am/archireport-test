// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/eleven-am/enclave/ent/message"
	"github.com/eleven-am/enclave/ent/notification"
	"github.com/eleven-am/enclave/ent/predicate"
	"github.com/eleven-am/enclave/ent/room"
	"github.com/eleven-am/enclave/ent/user"
)

// NotificationUpdate is the builder for updating Notification entities.
type NotificationUpdate struct {
	config
	hooks    []Hook
	mutation *NotificationMutation
}

// Where appends a list predicates to the NotificationUpdate builder.
func (nu *NotificationUpdate) Where(ps ...predicate.Notification) *NotificationUpdate {
	nu.mutation.Where(ps...)
	return nu
}

// SetKind sets the "kind" field.
func (nu *NotificationUpdate) SetKind(s string) *NotificationUpdate {
	nu.mutation.SetKind(s)
	return nu
}

// SetNillableKind sets the "kind" field if the given value is not nil.
func (nu *NotificationUpdate) SetNillableKind(s *string) *NotificationUpdate {
	if s != nil {
		nu.SetKind(*s)
	}
	return nu
}

// SetCipherText sets the "cipher_text" field.
func (nu *NotificationUpdate) SetCipherText(s string) *NotificationUpdate {
	nu.mutation.SetCipherText(s)
	return nu
}

// SetNillableCipherText sets the "cipher_text" field if the given value is not nil.
func (nu *NotificationUpdate) SetNillableCipherText(s *string) *NotificationUpdate {
	if s != nil {
		nu.SetCipherText(*s)
	}
	return nu
}

// SetEncryptionScheme sets the "encryption_scheme" field.
func (nu *NotificationUpdate) SetEncryptionScheme(s string) *NotificationUpdate {
	nu.mutation.SetEncryptionScheme(s)
	return nu
}

// SetNillableEncryptionScheme sets the "encryption_scheme" field if the given value is not nil.
func (nu *NotificationUpdate) SetNillableEncryptionScheme(s *string) *NotificationUpdate {
	if s != nil {
		nu.SetEncryptionScheme(*s)
	}
	return nu
}

// SetRead sets the "read" field.
func (nu *NotificationUpdate) SetRead(b bool) *NotificationUpdate {
	nu.mutation.SetRead(b)
	return nu
}

// SetNillableRead sets the "read" field if the given value is not nil.
func (nu *NotificationUpdate) SetNillableRead(b *bool) *NotificationUpdate {
	if b != nil {
		nu.SetRead(*b)
	}
	return nu
}

// SetCreatedAt sets the "created_at" field.
func (nu *NotificationUpdate) SetCreatedAt(t time.Time) *NotificationUpdate {
	nu.mutation.SetCreatedAt(t)
	return nu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (nu *NotificationUpdate) SetNillableCreatedAt(t *time.Time) *NotificationUpdate {
	if t != nil {
		nu.SetCreatedAt(*t)
	}
	return nu
}

// SetUpdatedAt sets the "updated_at" field.
func (nu *NotificationUpdate) SetUpdatedAt(t time.Time) *NotificationUpdate {
	nu.mutation.SetUpdatedAt(t)
	return nu
}

// SetRecipientID sets the "recipient" edge to the User entity by ID.
func (nu *NotificationUpdate) SetRecipientID(id int) *NotificationUpdate {
	nu.mutation.SetRecipientID(id)
	return nu
}

// SetRecipient sets the "recipient" edge to the User entity.
func (nu *NotificationUpdate) SetRecipient(u *User) *NotificationUpdate {
	return nu.SetRecipientID(u.ID)
}

// SetRoomID sets the "room" edge to the Room entity by ID.
func (nu *NotificationUpdate) SetRoomID(id int) *NotificationUpdate {
	nu.mutation.SetRoomID(id)
	return nu
}

// SetNillableRoomID sets the "room" edge to the Room entity by ID if the given value is not nil.
func (nu *NotificationUpdate) SetNillableRoomID(id *int) *NotificationUpdate {
	if id != nil {
		nu = nu.SetRoomID(*id)
	}
	return nu
}

// SetRoom sets the "room" edge to the Room entity.
func (nu *NotificationUpdate) SetRoom(r *Room) *NotificationUpdate {
	return nu.SetRoomID(r.ID)
}

// SetMessageID sets the "message" edge to the Message entity by ID.
func (nu *NotificationUpdate) SetMessageID(id int) *NotificationUpdate {
	nu.mutation.SetMessageID(id)
	return nu
}

// SetNillableMessageID sets the "message" edge to the Message entity by ID if the given value is not nil.
func (nu *NotificationUpdate) SetNillableMessageID(id *int) *NotificationUpdate {
	if id != nil {
		nu = nu.SetMessageID(*id)
	}
	return nu
}

// SetMessage sets the "message" edge to the Message entity.
func (nu *NotificationUpdate) SetMessage(m *Message) *NotificationUpdate {
	return nu.SetMessageID(m.ID)
}

// Mutation returns the NotificationMutation object of the builder.
func (nu *NotificationUpdate) Mutation() *NotificationMutation {
	return nu.mutation
}

// ClearRecipient clears the "recipient" edge to the User entity.
func (nu *NotificationUpdate) ClearRecipient() *NotificationUpdate {
	nu.mutation.ClearRecipient()
	return nu
}

// ClearRoom clears the "room" edge to the Room entity.
func (nu *NotificationUpdate) ClearRoom() *NotificationUpdate {
	nu.mutation.ClearRoom()
	return nu
}

// ClearMessage clears the "message" edge to the Message entity.
func (nu *NotificationUpdate) ClearMessage() *NotificationUpdate {
	nu.mutation.ClearMessage()
	return nu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (nu *NotificationUpdate) Save(ctx context.Context) (int, error) {
	nu.defaults()
	return withHooks(ctx, nu.sqlSave, nu.mutation, nu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (nu *NotificationUpdate) SaveX(ctx context.Context) int {
	affected, err := nu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (nu *NotificationUpdate) Exec(ctx context.Context) error {
	_, err := nu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nu *NotificationUpdate) ExecX(ctx context.Context) {
	if err := nu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (nu *NotificationUpdate) defaults() {
	if _, ok := nu.mutation.UpdatedAt(); !ok {
		v := notification.UpdateDefaultUpdatedAt()
		nu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (nu *NotificationUpdate) check() error {
	if v, ok := nu.mutation.Kind(); ok {
		if err := notification.KindValidator(v); err != nil {
			return &ValidationError{Name: "kind", err: fmt.Errorf(`ent: validator failed for field "Notification.kind": %w`, err)}
		}
	}
	if v, ok := nu.mutation.CipherText(); ok {
		if err := notification.CipherTextValidator(v); err != nil {
			return &ValidationError{Name: "cipher_text", err: fmt.Errorf(`ent: validator failed for field "Notification.cipher_text": %w`, err)}
		}
	}
	if _, ok := nu.mutation.RecipientID(); nu.mutation.RecipientCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Notification.recipient"`)
	}
	return nil
}

func (nu *NotificationUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := nu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(notification.Table, notification.Columns, sqlgraph.NewFieldSpec(notification.FieldID, field.TypeInt))
	if ps := nu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := nu.mutation.Kind(); ok {
		_spec.SetField(notification.FieldKind, field.TypeString, value)
	}
	if value, ok := nu.mutation.CipherText(); ok {
		_spec.SetField(notification.FieldCipherText, field.TypeString, value)
	}
	if value, ok := nu.mutation.EncryptionScheme(); ok {
		_spec.SetField(notification.FieldEncryptionScheme, field.TypeString, value)
	}
	if value, ok := nu.mutation.Read(); ok {
		_spec.SetField(notification.FieldRead, field.TypeBool, value)
	}
	if value, ok := nu.mutation.CreatedAt(); ok {
		_spec.SetField(notification.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := nu.mutation.UpdatedAt(); ok {
		_spec.SetField(notification.FieldUpdatedAt, field.TypeTime, value)
	}
	if nu.mutation.RecipientCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   notification.RecipientTable,
			Columns: []string{notification.RecipientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nu.mutation.RecipientIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   notification.RecipientTable,
			Columns: []string{notification.RecipientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nu.mutation.RoomCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   notification.RoomTable,
			Columns: []string{notification.RoomColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(room.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nu.mutation.RoomIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   notification.RoomTable,
			Columns: []string{notification.RoomColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(room.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nu.mutation.MessageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   notification.MessageTable,
			Columns: []string{notification.MessageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(message.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nu.mutation.MessageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   notification.MessageTable,
			Columns: []string{notification.MessageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(message.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, nu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{notification.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	nu.mutation.done = true
	return n, nil
}

// NotificationUpdateOne is the builder for updating a single Notification entity.
type NotificationUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *NotificationMutation
}

// SetKind sets the "kind" field.
func (nuo *NotificationUpdateOne) SetKind(s string) *NotificationUpdateOne {
	nuo.mutation.SetKind(s)
	return nuo
}

// SetNillableKind sets the "kind" field if the given value is not nil.
func (nuo *NotificationUpdateOne) SetNillableKind(s *string) *NotificationUpdateOne {
	if s != nil {
		nuo.SetKind(*s)
	}
	return nuo
}

// SetCipherText sets the "cipher_text" field.
func (nuo *NotificationUpdateOne) SetCipherText(s string) *NotificationUpdateOne {
	nuo.mutation.SetCipherText(s)
	return nuo
}

// SetNillableCipherText sets the "cipher_text" field if the given value is not nil.
func (nuo *NotificationUpdateOne) SetNillableCipherText(s *string) *NotificationUpdateOne {
	if s != nil {
		nuo.SetCipherText(*s)
	}
	return nuo
}

// SetEncryptionScheme sets the "encryption_scheme" field.
func (nuo *NotificationUpdateOne) SetEncryptionScheme(s string) *NotificationUpdateOne {
	nuo.mutation.SetEncryptionScheme(s)
	return nuo
}

// SetNillableEncryptionScheme sets the "encryption_scheme" field if the given value is not nil.
func (nuo *NotificationUpdateOne) SetNillableEncryptionScheme(s *string) *NotificationUpdateOne {
	if s != nil {
		nuo.SetEncryptionScheme(*s)
	}
	return nuo
}

// SetRead sets the "read" field.
func (nuo *NotificationUpdateOne) SetRead(b bool) *NotificationUpdateOne {
	nuo.mutation.SetRead(b)
	return nuo
}

// SetNillableRead sets the "read" field if the given value is not nil.
func (nuo *NotificationUpdateOne) SetNillableRead(b *bool) *NotificationUpdateOne {
	if b != nil {
		nuo.SetRead(*b)
	}
	return nuo
}

// SetCreatedAt sets the "created_at" field.
func (nuo *NotificationUpdateOne) SetCreatedAt(t time.Time) *NotificationUpdateOne {
	nuo.mutation.SetCreatedAt(t)
	return nuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (nuo *NotificationUpdateOne) SetNillableCreatedAt(t *time.Time) *NotificationUpdateOne {
	if t != nil {
		nuo.SetCreatedAt(*t)
	}
	return nuo
}

// SetUpdatedAt sets the "updated_at" field.
func (nuo *NotificationUpdateOne) SetUpdatedAt(t time.Time) *NotificationUpdateOne {
	nuo.mutation.SetUpdatedAt(t)
	return nuo
}

// SetRecipientID sets the "recipient" edge to the User entity by ID.
func (nuo *NotificationUpdateOne) SetRecipientID(id int) *NotificationUpdateOne {
	nuo.mutation.SetRecipientID(id)
	return nuo
}

// SetRecipient sets the "recipient" edge to the User entity.
func (nuo *NotificationUpdateOne) SetRecipient(u *User) *NotificationUpdateOne {
	return nuo.SetRecipientID(u.ID)
}

// SetRoomID sets the "room" edge to the Room entity by ID.
func (nuo *NotificationUpdateOne) SetRoomID(id int) *NotificationUpdateOne {
	nuo.mutation.SetRoomID(id)
	return nuo
}

// SetNillableRoomID sets the "room" edge to the Room entity by ID if the given value is not nil.
func (nuo *NotificationUpdateOne) SetNillableRoomID(id *int) *NotificationUpdateOne {
	if id != nil {
		nuo = nuo.SetRoomID(*id)
	}
	return nuo
}

// SetRoom sets the "room" edge to the Room entity.
func (nuo *NotificationUpdateOne) SetRoom(r *Room) *NotificationUpdateOne {
	return nuo.SetRoomID(r.ID)
}

// SetMessageID sets the "message" edge to the Message entity by ID.
func (nuo *NotificationUpdateOne) SetMessageID(id int) *NotificationUpdateOne {
	nuo.mutation.SetMessageID(id)
	return nuo
}

// SetNillableMessageID sets the "message" edge to the Message entity by ID if the given value is not nil.
func (nuo *NotificationUpdateOne) SetNillableMessageID(id *int) *NotificationUpdateOne {
	if id != nil {
		nuo = nuo.SetMessageID(*id)
	}
	return nuo
}

// SetMessage sets the "message" edge to the Message entity.
func (nuo *NotificationUpdateOne) SetMessage(m *Message) *NotificationUpdateOne {
	return nuo.SetMessageID(m.ID)
}

// Mutation returns the NotificationMutation object of the builder.
func (nuo *NotificationUpdateOne) Mutation() *NotificationMutation {
	return nuo.mutation
}

// ClearRecipient clears the "recipient" edge to the User entity.
func (nuo *NotificationUpdateOne) ClearRecipient() *NotificationUpdateOne {
	nuo.mutation.ClearRecipient()
	return nuo
}

// ClearRoom clears the "room" edge to the Room entity.
func (nuo *NotificationUpdateOne) ClearRoom() *NotificationUpdateOne {
	nuo.mutation.ClearRoom()
	return nuo
}

// ClearMessage clears the "message" edge to the Message entity.
func (nuo *NotificationUpdateOne) ClearMessage() *NotificationUpdateOne {
	nuo.mutation.ClearMessage()
	return nuo
}

// Where appends a list predicates to the NotificationUpdate builder.
func (nuo *NotificationUpdateOne) Where(ps ...predicate.Notification) *NotificationUpdateOne {
	nuo.mutation.Where(ps...)
	return nuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (nuo *NotificationUpdateOne) Select(field string, fields ...string) *NotificationUpdateOne {
	nuo.fields = append([]string{field}, fields...)
	return nuo
}

// Save executes the query and returns the updated Notification entity.
func (nuo *NotificationUpdateOne) Save(ctx context.Context) (*Notification, error) {
	nuo.defaults()
	return withHooks(ctx, nuo.sqlSave, nuo.mutation, nuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (nuo *NotificationUpdateOne) SaveX(ctx context.Context) *Notification {
	node, err := nuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (nuo *NotificationUpdateOne) Exec(ctx context.Context) error {
	_, err := nuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nuo *NotificationUpdateOne) ExecX(ctx context.Context) {
	if err := nuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (nuo *NotificationUpdateOne) defaults() {
	if _, ok := nuo.mutation.UpdatedAt(); !ok {
		v := notification.UpdateDefaultUpdatedAt()
		nuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (nuo *NotificationUpdateOne) check() error {
	if v, ok := nuo.mutation.Kind(); ok {
		if err := notification.KindValidator(v); err != nil {
			return &ValidationError{Name: "kind", err: fmt.Errorf(`ent: validator failed for field "Notification.kind": %w`, err)}
		}
	}
	if v, ok := nuo.mutation.CipherText(); ok {
		if err := notification.CipherTextValidator(v); err != nil {
			return &ValidationError{Name: "cipher_text", err: fmt.Errorf(`ent: validator failed for field "Notification.cipher_text": %w`, err)}
		}
	}
	if _, ok := nuo.mutation.RecipientID(); nuo.mutation.RecipientCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Notification.recipient"`)
	}
	return nil
}

func (nuo *NotificationUpdateOne) sqlSave(ctx context.Context) (_node *Notification, err error) {
	if err := nuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(notification.Table, notification.Columns, sqlgraph.NewFieldSpec(notification.FieldID, field.TypeInt))
	id, ok := nuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Notification.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := nuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, notification.FieldID)
		for _, f := range fields {
			if !notification.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != notification.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := nuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := nuo.mutation.Kind(); ok {
		_spec.SetField(notification.FieldKind, field.TypeString, value)
	}
	if value, ok := nuo.mutation.CipherText(); ok {
		_spec.SetField(notification.FieldCipherText, field.TypeString, value)
	}
	if value, ok := nuo.mutation.EncryptionScheme(); ok {
		_spec.SetField(notification.FieldEncryptionScheme, field.TypeString, value)
	}
	if value, ok := nuo.mutation.Read(); ok {
		_spec.SetField(notification.FieldRead, field.TypeBool, value)
	}
	if value, ok := nuo.mutation.CreatedAt(); ok {
		_spec.SetField(notification.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := nuo.mutation.UpdatedAt(); ok {
		_spec.SetField(notification.FieldUpdatedAt, field.TypeTime, value)
	}
	if nuo.mutation.RecipientCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   notification.RecipientTable,
			Columns: []string{notification.RecipientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nuo.mutation.RecipientIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   notification.RecipientTable,
			Columns: []string{notification.RecipientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nuo.mutation.RoomCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   notification.RoomTable,
			Columns: []string{notification.RoomColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(room.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nuo.mutation.RoomIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   notification.RoomTable,
			Columns: []string{notification.RoomColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(room.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nuo.mutation.MessageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   notification.MessageTable,
			Columns: []string{notification.MessageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(message.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nuo.mutation.MessageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   notification.MessageTable,
			Columns: []string{notification.MessageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(message.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Notification{config: nuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, nuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{notification.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	nuo.mutation.done = true
	return _node, nil
}
