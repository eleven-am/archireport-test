// Code generated by ent, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// CallLogsColumns holds the columns for the "call_logs" table.
	CallLogsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "status", Type: field.TypeEnum, Enums: []string{"missed", "completed", "cancelled", "ongoing"}, Default: "ongoing"},
		{Name: "started_at", Type: field.TypeTime},
		{Name: "ended_at", Type: field.TypeTime, Nullable: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "call_log_initiator", Type: field.TypeInt},
		{Name: "call_log_room", Type: field.TypeInt, Nullable: true},
	}
	// CallLogsTable holds the schema information for the "call_logs" table.
	CallLogsTable = &schema.Table{
		Name:       "call_logs",
		Columns:    CallLogsColumns,
		PrimaryKey: []*schema.Column{CallLogsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "call_logs_users_initiator",
				Columns:    []*schema.Column{CallLogsColumns[5]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "call_logs_rooms_room",
				Columns:    []*schema.Column{CallLogsColumns[6]},
				RefColumns: []*schema.Column{RoomsColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// CallParticipantsColumns holds the columns for the "call_participants" table.
	CallParticipantsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "role", Type: field.TypeEnum, Enums: []string{"caller", "callee", "observer"}, Default: "callee"},
		{Name: "joined_at", Type: field.TypeTime},
		{Name: "left_at", Type: field.TypeTime, Nullable: true},
		{Name: "call_participant_call", Type: field.TypeInt},
		{Name: "call_participant_participant", Type: field.TypeInt},
	}
	// CallParticipantsTable holds the schema information for the "call_participants" table.
	CallParticipantsTable = &schema.Table{
		Name:       "call_participants",
		Columns:    CallParticipantsColumns,
		PrimaryKey: []*schema.Column{CallParticipantsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "call_participants_call_logs_call",
				Columns:    []*schema.Column{CallParticipantsColumns[4]},
				RefColumns: []*schema.Column{CallLogsColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "call_participants_users_participant",
				Columns:    []*schema.Column{CallParticipantsColumns[5]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// ContactsColumns holds the columns for the "contacts" table.
	ContactsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "is_favourite", Type: field.TypeBool, Default: false},
		{Name: "is_blocked", Type: field.TypeBool, Default: false},
		{Name: "alias", Type: field.TypeString, Default: ""},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "contact_owner", Type: field.TypeInt},
		{Name: "contact_contact", Type: field.TypeInt},
	}
	// ContactsTable holds the schema information for the "contacts" table.
	ContactsTable = &schema.Table{
		Name:       "contacts",
		Columns:    ContactsColumns,
		PrimaryKey: []*schema.Column{ContactsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "contacts_users_owner",
				Columns:    []*schema.Column{ContactsColumns[6]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "contacts_users_contact",
				Columns:    []*schema.Column{ContactsColumns[7]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "contact_contact_owner_contact_contact",
				Unique:  true,
				Columns: []*schema.Column{ContactsColumns[6], ContactsColumns[7]},
			},
		},
	}
	// FavouritesColumns holds the columns for the "favourites" table.
	FavouritesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "favourite_user", Type: field.TypeInt},
		{Name: "favourite_room", Type: field.TypeInt},
	}
	// FavouritesTable holds the schema information for the "favourites" table.
	FavouritesTable = &schema.Table{
		Name:       "favourites",
		Columns:    FavouritesColumns,
		PrimaryKey: []*schema.Column{FavouritesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "favourites_users_user",
				Columns:    []*schema.Column{FavouritesColumns[2]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "favourites_rooms_room",
				Columns:    []*schema.Column{FavouritesColumns[3]},
				RefColumns: []*schema.Column{RoomsColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "favourite_favourite_user_favourite_room",
				Unique:  true,
				Columns: []*schema.Column{FavouritesColumns[2], FavouritesColumns[3]},
			},
		},
	}
	// MediaColumns holds the columns for the "media" table.
	MediaColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "filename", Type: field.TypeString},
		{Name: "content_type", Type: field.TypeString},
		{Name: "storage_path", Type: field.TypeString},
		{Name: "checksum", Type: field.TypeString},
		{Name: "size_bytes", Type: field.TypeInt64},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "media_uploader", Type: field.TypeInt},
		{Name: "media_message", Type: field.TypeInt, Nullable: true},
	}
	// MediaTable holds the schema information for the "media" table.
	MediaTable = &schema.Table{
		Name:       "media",
		Columns:    MediaColumns,
		PrimaryKey: []*schema.Column{MediaColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "media_users_uploader",
				Columns:    []*schema.Column{MediaColumns[7]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "media_messages_message",
				Columns:    []*schema.Column{MediaColumns[8]},
				RefColumns: []*schema.Column{MessagesColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// MessagesColumns holds the columns for the "messages" table.
	MessagesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "cipher_text", Type: field.TypeString},
		{Name: "content_type", Type: field.TypeString, Default: "text/plain"},
		{Name: "encryption_scheme", Type: field.TypeString, Default: "signal"},
		{Name: "edited", Type: field.TypeBool, Default: false},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "message_sender", Type: field.TypeInt},
		{Name: "message_room", Type: field.TypeInt},
	}
	// MessagesTable holds the schema information for the "messages" table.
	MessagesTable = &schema.Table{
		Name:       "messages",
		Columns:    MessagesColumns,
		PrimaryKey: []*schema.Column{MessagesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "messages_users_sender",
				Columns:    []*schema.Column{MessagesColumns[7]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "messages_rooms_room",
				Columns:    []*schema.Column{MessagesColumns[8]},
				RefColumns: []*schema.Column{RoomsColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// NotificationsColumns holds the columns for the "notifications" table.
	NotificationsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "kind", Type: field.TypeString},
		{Name: "cipher_text", Type: field.TypeString},
		{Name: "encryption_scheme", Type: field.TypeString, Default: "signal"},
		{Name: "read", Type: field.TypeBool, Default: false},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "notification_recipient", Type: field.TypeInt},
		{Name: "notification_room", Type: field.TypeInt, Nullable: true},
		{Name: "notification_message", Type: field.TypeInt, Nullable: true},
	}
	// NotificationsTable holds the schema information for the "notifications" table.
	NotificationsTable = &schema.Table{
		Name:       "notifications",
		Columns:    NotificationsColumns,
		PrimaryKey: []*schema.Column{NotificationsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "notifications_users_recipient",
				Columns:    []*schema.Column{NotificationsColumns[7]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "notifications_rooms_room",
				Columns:    []*schema.Column{NotificationsColumns[8]},
				RefColumns: []*schema.Column{RoomsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "notifications_messages_message",
				Columns:    []*schema.Column{NotificationsColumns[9]},
				RefColumns: []*schema.Column{MessagesColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// RoomsColumns holds the columns for the "rooms" table.
	RoomsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "name", Type: field.TypeString},
		{Name: "description", Type: field.TypeString, Default: ""},
		{Name: "is_private", Type: field.TypeBool, Default: false},
		{Name: "is_direct", Type: field.TypeBool, Default: false},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "room_owner", Type: field.TypeInt},
	}
	// RoomsTable holds the schema information for the "rooms" table.
	RoomsTable = &schema.Table{
		Name:       "rooms",
		Columns:    RoomsColumns,
		PrimaryKey: []*schema.Column{RoomsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "rooms_users_owner",
				Columns:    []*schema.Column{RoomsColumns[7]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// RoomMembershipsColumns holds the columns for the "room_memberships" table.
	RoomMembershipsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "role", Type: field.TypeEnum, Enums: []string{"owner", "admin", "member"}, Default: "member"},
		{Name: "can_post", Type: field.TypeBool, Default: true},
		{Name: "can_call", Type: field.TypeBool, Default: true},
		{Name: "joined_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "room_membership_user", Type: field.TypeInt},
		{Name: "room_membership_room", Type: field.TypeInt},
	}
	// RoomMembershipsTable holds the schema information for the "room_memberships" table.
	RoomMembershipsTable = &schema.Table{
		Name:       "room_memberships",
		Columns:    RoomMembershipsColumns,
		PrimaryKey: []*schema.Column{RoomMembershipsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "room_memberships_users_user",
				Columns:    []*schema.Column{RoomMembershipsColumns[6]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "room_memberships_rooms_room",
				Columns:    []*schema.Column{RoomMembershipsColumns[7]},
				RefColumns: []*schema.Column{RoomsColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "roommembership_room_membership_user_room_membership_room",
				Unique:  true,
				Columns: []*schema.Column{RoomMembershipsColumns[6], RoomMembershipsColumns[7]},
			},
		},
	}
	// UsersColumns holds the columns for the "users" table.
	UsersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "username", Type: field.TypeString, Unique: true},
		{Name: "display_name", Type: field.TypeString},
		{Name: "email", Type: field.TypeString, Unique: true},
		{Name: "avatar_url", Type: field.TypeString, Nullable: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "last_seen_at", Type: field.TypeTime},
	}
	// UsersTable holds the schema information for the "users" table.
	UsersTable = &schema.Table{
		Name:       "users",
		Columns:    UsersColumns,
		PrimaryKey: []*schema.Column{UsersColumns[0]},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		CallLogsTable,
		CallParticipantsTable,
		ContactsTable,
		FavouritesTable,
		MediaTable,
		MessagesTable,
		NotificationsTable,
		RoomsTable,
		RoomMembershipsTable,
		UsersTable,
	}
)

func init() {
	CallLogsTable.ForeignKeys[0].RefTable = UsersTable
	CallLogsTable.ForeignKeys[1].RefTable = RoomsTable
	CallParticipantsTable.ForeignKeys[0].RefTable = CallLogsTable
	CallParticipantsTable.ForeignKeys[1].RefTable = UsersTable
	ContactsTable.ForeignKeys[0].RefTable = UsersTable
	ContactsTable.ForeignKeys[1].RefTable = UsersTable
	FavouritesTable.ForeignKeys[0].RefTable = UsersTable
	FavouritesTable.ForeignKeys[1].RefTable = RoomsTable
	MediaTable.ForeignKeys[0].RefTable = UsersTable
	MediaTable.ForeignKeys[1].RefTable = MessagesTable
	MessagesTable.ForeignKeys[0].RefTable = UsersTable
	MessagesTable.ForeignKeys[1].RefTable = RoomsTable
	NotificationsTable.ForeignKeys[0].RefTable = UsersTable
	NotificationsTable.ForeignKeys[1].RefTable = RoomsTable
	NotificationsTable.ForeignKeys[2].RefTable = MessagesTable
	RoomsTable.ForeignKeys[0].RefTable = UsersTable
	RoomMembershipsTable.ForeignKeys[0].RefTable = UsersTable
	RoomMembershipsTable.ForeignKeys[1].RefTable = RoomsTable
}
