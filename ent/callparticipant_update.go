// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/eleven-am/enclave/ent/calllog"
	"github.com/eleven-am/enclave/ent/callparticipant"
	"github.com/eleven-am/enclave/ent/predicate"
	"github.com/eleven-am/enclave/ent/user"
)

// CallParticipantUpdate is the builder for updating CallParticipant entities.
type CallParticipantUpdate struct {
	config
	hooks    []Hook
	mutation *CallParticipantMutation
}

// Where appends a list predicates to the CallParticipantUpdate builder.
func (cpu *CallParticipantUpdate) Where(ps ...predicate.CallParticipant) *CallParticipantUpdate {
	cpu.mutation.Where(ps...)
	return cpu
}

// SetRole sets the "role" field.
func (cpu *CallParticipantUpdate) SetRole(c callparticipant.Role) *CallParticipantUpdate {
	cpu.mutation.SetRole(c)
	return cpu
}

// SetNillableRole sets the "role" field if the given value is not nil.
func (cpu *CallParticipantUpdate) SetNillableRole(c *callparticipant.Role) *CallParticipantUpdate {
	if c != nil {
		cpu.SetRole(*c)
	}
	return cpu
}

// SetJoinedAt sets the "joined_at" field.
func (cpu *CallParticipantUpdate) SetJoinedAt(t time.Time) *CallParticipantUpdate {
	cpu.mutation.SetJoinedAt(t)
	return cpu
}

// SetNillableJoinedAt sets the "joined_at" field if the given value is not nil.
func (cpu *CallParticipantUpdate) SetNillableJoinedAt(t *time.Time) *CallParticipantUpdate {
	if t != nil {
		cpu.SetJoinedAt(*t)
	}
	return cpu
}

// SetLeftAt sets the "left_at" field.
func (cpu *CallParticipantUpdate) SetLeftAt(t time.Time) *CallParticipantUpdate {
	cpu.mutation.SetLeftAt(t)
	return cpu
}

// SetNillableLeftAt sets the "left_at" field if the given value is not nil.
func (cpu *CallParticipantUpdate) SetNillableLeftAt(t *time.Time) *CallParticipantUpdate {
	if t != nil {
		cpu.SetLeftAt(*t)
	}
	return cpu
}

// ClearLeftAt clears the value of the "left_at" field.
func (cpu *CallParticipantUpdate) ClearLeftAt() *CallParticipantUpdate {
	cpu.mutation.ClearLeftAt()
	return cpu
}

// SetCallID sets the "call" edge to the CallLog entity by ID.
func (cpu *CallParticipantUpdate) SetCallID(id int) *CallParticipantUpdate {
	cpu.mutation.SetCallID(id)
	return cpu
}

// SetCall sets the "call" edge to the CallLog entity.
func (cpu *CallParticipantUpdate) SetCall(c *CallLog) *CallParticipantUpdate {
	return cpu.SetCallID(c.ID)
}

// SetParticipantID sets the "participant" edge to the User entity by ID.
func (cpu *CallParticipantUpdate) SetParticipantID(id int) *CallParticipantUpdate {
	cpu.mutation.SetParticipantID(id)
	return cpu
}

// SetParticipant sets the "participant" edge to the User entity.
func (cpu *CallParticipantUpdate) SetParticipant(u *User) *CallParticipantUpdate {
	return cpu.SetParticipantID(u.ID)
}

// Mutation returns the CallParticipantMutation object of the builder.
func (cpu *CallParticipantUpdate) Mutation() *CallParticipantMutation {
	return cpu.mutation
}

// ClearCall clears the "call" edge to the CallLog entity.
func (cpu *CallParticipantUpdate) ClearCall() *CallParticipantUpdate {
	cpu.mutation.ClearCall()
	return cpu
}

// ClearParticipant clears the "participant" edge to the User entity.
func (cpu *CallParticipantUpdate) ClearParticipant() *CallParticipantUpdate {
	cpu.mutation.ClearParticipant()
	return cpu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cpu *CallParticipantUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, cpu.sqlSave, cpu.mutation, cpu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cpu *CallParticipantUpdate) SaveX(ctx context.Context) int {
	affected, err := cpu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cpu *CallParticipantUpdate) Exec(ctx context.Context) error {
	_, err := cpu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cpu *CallParticipantUpdate) ExecX(ctx context.Context) {
	if err := cpu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cpu *CallParticipantUpdate) check() error {
	if v, ok := cpu.mutation.Role(); ok {
		if err := callparticipant.RoleValidator(v); err != nil {
			return &ValidationError{Name: "role", err: fmt.Errorf(`ent: validator failed for field "CallParticipant.role": %w`, err)}
		}
	}
	if _, ok := cpu.mutation.CallID(); cpu.mutation.CallCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "CallParticipant.call"`)
	}
	if _, ok := cpu.mutation.ParticipantID(); cpu.mutation.ParticipantCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "CallParticipant.participant"`)
	}
	return nil
}

func (cpu *CallParticipantUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := cpu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(callparticipant.Table, callparticipant.Columns, sqlgraph.NewFieldSpec(callparticipant.FieldID, field.TypeInt))
	if ps := cpu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cpu.mutation.Role(); ok {
		_spec.SetField(callparticipant.FieldRole, field.TypeEnum, value)
	}
	if value, ok := cpu.mutation.JoinedAt(); ok {
		_spec.SetField(callparticipant.FieldJoinedAt, field.TypeTime, value)
	}
	if value, ok := cpu.mutation.LeftAt(); ok {
		_spec.SetField(callparticipant.FieldLeftAt, field.TypeTime, value)
	}
	if cpu.mutation.LeftAtCleared() {
		_spec.ClearField(callparticipant.FieldLeftAt, field.TypeTime)
	}
	if cpu.mutation.CallCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   callparticipant.CallTable,
			Columns: []string{callparticipant.CallColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(calllog.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cpu.mutation.CallIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   callparticipant.CallTable,
			Columns: []string{callparticipant.CallColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(calllog.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cpu.mutation.ParticipantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   callparticipant.ParticipantTable,
			Columns: []string{callparticipant.ParticipantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cpu.mutation.ParticipantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   callparticipant.ParticipantTable,
			Columns: []string{callparticipant.ParticipantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cpu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{callparticipant.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cpu.mutation.done = true
	return n, nil
}

// CallParticipantUpdateOne is the builder for updating a single CallParticipant entity.
type CallParticipantUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CallParticipantMutation
}

// SetRole sets the "role" field.
func (cpuo *CallParticipantUpdateOne) SetRole(c callparticipant.Role) *CallParticipantUpdateOne {
	cpuo.mutation.SetRole(c)
	return cpuo
}

// SetNillableRole sets the "role" field if the given value is not nil.
func (cpuo *CallParticipantUpdateOne) SetNillableRole(c *callparticipant.Role) *CallParticipantUpdateOne {
	if c != nil {
		cpuo.SetRole(*c)
	}
	return cpuo
}

// SetJoinedAt sets the "joined_at" field.
func (cpuo *CallParticipantUpdateOne) SetJoinedAt(t time.Time) *CallParticipantUpdateOne {
	cpuo.mutation.SetJoinedAt(t)
	return cpuo
}

// SetNillableJoinedAt sets the "joined_at" field if the given value is not nil.
func (cpuo *CallParticipantUpdateOne) SetNillableJoinedAt(t *time.Time) *CallParticipantUpdateOne {
	if t != nil {
		cpuo.SetJoinedAt(*t)
	}
	return cpuo
}

// SetLeftAt sets the "left_at" field.
func (cpuo *CallParticipantUpdateOne) SetLeftAt(t time.Time) *CallParticipantUpdateOne {
	cpuo.mutation.SetLeftAt(t)
	return cpuo
}

// SetNillableLeftAt sets the "left_at" field if the given value is not nil.
func (cpuo *CallParticipantUpdateOne) SetNillableLeftAt(t *time.Time) *CallParticipantUpdateOne {
	if t != nil {
		cpuo.SetLeftAt(*t)
	}
	return cpuo
}

// ClearLeftAt clears the value of the "left_at" field.
func (cpuo *CallParticipantUpdateOne) ClearLeftAt() *CallParticipantUpdateOne {
	cpuo.mutation.ClearLeftAt()
	return cpuo
}

// SetCallID sets the "call" edge to the CallLog entity by ID.
func (cpuo *CallParticipantUpdateOne) SetCallID(id int) *CallParticipantUpdateOne {
	cpuo.mutation.SetCallID(id)
	return cpuo
}

// SetCall sets the "call" edge to the CallLog entity.
func (cpuo *CallParticipantUpdateOne) SetCall(c *CallLog) *CallParticipantUpdateOne {
	return cpuo.SetCallID(c.ID)
}

// SetParticipantID sets the "participant" edge to the User entity by ID.
func (cpuo *CallParticipantUpdateOne) SetParticipantID(id int) *CallParticipantUpdateOne {
	cpuo.mutation.SetParticipantID(id)
	return cpuo
}

// SetParticipant sets the "participant" edge to the User entity.
func (cpuo *CallParticipantUpdateOne) SetParticipant(u *User) *CallParticipantUpdateOne {
	return cpuo.SetParticipantID(u.ID)
}

// Mutation returns the CallParticipantMutation object of the builder.
func (cpuo *CallParticipantUpdateOne) Mutation() *CallParticipantMutation {
	return cpuo.mutation
}

// ClearCall clears the "call" edge to the CallLog entity.
func (cpuo *CallParticipantUpdateOne) ClearCall() *CallParticipantUpdateOne {
	cpuo.mutation.ClearCall()
	return cpuo
}

// ClearParticipant clears the "participant" edge to the User entity.
func (cpuo *CallParticipantUpdateOne) ClearParticipant() *CallParticipantUpdateOne {
	cpuo.mutation.ClearParticipant()
	return cpuo
}

// Where appends a list predicates to the CallParticipantUpdate builder.
func (cpuo *CallParticipantUpdateOne) Where(ps ...predicate.CallParticipant) *CallParticipantUpdateOne {
	cpuo.mutation.Where(ps...)
	return cpuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cpuo *CallParticipantUpdateOne) Select(field string, fields ...string) *CallParticipantUpdateOne {
	cpuo.fields = append([]string{field}, fields...)
	return cpuo
}

// Save executes the query and returns the updated CallParticipant entity.
func (cpuo *CallParticipantUpdateOne) Save(ctx context.Context) (*CallParticipant, error) {
	return withHooks(ctx, cpuo.sqlSave, cpuo.mutation, cpuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cpuo *CallParticipantUpdateOne) SaveX(ctx context.Context) *CallParticipant {
	node, err := cpuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cpuo *CallParticipantUpdateOne) Exec(ctx context.Context) error {
	_, err := cpuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cpuo *CallParticipantUpdateOne) ExecX(ctx context.Context) {
	if err := cpuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cpuo *CallParticipantUpdateOne) check() error {
	if v, ok := cpuo.mutation.Role(); ok {
		if err := callparticipant.RoleValidator(v); err != nil {
			return &ValidationError{Name: "role", err: fmt.Errorf(`ent: validator failed for field "CallParticipant.role": %w`, err)}
		}
	}
	if _, ok := cpuo.mutation.CallID(); cpuo.mutation.CallCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "CallParticipant.call"`)
	}
	if _, ok := cpuo.mutation.ParticipantID(); cpuo.mutation.ParticipantCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "CallParticipant.participant"`)
	}
	return nil
}

func (cpuo *CallParticipantUpdateOne) sqlSave(ctx context.Context) (_node *CallParticipant, err error) {
	if err := cpuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(callparticipant.Table, callparticipant.Columns, sqlgraph.NewFieldSpec(callparticipant.FieldID, field.TypeInt))
	id, ok := cpuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "CallParticipant.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cpuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, callparticipant.FieldID)
		for _, f := range fields {
			if !callparticipant.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != callparticipant.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cpuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cpuo.mutation.Role(); ok {
		_spec.SetField(callparticipant.FieldRole, field.TypeEnum, value)
	}
	if value, ok := cpuo.mutation.JoinedAt(); ok {
		_spec.SetField(callparticipant.FieldJoinedAt, field.TypeTime, value)
	}
	if value, ok := cpuo.mutation.LeftAt(); ok {
		_spec.SetField(callparticipant.FieldLeftAt, field.TypeTime, value)
	}
	if cpuo.mutation.LeftAtCleared() {
		_spec.ClearField(callparticipant.FieldLeftAt, field.TypeTime)
	}
	if cpuo.mutation.CallCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   callparticipant.CallTable,
			Columns: []string{callparticipant.CallColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(calllog.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cpuo.mutation.CallIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   callparticipant.CallTable,
			Columns: []string{callparticipant.CallColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(calllog.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cpuo.mutation.ParticipantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   callparticipant.ParticipantTable,
			Columns: []string{callparticipant.ParticipantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cpuo.mutation.ParticipantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   callparticipant.ParticipantTable,
			Columns: []string{callparticipant.ParticipantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &CallParticipant{config: cpuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cpuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{callparticipant.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cpuo.mutation.done = true
	return _node, nil
}
