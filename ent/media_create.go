// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/eleven-am/enclave/ent/media"
	"github.com/eleven-am/enclave/ent/message"
	"github.com/eleven-am/enclave/ent/user"
)

// MediaCreate is the builder for creating a Media entity.
type MediaCreate struct {
	config
	mutation *MediaMutation
	hooks    []Hook
}

// SetFilename sets the "filename" field.
func (mc *MediaCreate) SetFilename(s string) *MediaCreate {
	mc.mutation.SetFilename(s)
	return mc
}

// SetContentType sets the "content_type" field.
func (mc *MediaCreate) SetContentType(s string) *MediaCreate {
	mc.mutation.SetContentType(s)
	return mc
}

// SetStoragePath sets the "storage_path" field.
func (mc *MediaCreate) SetStoragePath(s string) *MediaCreate {
	mc.mutation.SetStoragePath(s)
	return mc
}

// SetChecksum sets the "checksum" field.
func (mc *MediaCreate) SetChecksum(s string) *MediaCreate {
	mc.mutation.SetChecksum(s)
	return mc
}

// SetSizeBytes sets the "size_bytes" field.
func (mc *MediaCreate) SetSizeBytes(i int64) *MediaCreate {
	mc.mutation.SetSizeBytes(i)
	return mc
}

// SetCreatedAt sets the "created_at" field.
func (mc *MediaCreate) SetCreatedAt(t time.Time) *MediaCreate {
	mc.mutation.SetCreatedAt(t)
	return mc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (mc *MediaCreate) SetNillableCreatedAt(t *time.Time) *MediaCreate {
	if t != nil {
		mc.SetCreatedAt(*t)
	}
	return mc
}

// SetUploaderID sets the "uploader" edge to the User entity by ID.
func (mc *MediaCreate) SetUploaderID(id int) *MediaCreate {
	mc.mutation.SetUploaderID(id)
	return mc
}

// SetUploader sets the "uploader" edge to the User entity.
func (mc *MediaCreate) SetUploader(u *User) *MediaCreate {
	return mc.SetUploaderID(u.ID)
}

// SetMessageID sets the "message" edge to the Message entity by ID.
func (mc *MediaCreate) SetMessageID(id int) *MediaCreate {
	mc.mutation.SetMessageID(id)
	return mc
}

// SetNillableMessageID sets the "message" edge to the Message entity by ID if the given value is not nil.
func (mc *MediaCreate) SetNillableMessageID(id *int) *MediaCreate {
	if id != nil {
		mc = mc.SetMessageID(*id)
	}
	return mc
}

// SetMessage sets the "message" edge to the Message entity.
func (mc *MediaCreate) SetMessage(m *Message) *MediaCreate {
	return mc.SetMessageID(m.ID)
}

// Mutation returns the MediaMutation object of the builder.
func (mc *MediaCreate) Mutation() *MediaMutation {
	return mc.mutation
}

// Save creates the Media in the database.
func (mc *MediaCreate) Save(ctx context.Context) (*Media, error) {
	mc.defaults()
	return withHooks(ctx, mc.sqlSave, mc.mutation, mc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (mc *MediaCreate) SaveX(ctx context.Context) *Media {
	v, err := mc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mc *MediaCreate) Exec(ctx context.Context) error {
	_, err := mc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mc *MediaCreate) ExecX(ctx context.Context) {
	if err := mc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mc *MediaCreate) defaults() {
	if _, ok := mc.mutation.CreatedAt(); !ok {
		v := media.DefaultCreatedAt()
		mc.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mc *MediaCreate) check() error {
	if _, ok := mc.mutation.Filename(); !ok {
		return &ValidationError{Name: "filename", err: errors.New(`ent: missing required field "Media.filename"`)}
	}
	if v, ok := mc.mutation.Filename(); ok {
		if err := media.FilenameValidator(v); err != nil {
			return &ValidationError{Name: "filename", err: fmt.Errorf(`ent: validator failed for field "Media.filename": %w`, err)}
		}
	}
	if _, ok := mc.mutation.ContentType(); !ok {
		return &ValidationError{Name: "content_type", err: errors.New(`ent: missing required field "Media.content_type"`)}
	}
	if v, ok := mc.mutation.ContentType(); ok {
		if err := media.ContentTypeValidator(v); err != nil {
			return &ValidationError{Name: "content_type", err: fmt.Errorf(`ent: validator failed for field "Media.content_type": %w`, err)}
		}
	}
	if _, ok := mc.mutation.StoragePath(); !ok {
		return &ValidationError{Name: "storage_path", err: errors.New(`ent: missing required field "Media.storage_path"`)}
	}
	if v, ok := mc.mutation.StoragePath(); ok {
		if err := media.StoragePathValidator(v); err != nil {
			return &ValidationError{Name: "storage_path", err: fmt.Errorf(`ent: validator failed for field "Media.storage_path": %w`, err)}
		}
	}
	if _, ok := mc.mutation.Checksum(); !ok {
		return &ValidationError{Name: "checksum", err: errors.New(`ent: missing required field "Media.checksum"`)}
	}
	if v, ok := mc.mutation.Checksum(); ok {
		if err := media.ChecksumValidator(v); err != nil {
			return &ValidationError{Name: "checksum", err: fmt.Errorf(`ent: validator failed for field "Media.checksum": %w`, err)}
		}
	}
	if _, ok := mc.mutation.SizeBytes(); !ok {
		return &ValidationError{Name: "size_bytes", err: errors.New(`ent: missing required field "Media.size_bytes"`)}
	}
	if v, ok := mc.mutation.SizeBytes(); ok {
		if err := media.SizeBytesValidator(v); err != nil {
			return &ValidationError{Name: "size_bytes", err: fmt.Errorf(`ent: validator failed for field "Media.size_bytes": %w`, err)}
		}
	}
	if _, ok := mc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Media.created_at"`)}
	}
	if _, ok := mc.mutation.UploaderID(); !ok {
		return &ValidationError{Name: "uploader", err: errors.New(`ent: missing required edge "Media.uploader"`)}
	}
	return nil
}

func (mc *MediaCreate) sqlSave(ctx context.Context) (*Media, error) {
	if err := mc.check(); err != nil {
		return nil, err
	}
	_node, _spec := mc.createSpec()
	if err := sqlgraph.CreateNode(ctx, mc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	mc.mutation.id = &_node.ID
	mc.mutation.done = true
	return _node, nil
}

func (mc *MediaCreate) createSpec() (*Media, *sqlgraph.CreateSpec) {
	var (
		_node = &Media{config: mc.config}
		_spec = sqlgraph.NewCreateSpec(media.Table, sqlgraph.NewFieldSpec(media.FieldID, field.TypeInt))
	)
	if value, ok := mc.mutation.Filename(); ok {
		_spec.SetField(media.FieldFilename, field.TypeString, value)
		_node.Filename = value
	}
	if value, ok := mc.mutation.ContentType(); ok {
		_spec.SetField(media.FieldContentType, field.TypeString, value)
		_node.ContentType = value
	}
	if value, ok := mc.mutation.StoragePath(); ok {
		_spec.SetField(media.FieldStoragePath, field.TypeString, value)
		_node.StoragePath = value
	}
	if value, ok := mc.mutation.Checksum(); ok {
		_spec.SetField(media.FieldChecksum, field.TypeString, value)
		_node.Checksum = value
	}
	if value, ok := mc.mutation.SizeBytes(); ok {
		_spec.SetField(media.FieldSizeBytes, field.TypeInt64, value)
		_node.SizeBytes = value
	}
	if value, ok := mc.mutation.CreatedAt(); ok {
		_spec.SetField(media.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if nodes := mc.mutation.UploaderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   media.UploaderTable,
			Columns: []string{media.UploaderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.media_uploader = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := mc.mutation.MessageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   media.MessageTable,
			Columns: []string{media.MessageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(message.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.media_message = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// MediaCreateBulk is the builder for creating many Media entities in bulk.
type MediaCreateBulk struct {
	config
	err      error
	builders []*MediaCreate
}

// Save creates the Media entities in the database.
func (mcb *MediaCreateBulk) Save(ctx context.Context) ([]*Media, error) {
	if mcb.err != nil {
		return nil, mcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(mcb.builders))
	nodes := make([]*Media, len(mcb.builders))
	mutators := make([]Mutator, len(mcb.builders))
	for i := range mcb.builders {
		func(i int, root context.Context) {
			builder := mcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*MediaMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, mcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, mcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, mcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (mcb *MediaCreateBulk) SaveX(ctx context.Context) []*Media {
	v, err := mcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mcb *MediaCreateBulk) Exec(ctx context.Context) error {
	_, err := mcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mcb *MediaCreateBulk) ExecX(ctx context.Context) {
	if err := mcb.Exec(ctx); err != nil {
		panic(err)
	}
}
