// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/eleven-am/enclave/ent/calllog"
	"github.com/eleven-am/enclave/ent/favourite"
	"github.com/eleven-am/enclave/ent/message"
	"github.com/eleven-am/enclave/ent/predicate"
	"github.com/eleven-am/enclave/ent/room"
	"github.com/eleven-am/enclave/ent/roommembership"
	"github.com/eleven-am/enclave/ent/user"
)

// RoomUpdate is the builder for updating Room entities.
type RoomUpdate struct {
	config
	hooks    []Hook
	mutation *RoomMutation
}

// Where appends a list predicates to the RoomUpdate builder.
func (ru *RoomUpdate) Where(ps ...predicate.Room) *RoomUpdate {
	ru.mutation.Where(ps...)
	return ru
}

// SetName sets the "name" field.
func (ru *RoomUpdate) SetName(s string) *RoomUpdate {
	ru.mutation.SetName(s)
	return ru
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ru *RoomUpdate) SetNillableName(s *string) *RoomUpdate {
	if s != nil {
		ru.SetName(*s)
	}
	return ru
}

// SetDescription sets the "description" field.
func (ru *RoomUpdate) SetDescription(s string) *RoomUpdate {
	ru.mutation.SetDescription(s)
	return ru
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (ru *RoomUpdate) SetNillableDescription(s *string) *RoomUpdate {
	if s != nil {
		ru.SetDescription(*s)
	}
	return ru
}

// SetIsPrivate sets the "is_private" field.
func (ru *RoomUpdate) SetIsPrivate(b bool) *RoomUpdate {
	ru.mutation.SetIsPrivate(b)
	return ru
}

// SetNillableIsPrivate sets the "is_private" field if the given value is not nil.
func (ru *RoomUpdate) SetNillableIsPrivate(b *bool) *RoomUpdate {
	if b != nil {
		ru.SetIsPrivate(*b)
	}
	return ru
}

// SetIsDirect sets the "is_direct" field.
func (ru *RoomUpdate) SetIsDirect(b bool) *RoomUpdate {
	ru.mutation.SetIsDirect(b)
	return ru
}

// SetNillableIsDirect sets the "is_direct" field if the given value is not nil.
func (ru *RoomUpdate) SetNillableIsDirect(b *bool) *RoomUpdate {
	if b != nil {
		ru.SetIsDirect(*b)
	}
	return ru
}

// SetCreatedAt sets the "created_at" field.
func (ru *RoomUpdate) SetCreatedAt(t time.Time) *RoomUpdate {
	ru.mutation.SetCreatedAt(t)
	return ru
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ru *RoomUpdate) SetNillableCreatedAt(t *time.Time) *RoomUpdate {
	if t != nil {
		ru.SetCreatedAt(*t)
	}
	return ru
}

// SetUpdatedAt sets the "updated_at" field.
func (ru *RoomUpdate) SetUpdatedAt(t time.Time) *RoomUpdate {
	ru.mutation.SetUpdatedAt(t)
	return ru
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (ru *RoomUpdate) SetOwnerID(id int) *RoomUpdate {
	ru.mutation.SetOwnerID(id)
	return ru
}

// SetOwner sets the "owner" edge to the User entity.
func (ru *RoomUpdate) SetOwner(u *User) *RoomUpdate {
	return ru.SetOwnerID(u.ID)
}

// AddMembershipIDs adds the "memberships" edge to the RoomMembership entity by IDs.
func (ru *RoomUpdate) AddMembershipIDs(ids ...int) *RoomUpdate {
	ru.mutation.AddMembershipIDs(ids...)
	return ru
}

// AddMemberships adds the "memberships" edges to the RoomMembership entity.
func (ru *RoomUpdate) AddMemberships(r ...*RoomMembership) *RoomUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ru.AddMembershipIDs(ids...)
}

// AddMessageIDs adds the "messages" edge to the Message entity by IDs.
func (ru *RoomUpdate) AddMessageIDs(ids ...int) *RoomUpdate {
	ru.mutation.AddMessageIDs(ids...)
	return ru
}

// AddMessages adds the "messages" edges to the Message entity.
func (ru *RoomUpdate) AddMessages(m ...*Message) *RoomUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return ru.AddMessageIDs(ids...)
}

// AddFavouriteIDs adds the "favourites" edge to the Favourite entity by IDs.
func (ru *RoomUpdate) AddFavouriteIDs(ids ...int) *RoomUpdate {
	ru.mutation.AddFavouriteIDs(ids...)
	return ru
}

// AddFavourites adds the "favourites" edges to the Favourite entity.
func (ru *RoomUpdate) AddFavourites(f ...*Favourite) *RoomUpdate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return ru.AddFavouriteIDs(ids...)
}

// AddCallLogIDs adds the "call_logs" edge to the CallLog entity by IDs.
func (ru *RoomUpdate) AddCallLogIDs(ids ...int) *RoomUpdate {
	ru.mutation.AddCallLogIDs(ids...)
	return ru
}

// AddCallLogs adds the "call_logs" edges to the CallLog entity.
func (ru *RoomUpdate) AddCallLogs(c ...*CallLog) *RoomUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return ru.AddCallLogIDs(ids...)
}

// Mutation returns the RoomMutation object of the builder.
func (ru *RoomUpdate) Mutation() *RoomMutation {
	return ru.mutation
}

// ClearOwner clears the "owner" edge to the User entity.
func (ru *RoomUpdate) ClearOwner() *RoomUpdate {
	ru.mutation.ClearOwner()
	return ru
}

// ClearMemberships clears all "memberships" edges to the RoomMembership entity.
func (ru *RoomUpdate) ClearMemberships() *RoomUpdate {
	ru.mutation.ClearMemberships()
	return ru
}

// RemoveMembershipIDs removes the "memberships" edge to RoomMembership entities by IDs.
func (ru *RoomUpdate) RemoveMembershipIDs(ids ...int) *RoomUpdate {
	ru.mutation.RemoveMembershipIDs(ids...)
	return ru
}

// RemoveMemberships removes "memberships" edges to RoomMembership entities.
func (ru *RoomUpdate) RemoveMemberships(r ...*RoomMembership) *RoomUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ru.RemoveMembershipIDs(ids...)
}

// ClearMessages clears all "messages" edges to the Message entity.
func (ru *RoomUpdate) ClearMessages() *RoomUpdate {
	ru.mutation.ClearMessages()
	return ru
}

// RemoveMessageIDs removes the "messages" edge to Message entities by IDs.
func (ru *RoomUpdate) RemoveMessageIDs(ids ...int) *RoomUpdate {
	ru.mutation.RemoveMessageIDs(ids...)
	return ru
}

// RemoveMessages removes "messages" edges to Message entities.
func (ru *RoomUpdate) RemoveMessages(m ...*Message) *RoomUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return ru.RemoveMessageIDs(ids...)
}

// ClearFavourites clears all "favourites" edges to the Favourite entity.
func (ru *RoomUpdate) ClearFavourites() *RoomUpdate {
	ru.mutation.ClearFavourites()
	return ru
}

// RemoveFavouriteIDs removes the "favourites" edge to Favourite entities by IDs.
func (ru *RoomUpdate) RemoveFavouriteIDs(ids ...int) *RoomUpdate {
	ru.mutation.RemoveFavouriteIDs(ids...)
	return ru
}

// RemoveFavourites removes "favourites" edges to Favourite entities.
func (ru *RoomUpdate) RemoveFavourites(f ...*Favourite) *RoomUpdate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return ru.RemoveFavouriteIDs(ids...)
}

// ClearCallLogs clears all "call_logs" edges to the CallLog entity.
func (ru *RoomUpdate) ClearCallLogs() *RoomUpdate {
	ru.mutation.ClearCallLogs()
	return ru
}

// RemoveCallLogIDs removes the "call_logs" edge to CallLog entities by IDs.
func (ru *RoomUpdate) RemoveCallLogIDs(ids ...int) *RoomUpdate {
	ru.mutation.RemoveCallLogIDs(ids...)
	return ru
}

// RemoveCallLogs removes "call_logs" edges to CallLog entities.
func (ru *RoomUpdate) RemoveCallLogs(c ...*CallLog) *RoomUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return ru.RemoveCallLogIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ru *RoomUpdate) Save(ctx context.Context) (int, error) {
	ru.defaults()
	return withHooks(ctx, ru.sqlSave, ru.mutation, ru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ru *RoomUpdate) SaveX(ctx context.Context) int {
	affected, err := ru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ru *RoomUpdate) Exec(ctx context.Context) error {
	_, err := ru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ru *RoomUpdate) ExecX(ctx context.Context) {
	if err := ru.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ru *RoomUpdate) defaults() {
	if _, ok := ru.mutation.UpdatedAt(); !ok {
		v := room.UpdateDefaultUpdatedAt()
		ru.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ru *RoomUpdate) check() error {
	if v, ok := ru.mutation.Name(); ok {
		if err := room.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Room.name": %w`, err)}
		}
	}
	if _, ok := ru.mutation.OwnerID(); ru.mutation.OwnerCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Room.owner"`)
	}
	return nil
}

func (ru *RoomUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ru.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(room.Table, room.Columns, sqlgraph.NewFieldSpec(room.FieldID, field.TypeInt))
	if ps := ru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ru.mutation.Name(); ok {
		_spec.SetField(room.FieldName, field.TypeString, value)
	}
	if value, ok := ru.mutation.Description(); ok {
		_spec.SetField(room.FieldDescription, field.TypeString, value)
	}
	if value, ok := ru.mutation.IsPrivate(); ok {
		_spec.SetField(room.FieldIsPrivate, field.TypeBool, value)
	}
	if value, ok := ru.mutation.IsDirect(); ok {
		_spec.SetField(room.FieldIsDirect, field.TypeBool, value)
	}
	if value, ok := ru.mutation.CreatedAt(); ok {
		_spec.SetField(room.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := ru.mutation.UpdatedAt(); ok {
		_spec.SetField(room.FieldUpdatedAt, field.TypeTime, value)
	}
	if ru.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   room.OwnerTable,
			Columns: []string{room.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   room.OwnerTable,
			Columns: []string{room.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.MembershipsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   room.MembershipsTable,
			Columns: []string{room.MembershipsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(roommembership.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.RemovedMembershipsIDs(); len(nodes) > 0 && !ru.mutation.MembershipsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   room.MembershipsTable,
			Columns: []string{room.MembershipsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(roommembership.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.MembershipsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   room.MembershipsTable,
			Columns: []string{room.MembershipsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(roommembership.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.MessagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   room.MessagesTable,
			Columns: []string{room.MessagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(message.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.RemovedMessagesIDs(); len(nodes) > 0 && !ru.mutation.MessagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   room.MessagesTable,
			Columns: []string{room.MessagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(message.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.MessagesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   room.MessagesTable,
			Columns: []string{room.MessagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(message.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.FavouritesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   room.FavouritesTable,
			Columns: []string{room.FavouritesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(favourite.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.RemovedFavouritesIDs(); len(nodes) > 0 && !ru.mutation.FavouritesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   room.FavouritesTable,
			Columns: []string{room.FavouritesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(favourite.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.FavouritesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   room.FavouritesTable,
			Columns: []string{room.FavouritesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(favourite.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.CallLogsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   room.CallLogsTable,
			Columns: []string{room.CallLogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(calllog.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.RemovedCallLogsIDs(); len(nodes) > 0 && !ru.mutation.CallLogsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   room.CallLogsTable,
			Columns: []string{room.CallLogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(calllog.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.CallLogsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   room.CallLogsTable,
			Columns: []string{room.CallLogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(calllog.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{room.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ru.mutation.done = true
	return n, nil
}

// RoomUpdateOne is the builder for updating a single Room entity.
type RoomUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *RoomMutation
}

// SetName sets the "name" field.
func (ruo *RoomUpdateOne) SetName(s string) *RoomUpdateOne {
	ruo.mutation.SetName(s)
	return ruo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ruo *RoomUpdateOne) SetNillableName(s *string) *RoomUpdateOne {
	if s != nil {
		ruo.SetName(*s)
	}
	return ruo
}

// SetDescription sets the "description" field.
func (ruo *RoomUpdateOne) SetDescription(s string) *RoomUpdateOne {
	ruo.mutation.SetDescription(s)
	return ruo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (ruo *RoomUpdateOne) SetNillableDescription(s *string) *RoomUpdateOne {
	if s != nil {
		ruo.SetDescription(*s)
	}
	return ruo
}

// SetIsPrivate sets the "is_private" field.
func (ruo *RoomUpdateOne) SetIsPrivate(b bool) *RoomUpdateOne {
	ruo.mutation.SetIsPrivate(b)
	return ruo
}

// SetNillableIsPrivate sets the "is_private" field if the given value is not nil.
func (ruo *RoomUpdateOne) SetNillableIsPrivate(b *bool) *RoomUpdateOne {
	if b != nil {
		ruo.SetIsPrivate(*b)
	}
	return ruo
}

// SetIsDirect sets the "is_direct" field.
func (ruo *RoomUpdateOne) SetIsDirect(b bool) *RoomUpdateOne {
	ruo.mutation.SetIsDirect(b)
	return ruo
}

// SetNillableIsDirect sets the "is_direct" field if the given value is not nil.
func (ruo *RoomUpdateOne) SetNillableIsDirect(b *bool) *RoomUpdateOne {
	if b != nil {
		ruo.SetIsDirect(*b)
	}
	return ruo
}

// SetCreatedAt sets the "created_at" field.
func (ruo *RoomUpdateOne) SetCreatedAt(t time.Time) *RoomUpdateOne {
	ruo.mutation.SetCreatedAt(t)
	return ruo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ruo *RoomUpdateOne) SetNillableCreatedAt(t *time.Time) *RoomUpdateOne {
	if t != nil {
		ruo.SetCreatedAt(*t)
	}
	return ruo
}

// SetUpdatedAt sets the "updated_at" field.
func (ruo *RoomUpdateOne) SetUpdatedAt(t time.Time) *RoomUpdateOne {
	ruo.mutation.SetUpdatedAt(t)
	return ruo
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (ruo *RoomUpdateOne) SetOwnerID(id int) *RoomUpdateOne {
	ruo.mutation.SetOwnerID(id)
	return ruo
}

// SetOwner sets the "owner" edge to the User entity.
func (ruo *RoomUpdateOne) SetOwner(u *User) *RoomUpdateOne {
	return ruo.SetOwnerID(u.ID)
}

// AddMembershipIDs adds the "memberships" edge to the RoomMembership entity by IDs.
func (ruo *RoomUpdateOne) AddMembershipIDs(ids ...int) *RoomUpdateOne {
	ruo.mutation.AddMembershipIDs(ids...)
	return ruo
}

// AddMemberships adds the "memberships" edges to the RoomMembership entity.
func (ruo *RoomUpdateOne) AddMemberships(r ...*RoomMembership) *RoomUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ruo.AddMembershipIDs(ids...)
}

// AddMessageIDs adds the "messages" edge to the Message entity by IDs.
func (ruo *RoomUpdateOne) AddMessageIDs(ids ...int) *RoomUpdateOne {
	ruo.mutation.AddMessageIDs(ids...)
	return ruo
}

// AddMessages adds the "messages" edges to the Message entity.
func (ruo *RoomUpdateOne) AddMessages(m ...*Message) *RoomUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return ruo.AddMessageIDs(ids...)
}

// AddFavouriteIDs adds the "favourites" edge to the Favourite entity by IDs.
func (ruo *RoomUpdateOne) AddFavouriteIDs(ids ...int) *RoomUpdateOne {
	ruo.mutation.AddFavouriteIDs(ids...)
	return ruo
}

// AddFavourites adds the "favourites" edges to the Favourite entity.
func (ruo *RoomUpdateOne) AddFavourites(f ...*Favourite) *RoomUpdateOne {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return ruo.AddFavouriteIDs(ids...)
}

// AddCallLogIDs adds the "call_logs" edge to the CallLog entity by IDs.
func (ruo *RoomUpdateOne) AddCallLogIDs(ids ...int) *RoomUpdateOne {
	ruo.mutation.AddCallLogIDs(ids...)
	return ruo
}

// AddCallLogs adds the "call_logs" edges to the CallLog entity.
func (ruo *RoomUpdateOne) AddCallLogs(c ...*CallLog) *RoomUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return ruo.AddCallLogIDs(ids...)
}

// Mutation returns the RoomMutation object of the builder.
func (ruo *RoomUpdateOne) Mutation() *RoomMutation {
	return ruo.mutation
}

// ClearOwner clears the "owner" edge to the User entity.
func (ruo *RoomUpdateOne) ClearOwner() *RoomUpdateOne {
	ruo.mutation.ClearOwner()
	return ruo
}

// ClearMemberships clears all "memberships" edges to the RoomMembership entity.
func (ruo *RoomUpdateOne) ClearMemberships() *RoomUpdateOne {
	ruo.mutation.ClearMemberships()
	return ruo
}

// RemoveMembershipIDs removes the "memberships" edge to RoomMembership entities by IDs.
func (ruo *RoomUpdateOne) RemoveMembershipIDs(ids ...int) *RoomUpdateOne {
	ruo.mutation.RemoveMembershipIDs(ids...)
	return ruo
}

// RemoveMemberships removes "memberships" edges to RoomMembership entities.
func (ruo *RoomUpdateOne) RemoveMemberships(r ...*RoomMembership) *RoomUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ruo.RemoveMembershipIDs(ids...)
}

// ClearMessages clears all "messages" edges to the Message entity.
func (ruo *RoomUpdateOne) ClearMessages() *RoomUpdateOne {
	ruo.mutation.ClearMessages()
	return ruo
}

// RemoveMessageIDs removes the "messages" edge to Message entities by IDs.
func (ruo *RoomUpdateOne) RemoveMessageIDs(ids ...int) *RoomUpdateOne {
	ruo.mutation.RemoveMessageIDs(ids...)
	return ruo
}

// RemoveMessages removes "messages" edges to Message entities.
func (ruo *RoomUpdateOne) RemoveMessages(m ...*Message) *RoomUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return ruo.RemoveMessageIDs(ids...)
}

// ClearFavourites clears all "favourites" edges to the Favourite entity.
func (ruo *RoomUpdateOne) ClearFavourites() *RoomUpdateOne {
	ruo.mutation.ClearFavourites()
	return ruo
}

// RemoveFavouriteIDs removes the "favourites" edge to Favourite entities by IDs.
func (ruo *RoomUpdateOne) RemoveFavouriteIDs(ids ...int) *RoomUpdateOne {
	ruo.mutation.RemoveFavouriteIDs(ids...)
	return ruo
}

// RemoveFavourites removes "favourites" edges to Favourite entities.
func (ruo *RoomUpdateOne) RemoveFavourites(f ...*Favourite) *RoomUpdateOne {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return ruo.RemoveFavouriteIDs(ids...)
}

// ClearCallLogs clears all "call_logs" edges to the CallLog entity.
func (ruo *RoomUpdateOne) ClearCallLogs() *RoomUpdateOne {
	ruo.mutation.ClearCallLogs()
	return ruo
}

// RemoveCallLogIDs removes the "call_logs" edge to CallLog entities by IDs.
func (ruo *RoomUpdateOne) RemoveCallLogIDs(ids ...int) *RoomUpdateOne {
	ruo.mutation.RemoveCallLogIDs(ids...)
	return ruo
}

// RemoveCallLogs removes "call_logs" edges to CallLog entities.
func (ruo *RoomUpdateOne) RemoveCallLogs(c ...*CallLog) *RoomUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return ruo.RemoveCallLogIDs(ids...)
}

// Where appends a list predicates to the RoomUpdate builder.
func (ruo *RoomUpdateOne) Where(ps ...predicate.Room) *RoomUpdateOne {
	ruo.mutation.Where(ps...)
	return ruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ruo *RoomUpdateOne) Select(field string, fields ...string) *RoomUpdateOne {
	ruo.fields = append([]string{field}, fields...)
	return ruo
}

// Save executes the query and returns the updated Room entity.
func (ruo *RoomUpdateOne) Save(ctx context.Context) (*Room, error) {
	ruo.defaults()
	return withHooks(ctx, ruo.sqlSave, ruo.mutation, ruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ruo *RoomUpdateOne) SaveX(ctx context.Context) *Room {
	node, err := ruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ruo *RoomUpdateOne) Exec(ctx context.Context) error {
	_, err := ruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ruo *RoomUpdateOne) ExecX(ctx context.Context) {
	if err := ruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ruo *RoomUpdateOne) defaults() {
	if _, ok := ruo.mutation.UpdatedAt(); !ok {
		v := room.UpdateDefaultUpdatedAt()
		ruo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ruo *RoomUpdateOne) check() error {
	if v, ok := ruo.mutation.Name(); ok {
		if err := room.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Room.name": %w`, err)}
		}
	}
	if _, ok := ruo.mutation.OwnerID(); ruo.mutation.OwnerCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Room.owner"`)
	}
	return nil
}

func (ruo *RoomUpdateOne) sqlSave(ctx context.Context) (_node *Room, err error) {
	if err := ruo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(room.Table, room.Columns, sqlgraph.NewFieldSpec(room.FieldID, field.TypeInt))
	id, ok := ruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Room.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, room.FieldID)
		for _, f := range fields {
			if !room.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != room.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ruo.mutation.Name(); ok {
		_spec.SetField(room.FieldName, field.TypeString, value)
	}
	if value, ok := ruo.mutation.Description(); ok {
		_spec.SetField(room.FieldDescription, field.TypeString, value)
	}
	if value, ok := ruo.mutation.IsPrivate(); ok {
		_spec.SetField(room.FieldIsPrivate, field.TypeBool, value)
	}
	if value, ok := ruo.mutation.IsDirect(); ok {
		_spec.SetField(room.FieldIsDirect, field.TypeBool, value)
	}
	if value, ok := ruo.mutation.CreatedAt(); ok {
		_spec.SetField(room.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := ruo.mutation.UpdatedAt(); ok {
		_spec.SetField(room.FieldUpdatedAt, field.TypeTime, value)
	}
	if ruo.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   room.OwnerTable,
			Columns: []string{room.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   room.OwnerTable,
			Columns: []string{room.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.MembershipsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   room.MembershipsTable,
			Columns: []string{room.MembershipsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(roommembership.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.RemovedMembershipsIDs(); len(nodes) > 0 && !ruo.mutation.MembershipsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   room.MembershipsTable,
			Columns: []string{room.MembershipsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(roommembership.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.MembershipsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   room.MembershipsTable,
			Columns: []string{room.MembershipsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(roommembership.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.MessagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   room.MessagesTable,
			Columns: []string{room.MessagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(message.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.RemovedMessagesIDs(); len(nodes) > 0 && !ruo.mutation.MessagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   room.MessagesTable,
			Columns: []string{room.MessagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(message.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.MessagesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   room.MessagesTable,
			Columns: []string{room.MessagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(message.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.FavouritesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   room.FavouritesTable,
			Columns: []string{room.FavouritesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(favourite.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.RemovedFavouritesIDs(); len(nodes) > 0 && !ruo.mutation.FavouritesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   room.FavouritesTable,
			Columns: []string{room.FavouritesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(favourite.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.FavouritesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   room.FavouritesTable,
			Columns: []string{room.FavouritesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(favourite.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.CallLogsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   room.CallLogsTable,
			Columns: []string{room.CallLogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(calllog.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.RemovedCallLogsIDs(); len(nodes) > 0 && !ruo.mutation.CallLogsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   room.CallLogsTable,
			Columns: []string{room.CallLogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(calllog.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.CallLogsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   room.CallLogsTable,
			Columns: []string{room.CallLogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(calllog.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Room{config: ruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{room.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ruo.mutation.done = true
	return _node, nil
}
