// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/eleven-am/enclave/ent/favourite"
	"github.com/eleven-am/enclave/ent/room"
	"github.com/eleven-am/enclave/ent/user"
)

// Favourite is the model entity for the Favourite schema.
type Favourite struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the FavouriteQuery when eager-loading is set.
	Edges          FavouriteEdges `json:"edges"`
	favourite_user *int
	favourite_room *int
	selectValues   sql.SelectValues
}

// FavouriteEdges holds the relations/edges for other nodes in the graph.
type FavouriteEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// Room holds the value of the room edge.
	Room *Room `json:"room,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e FavouriteEdges) UserOrErr() (*User, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "user"}
}

// RoomOrErr returns the Room value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e FavouriteEdges) RoomOrErr() (*Room, error) {
	if e.Room != nil {
		return e.Room, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: room.Label}
	}
	return nil, &NotLoadedError{edge: "room"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Favourite) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case favourite.FieldID:
			values[i] = new(sql.NullInt64)
		case favourite.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case favourite.ForeignKeys[0]: // favourite_user
			values[i] = new(sql.NullInt64)
		case favourite.ForeignKeys[1]: // favourite_room
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Favourite fields.
func (f *Favourite) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case favourite.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			f.ID = int(value.Int64)
		case favourite.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				f.CreatedAt = value.Time
			}
		case favourite.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field favourite_user", value)
			} else if value.Valid {
				f.favourite_user = new(int)
				*f.favourite_user = int(value.Int64)
			}
		case favourite.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field favourite_room", value)
			} else if value.Valid {
				f.favourite_room = new(int)
				*f.favourite_room = int(value.Int64)
			}
		default:
			f.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Favourite.
// This includes values selected through modifiers, order, etc.
func (f *Favourite) Value(name string) (ent.Value, error) {
	return f.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the Favourite entity.
func (f *Favourite) QueryUser() *UserQuery {
	return NewFavouriteClient(f.config).QueryUser(f)
}

// QueryRoom queries the "room" edge of the Favourite entity.
func (f *Favourite) QueryRoom() *RoomQuery {
	return NewFavouriteClient(f.config).QueryRoom(f)
}

// Update returns a builder for updating this Favourite.
// Note that you need to call Favourite.Unwrap() before calling this method if this Favourite
// was returned from a transaction, and the transaction was committed or rolled back.
func (f *Favourite) Update() *FavouriteUpdateOne {
	return NewFavouriteClient(f.config).UpdateOne(f)
}

// Unwrap unwraps the Favourite entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (f *Favourite) Unwrap() *Favourite {
	_tx, ok := f.config.driver.(*txDriver)
	if !ok {
		panic("ent: Favourite is not a transactional entity")
	}
	f.config.driver = _tx.drv
	return f
}

// String implements the fmt.Stringer.
func (f *Favourite) String() string {
	var builder strings.Builder
	builder.WriteString("Favourite(")
	builder.WriteString(fmt.Sprintf("id=%v, ", f.ID))
	builder.WriteString("created_at=")
	builder.WriteString(f.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Favourites is a parsable slice of Favourite.
type Favourites []*Favourite
