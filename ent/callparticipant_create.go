// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/eleven-am/enclave/ent/calllog"
	"github.com/eleven-am/enclave/ent/callparticipant"
	"github.com/eleven-am/enclave/ent/user"
)

// CallParticipantCreate is the builder for creating a CallParticipant entity.
type CallParticipantCreate struct {
	config
	mutation *CallParticipantMutation
	hooks    []Hook
}

// SetRole sets the "role" field.
func (cpc *CallParticipantCreate) SetRole(c callparticipant.Role) *CallParticipantCreate {
	cpc.mutation.SetRole(c)
	return cpc
}

// SetNillableRole sets the "role" field if the given value is not nil.
func (cpc *CallParticipantCreate) SetNillableRole(c *callparticipant.Role) *CallParticipantCreate {
	if c != nil {
		cpc.SetRole(*c)
	}
	return cpc
}

// SetJoinedAt sets the "joined_at" field.
func (cpc *CallParticipantCreate) SetJoinedAt(t time.Time) *CallParticipantCreate {
	cpc.mutation.SetJoinedAt(t)
	return cpc
}

// SetNillableJoinedAt sets the "joined_at" field if the given value is not nil.
func (cpc *CallParticipantCreate) SetNillableJoinedAt(t *time.Time) *CallParticipantCreate {
	if t != nil {
		cpc.SetJoinedAt(*t)
	}
	return cpc
}

// SetLeftAt sets the "left_at" field.
func (cpc *CallParticipantCreate) SetLeftAt(t time.Time) *CallParticipantCreate {
	cpc.mutation.SetLeftAt(t)
	return cpc
}

// SetNillableLeftAt sets the "left_at" field if the given value is not nil.
func (cpc *CallParticipantCreate) SetNillableLeftAt(t *time.Time) *CallParticipantCreate {
	if t != nil {
		cpc.SetLeftAt(*t)
	}
	return cpc
}

// SetCallID sets the "call" edge to the CallLog entity by ID.
func (cpc *CallParticipantCreate) SetCallID(id int) *CallParticipantCreate {
	cpc.mutation.SetCallID(id)
	return cpc
}

// SetCall sets the "call" edge to the CallLog entity.
func (cpc *CallParticipantCreate) SetCall(c *CallLog) *CallParticipantCreate {
	return cpc.SetCallID(c.ID)
}

// SetParticipantID sets the "participant" edge to the User entity by ID.
func (cpc *CallParticipantCreate) SetParticipantID(id int) *CallParticipantCreate {
	cpc.mutation.SetParticipantID(id)
	return cpc
}

// SetParticipant sets the "participant" edge to the User entity.
func (cpc *CallParticipantCreate) SetParticipant(u *User) *CallParticipantCreate {
	return cpc.SetParticipantID(u.ID)
}

// Mutation returns the CallParticipantMutation object of the builder.
func (cpc *CallParticipantCreate) Mutation() *CallParticipantMutation {
	return cpc.mutation
}

// Save creates the CallParticipant in the database.
func (cpc *CallParticipantCreate) Save(ctx context.Context) (*CallParticipant, error) {
	cpc.defaults()
	return withHooks(ctx, cpc.sqlSave, cpc.mutation, cpc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cpc *CallParticipantCreate) SaveX(ctx context.Context) *CallParticipant {
	v, err := cpc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cpc *CallParticipantCreate) Exec(ctx context.Context) error {
	_, err := cpc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cpc *CallParticipantCreate) ExecX(ctx context.Context) {
	if err := cpc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cpc *CallParticipantCreate) defaults() {
	if _, ok := cpc.mutation.Role(); !ok {
		v := callparticipant.DefaultRole
		cpc.mutation.SetRole(v)
	}
	if _, ok := cpc.mutation.JoinedAt(); !ok {
		v := callparticipant.DefaultJoinedAt()
		cpc.mutation.SetJoinedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cpc *CallParticipantCreate) check() error {
	if _, ok := cpc.mutation.Role(); !ok {
		return &ValidationError{Name: "role", err: errors.New(`ent: missing required field "CallParticipant.role"`)}
	}
	if v, ok := cpc.mutation.Role(); ok {
		if err := callparticipant.RoleValidator(v); err != nil {
			return &ValidationError{Name: "role", err: fmt.Errorf(`ent: validator failed for field "CallParticipant.role": %w`, err)}
		}
	}
	if _, ok := cpc.mutation.JoinedAt(); !ok {
		return &ValidationError{Name: "joined_at", err: errors.New(`ent: missing required field "CallParticipant.joined_at"`)}
	}
	if _, ok := cpc.mutation.CallID(); !ok {
		return &ValidationError{Name: "call", err: errors.New(`ent: missing required edge "CallParticipant.call"`)}
	}
	if _, ok := cpc.mutation.ParticipantID(); !ok {
		return &ValidationError{Name: "participant", err: errors.New(`ent: missing required edge "CallParticipant.participant"`)}
	}
	return nil
}

func (cpc *CallParticipantCreate) sqlSave(ctx context.Context) (*CallParticipant, error) {
	if err := cpc.check(); err != nil {
		return nil, err
	}
	_node, _spec := cpc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cpc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	cpc.mutation.id = &_node.ID
	cpc.mutation.done = true
	return _node, nil
}

func (cpc *CallParticipantCreate) createSpec() (*CallParticipant, *sqlgraph.CreateSpec) {
	var (
		_node = &CallParticipant{config: cpc.config}
		_spec = sqlgraph.NewCreateSpec(callparticipant.Table, sqlgraph.NewFieldSpec(callparticipant.FieldID, field.TypeInt))
	)
	if value, ok := cpc.mutation.Role(); ok {
		_spec.SetField(callparticipant.FieldRole, field.TypeEnum, value)
		_node.Role = value
	}
	if value, ok := cpc.mutation.JoinedAt(); ok {
		_spec.SetField(callparticipant.FieldJoinedAt, field.TypeTime, value)
		_node.JoinedAt = value
	}
	if value, ok := cpc.mutation.LeftAt(); ok {
		_spec.SetField(callparticipant.FieldLeftAt, field.TypeTime, value)
		_node.LeftAt = &value
	}
	if nodes := cpc.mutation.CallIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   callparticipant.CallTable,
			Columns: []string{callparticipant.CallColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(calllog.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.call_participant_call = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cpc.mutation.ParticipantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   callparticipant.ParticipantTable,
			Columns: []string{callparticipant.ParticipantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.call_participant_participant = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// CallParticipantCreateBulk is the builder for creating many CallParticipant entities in bulk.
type CallParticipantCreateBulk struct {
	config
	err      error
	builders []*CallParticipantCreate
}

// Save creates the CallParticipant entities in the database.
func (cpcb *CallParticipantCreateBulk) Save(ctx context.Context) ([]*CallParticipant, error) {
	if cpcb.err != nil {
		return nil, cpcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(cpcb.builders))
	nodes := make([]*CallParticipant, len(cpcb.builders))
	mutators := make([]Mutator, len(cpcb.builders))
	for i := range cpcb.builders {
		func(i int, root context.Context) {
			builder := cpcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CallParticipantMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, cpcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, cpcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, cpcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (cpcb *CallParticipantCreateBulk) SaveX(ctx context.Context) []*CallParticipant {
	v, err := cpcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cpcb *CallParticipantCreateBulk) Exec(ctx context.Context) error {
	_, err := cpcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cpcb *CallParticipantCreateBulk) ExecX(ctx context.Context) {
	if err := cpcb.Exec(ctx); err != nil {
		panic(err)
	}
}
