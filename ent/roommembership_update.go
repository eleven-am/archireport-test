// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/eleven-am/enclave/ent/predicate"
	"github.com/eleven-am/enclave/ent/room"
	"github.com/eleven-am/enclave/ent/roommembership"
	"github.com/eleven-am/enclave/ent/user"
)

// RoomMembershipUpdate is the builder for updating RoomMembership entities.
type RoomMembershipUpdate struct {
	config
	hooks    []Hook
	mutation *RoomMembershipMutation
}

// Where appends a list predicates to the RoomMembershipUpdate builder.
func (rmu *RoomMembershipUpdate) Where(ps ...predicate.RoomMembership) *RoomMembershipUpdate {
	rmu.mutation.Where(ps...)
	return rmu
}

// SetRole sets the "role" field.
func (rmu *RoomMembershipUpdate) SetRole(r roommembership.Role) *RoomMembershipUpdate {
	rmu.mutation.SetRole(r)
	return rmu
}

// SetNillableRole sets the "role" field if the given value is not nil.
func (rmu *RoomMembershipUpdate) SetNillableRole(r *roommembership.Role) *RoomMembershipUpdate {
	if r != nil {
		rmu.SetRole(*r)
	}
	return rmu
}

// SetCanPost sets the "can_post" field.
func (rmu *RoomMembershipUpdate) SetCanPost(b bool) *RoomMembershipUpdate {
	rmu.mutation.SetCanPost(b)
	return rmu
}

// SetNillableCanPost sets the "can_post" field if the given value is not nil.
func (rmu *RoomMembershipUpdate) SetNillableCanPost(b *bool) *RoomMembershipUpdate {
	if b != nil {
		rmu.SetCanPost(*b)
	}
	return rmu
}

// SetCanCall sets the "can_call" field.
func (rmu *RoomMembershipUpdate) SetCanCall(b bool) *RoomMembershipUpdate {
	rmu.mutation.SetCanCall(b)
	return rmu
}

// SetNillableCanCall sets the "can_call" field if the given value is not nil.
func (rmu *RoomMembershipUpdate) SetNillableCanCall(b *bool) *RoomMembershipUpdate {
	if b != nil {
		rmu.SetCanCall(*b)
	}
	return rmu
}

// SetJoinedAt sets the "joined_at" field.
func (rmu *RoomMembershipUpdate) SetJoinedAt(t time.Time) *RoomMembershipUpdate {
	rmu.mutation.SetJoinedAt(t)
	return rmu
}

// SetNillableJoinedAt sets the "joined_at" field if the given value is not nil.
func (rmu *RoomMembershipUpdate) SetNillableJoinedAt(t *time.Time) *RoomMembershipUpdate {
	if t != nil {
		rmu.SetJoinedAt(*t)
	}
	return rmu
}

// SetUpdatedAt sets the "updated_at" field.
func (rmu *RoomMembershipUpdate) SetUpdatedAt(t time.Time) *RoomMembershipUpdate {
	rmu.mutation.SetUpdatedAt(t)
	return rmu
}

// SetUserID sets the "user" edge to the User entity by ID.
func (rmu *RoomMembershipUpdate) SetUserID(id int) *RoomMembershipUpdate {
	rmu.mutation.SetUserID(id)
	return rmu
}

// SetUser sets the "user" edge to the User entity.
func (rmu *RoomMembershipUpdate) SetUser(u *User) *RoomMembershipUpdate {
	return rmu.SetUserID(u.ID)
}

// SetRoomID sets the "room" edge to the Room entity by ID.
func (rmu *RoomMembershipUpdate) SetRoomID(id int) *RoomMembershipUpdate {
	rmu.mutation.SetRoomID(id)
	return rmu
}

// SetRoom sets the "room" edge to the Room entity.
func (rmu *RoomMembershipUpdate) SetRoom(r *Room) *RoomMembershipUpdate {
	return rmu.SetRoomID(r.ID)
}

// Mutation returns the RoomMembershipMutation object of the builder.
func (rmu *RoomMembershipUpdate) Mutation() *RoomMembershipMutation {
	return rmu.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (rmu *RoomMembershipUpdate) ClearUser() *RoomMembershipUpdate {
	rmu.mutation.ClearUser()
	return rmu
}

// ClearRoom clears the "room" edge to the Room entity.
func (rmu *RoomMembershipUpdate) ClearRoom() *RoomMembershipUpdate {
	rmu.mutation.ClearRoom()
	return rmu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (rmu *RoomMembershipUpdate) Save(ctx context.Context) (int, error) {
	rmu.defaults()
	return withHooks(ctx, rmu.sqlSave, rmu.mutation, rmu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (rmu *RoomMembershipUpdate) SaveX(ctx context.Context) int {
	affected, err := rmu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (rmu *RoomMembershipUpdate) Exec(ctx context.Context) error {
	_, err := rmu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rmu *RoomMembershipUpdate) ExecX(ctx context.Context) {
	if err := rmu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rmu *RoomMembershipUpdate) defaults() {
	if _, ok := rmu.mutation.UpdatedAt(); !ok {
		v := roommembership.UpdateDefaultUpdatedAt()
		rmu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rmu *RoomMembershipUpdate) check() error {
	if v, ok := rmu.mutation.Role(); ok {
		if err := roommembership.RoleValidator(v); err != nil {
			return &ValidationError{Name: "role", err: fmt.Errorf(`ent: validator failed for field "RoomMembership.role": %w`, err)}
		}
	}
	if _, ok := rmu.mutation.UserID(); rmu.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "RoomMembership.user"`)
	}
	if _, ok := rmu.mutation.RoomID(); rmu.mutation.RoomCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "RoomMembership.room"`)
	}
	return nil
}

func (rmu *RoomMembershipUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := rmu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(roommembership.Table, roommembership.Columns, sqlgraph.NewFieldSpec(roommembership.FieldID, field.TypeInt))
	if ps := rmu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rmu.mutation.Role(); ok {
		_spec.SetField(roommembership.FieldRole, field.TypeEnum, value)
	}
	if value, ok := rmu.mutation.CanPost(); ok {
		_spec.SetField(roommembership.FieldCanPost, field.TypeBool, value)
	}
	if value, ok := rmu.mutation.CanCall(); ok {
		_spec.SetField(roommembership.FieldCanCall, field.TypeBool, value)
	}
	if value, ok := rmu.mutation.JoinedAt(); ok {
		_spec.SetField(roommembership.FieldJoinedAt, field.TypeTime, value)
	}
	if value, ok := rmu.mutation.UpdatedAt(); ok {
		_spec.SetField(roommembership.FieldUpdatedAt, field.TypeTime, value)
	}
	if rmu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   roommembership.UserTable,
			Columns: []string{roommembership.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rmu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   roommembership.UserTable,
			Columns: []string{roommembership.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rmu.mutation.RoomCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   roommembership.RoomTable,
			Columns: []string{roommembership.RoomColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(room.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rmu.mutation.RoomIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   roommembership.RoomTable,
			Columns: []string{roommembership.RoomColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(room.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, rmu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{roommembership.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	rmu.mutation.done = true
	return n, nil
}

// RoomMembershipUpdateOne is the builder for updating a single RoomMembership entity.
type RoomMembershipUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *RoomMembershipMutation
}

// SetRole sets the "role" field.
func (rmuo *RoomMembershipUpdateOne) SetRole(r roommembership.Role) *RoomMembershipUpdateOne {
	rmuo.mutation.SetRole(r)
	return rmuo
}

// SetNillableRole sets the "role" field if the given value is not nil.
func (rmuo *RoomMembershipUpdateOne) SetNillableRole(r *roommembership.Role) *RoomMembershipUpdateOne {
	if r != nil {
		rmuo.SetRole(*r)
	}
	return rmuo
}

// SetCanPost sets the "can_post" field.
func (rmuo *RoomMembershipUpdateOne) SetCanPost(b bool) *RoomMembershipUpdateOne {
	rmuo.mutation.SetCanPost(b)
	return rmuo
}

// SetNillableCanPost sets the "can_post" field if the given value is not nil.
func (rmuo *RoomMembershipUpdateOne) SetNillableCanPost(b *bool) *RoomMembershipUpdateOne {
	if b != nil {
		rmuo.SetCanPost(*b)
	}
	return rmuo
}

// SetCanCall sets the "can_call" field.
func (rmuo *RoomMembershipUpdateOne) SetCanCall(b bool) *RoomMembershipUpdateOne {
	rmuo.mutation.SetCanCall(b)
	return rmuo
}

// SetNillableCanCall sets the "can_call" field if the given value is not nil.
func (rmuo *RoomMembershipUpdateOne) SetNillableCanCall(b *bool) *RoomMembershipUpdateOne {
	if b != nil {
		rmuo.SetCanCall(*b)
	}
	return rmuo
}

// SetJoinedAt sets the "joined_at" field.
func (rmuo *RoomMembershipUpdateOne) SetJoinedAt(t time.Time) *RoomMembershipUpdateOne {
	rmuo.mutation.SetJoinedAt(t)
	return rmuo
}

// SetNillableJoinedAt sets the "joined_at" field if the given value is not nil.
func (rmuo *RoomMembershipUpdateOne) SetNillableJoinedAt(t *time.Time) *RoomMembershipUpdateOne {
	if t != nil {
		rmuo.SetJoinedAt(*t)
	}
	return rmuo
}

// SetUpdatedAt sets the "updated_at" field.
func (rmuo *RoomMembershipUpdateOne) SetUpdatedAt(t time.Time) *RoomMembershipUpdateOne {
	rmuo.mutation.SetUpdatedAt(t)
	return rmuo
}

// SetUserID sets the "user" edge to the User entity by ID.
func (rmuo *RoomMembershipUpdateOne) SetUserID(id int) *RoomMembershipUpdateOne {
	rmuo.mutation.SetUserID(id)
	return rmuo
}

// SetUser sets the "user" edge to the User entity.
func (rmuo *RoomMembershipUpdateOne) SetUser(u *User) *RoomMembershipUpdateOne {
	return rmuo.SetUserID(u.ID)
}

// SetRoomID sets the "room" edge to the Room entity by ID.
func (rmuo *RoomMembershipUpdateOne) SetRoomID(id int) *RoomMembershipUpdateOne {
	rmuo.mutation.SetRoomID(id)
	return rmuo
}

// SetRoom sets the "room" edge to the Room entity.
func (rmuo *RoomMembershipUpdateOne) SetRoom(r *Room) *RoomMembershipUpdateOne {
	return rmuo.SetRoomID(r.ID)
}

// Mutation returns the RoomMembershipMutation object of the builder.
func (rmuo *RoomMembershipUpdateOne) Mutation() *RoomMembershipMutation {
	return rmuo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (rmuo *RoomMembershipUpdateOne) ClearUser() *RoomMembershipUpdateOne {
	rmuo.mutation.ClearUser()
	return rmuo
}

// ClearRoom clears the "room" edge to the Room entity.
func (rmuo *RoomMembershipUpdateOne) ClearRoom() *RoomMembershipUpdateOne {
	rmuo.mutation.ClearRoom()
	return rmuo
}

// Where appends a list predicates to the RoomMembershipUpdate builder.
func (rmuo *RoomMembershipUpdateOne) Where(ps ...predicate.RoomMembership) *RoomMembershipUpdateOne {
	rmuo.mutation.Where(ps...)
	return rmuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (rmuo *RoomMembershipUpdateOne) Select(field string, fields ...string) *RoomMembershipUpdateOne {
	rmuo.fields = append([]string{field}, fields...)
	return rmuo
}

// Save executes the query and returns the updated RoomMembership entity.
func (rmuo *RoomMembershipUpdateOne) Save(ctx context.Context) (*RoomMembership, error) {
	rmuo.defaults()
	return withHooks(ctx, rmuo.sqlSave, rmuo.mutation, rmuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (rmuo *RoomMembershipUpdateOne) SaveX(ctx context.Context) *RoomMembership {
	node, err := rmuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (rmuo *RoomMembershipUpdateOne) Exec(ctx context.Context) error {
	_, err := rmuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rmuo *RoomMembershipUpdateOne) ExecX(ctx context.Context) {
	if err := rmuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rmuo *RoomMembershipUpdateOne) defaults() {
	if _, ok := rmuo.mutation.UpdatedAt(); !ok {
		v := roommembership.UpdateDefaultUpdatedAt()
		rmuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rmuo *RoomMembershipUpdateOne) check() error {
	if v, ok := rmuo.mutation.Role(); ok {
		if err := roommembership.RoleValidator(v); err != nil {
			return &ValidationError{Name: "role", err: fmt.Errorf(`ent: validator failed for field "RoomMembership.role": %w`, err)}
		}
	}
	if _, ok := rmuo.mutation.UserID(); rmuo.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "RoomMembership.user"`)
	}
	if _, ok := rmuo.mutation.RoomID(); rmuo.mutation.RoomCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "RoomMembership.room"`)
	}
	return nil
}

func (rmuo *RoomMembershipUpdateOne) sqlSave(ctx context.Context) (_node *RoomMembership, err error) {
	if err := rmuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(roommembership.Table, roommembership.Columns, sqlgraph.NewFieldSpec(roommembership.FieldID, field.TypeInt))
	id, ok := rmuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "RoomMembership.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := rmuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, roommembership.FieldID)
		for _, f := range fields {
			if !roommembership.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != roommembership.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := rmuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rmuo.mutation.Role(); ok {
		_spec.SetField(roommembership.FieldRole, field.TypeEnum, value)
	}
	if value, ok := rmuo.mutation.CanPost(); ok {
		_spec.SetField(roommembership.FieldCanPost, field.TypeBool, value)
	}
	if value, ok := rmuo.mutation.CanCall(); ok {
		_spec.SetField(roommembership.FieldCanCall, field.TypeBool, value)
	}
	if value, ok := rmuo.mutation.JoinedAt(); ok {
		_spec.SetField(roommembership.FieldJoinedAt, field.TypeTime, value)
	}
	if value, ok := rmuo.mutation.UpdatedAt(); ok {
		_spec.SetField(roommembership.FieldUpdatedAt, field.TypeTime, value)
	}
	if rmuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   roommembership.UserTable,
			Columns: []string{roommembership.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rmuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   roommembership.UserTable,
			Columns: []string{roommembership.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rmuo.mutation.RoomCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   roommembership.RoomTable,
			Columns: []string{roommembership.RoomColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(room.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rmuo.mutation.RoomIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   roommembership.RoomTable,
			Columns: []string{roommembership.RoomColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(room.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &RoomMembership{config: rmuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, rmuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{roommembership.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	rmuo.mutation.done = true
	return _node, nil
}
