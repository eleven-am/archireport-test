// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/eleven-am/enclave/ent/calllog"
	"github.com/eleven-am/enclave/ent/room"
	"github.com/eleven-am/enclave/ent/user"
)

// CallLog is the model entity for the CallLog schema.
type CallLog struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Status holds the value of the "status" field.
	Status calllog.Status `json:"status,omitempty"`
	// StartedAt holds the value of the "started_at" field.
	StartedAt time.Time `json:"started_at,omitempty"`
	// EndedAt holds the value of the "ended_at" field.
	EndedAt *time.Time `json:"ended_at,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CallLogQuery when eager-loading is set.
	Edges              CallLogEdges `json:"edges"`
	call_log_initiator *int
	call_log_room      *int
	selectValues       sql.SelectValues
}

// CallLogEdges holds the relations/edges for other nodes in the graph.
type CallLogEdges struct {
	// Initiator holds the value of the initiator edge.
	Initiator *User `json:"initiator,omitempty"`
	// Room holds the value of the room edge.
	Room *Room `json:"room,omitempty"`
	// Participants holds the value of the participants edge.
	Participants []*CallParticipant `json:"participants,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// InitiatorOrErr returns the Initiator value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CallLogEdges) InitiatorOrErr() (*User, error) {
	if e.Initiator != nil {
		return e.Initiator, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "initiator"}
}

// RoomOrErr returns the Room value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CallLogEdges) RoomOrErr() (*Room, error) {
	if e.Room != nil {
		return e.Room, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: room.Label}
	}
	return nil, &NotLoadedError{edge: "room"}
}

// ParticipantsOrErr returns the Participants value or an error if the edge
// was not loaded in eager-loading.
func (e CallLogEdges) ParticipantsOrErr() ([]*CallParticipant, error) {
	if e.loadedTypes[2] {
		return e.Participants, nil
	}
	return nil, &NotLoadedError{edge: "participants"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*CallLog) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case calllog.FieldID:
			values[i] = new(sql.NullInt64)
		case calllog.FieldStatus:
			values[i] = new(sql.NullString)
		case calllog.FieldStartedAt, calllog.FieldEndedAt, calllog.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case calllog.ForeignKeys[0]: // call_log_initiator
			values[i] = new(sql.NullInt64)
		case calllog.ForeignKeys[1]: // call_log_room
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the CallLog fields.
func (cl *CallLog) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case calllog.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			cl.ID = int(value.Int64)
		case calllog.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				cl.Status = calllog.Status(value.String)
			}
		case calllog.FieldStartedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field started_at", values[i])
			} else if value.Valid {
				cl.StartedAt = value.Time
			}
		case calllog.FieldEndedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field ended_at", values[i])
			} else if value.Valid {
				cl.EndedAt = new(time.Time)
				*cl.EndedAt = value.Time
			}
		case calllog.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				cl.CreatedAt = value.Time
			}
		case calllog.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field call_log_initiator", value)
			} else if value.Valid {
				cl.call_log_initiator = new(int)
				*cl.call_log_initiator = int(value.Int64)
			}
		case calllog.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field call_log_room", value)
			} else if value.Valid {
				cl.call_log_room = new(int)
				*cl.call_log_room = int(value.Int64)
			}
		default:
			cl.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the CallLog.
// This includes values selected through modifiers, order, etc.
func (cl *CallLog) Value(name string) (ent.Value, error) {
	return cl.selectValues.Get(name)
}

// QueryInitiator queries the "initiator" edge of the CallLog entity.
func (cl *CallLog) QueryInitiator() *UserQuery {
	return NewCallLogClient(cl.config).QueryInitiator(cl)
}

// QueryRoom queries the "room" edge of the CallLog entity.
func (cl *CallLog) QueryRoom() *RoomQuery {
	return NewCallLogClient(cl.config).QueryRoom(cl)
}

// QueryParticipants queries the "participants" edge of the CallLog entity.
func (cl *CallLog) QueryParticipants() *CallParticipantQuery {
	return NewCallLogClient(cl.config).QueryParticipants(cl)
}

// Update returns a builder for updating this CallLog.
// Note that you need to call CallLog.Unwrap() before calling this method if this CallLog
// was returned from a transaction, and the transaction was committed or rolled back.
func (cl *CallLog) Update() *CallLogUpdateOne {
	return NewCallLogClient(cl.config).UpdateOne(cl)
}

// Unwrap unwraps the CallLog entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (cl *CallLog) Unwrap() *CallLog {
	_tx, ok := cl.config.driver.(*txDriver)
	if !ok {
		panic("ent: CallLog is not a transactional entity")
	}
	cl.config.driver = _tx.drv
	return cl
}

// String implements the fmt.Stringer.
func (cl *CallLog) String() string {
	var builder strings.Builder
	builder.WriteString("CallLog(")
	builder.WriteString(fmt.Sprintf("id=%v, ", cl.ID))
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", cl.Status))
	builder.WriteString(", ")
	builder.WriteString("started_at=")
	builder.WriteString(cl.StartedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := cl.EndedAt; v != nil {
		builder.WriteString("ended_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(cl.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// CallLogs is a parsable slice of CallLog.
type CallLogs []*CallLog
