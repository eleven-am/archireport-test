// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/eleven-am/enclave/ent/calllog"
	"github.com/eleven-am/enclave/ent/callparticipant"
	"github.com/eleven-am/enclave/ent/predicate"
	"github.com/eleven-am/enclave/ent/user"
)

// CallParticipantQuery is the builder for querying CallParticipant entities.
type CallParticipantQuery struct {
	config
	ctx             *QueryContext
	order           []callparticipant.OrderOption
	inters          []Interceptor
	predicates      []predicate.CallParticipant
	withCall        *CallLogQuery
	withParticipant *UserQuery
	withFKs         bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the CallParticipantQuery builder.
func (cpq *CallParticipantQuery) Where(ps ...predicate.CallParticipant) *CallParticipantQuery {
	cpq.predicates = append(cpq.predicates, ps...)
	return cpq
}

// Limit the number of records to be returned by this query.
func (cpq *CallParticipantQuery) Limit(limit int) *CallParticipantQuery {
	cpq.ctx.Limit = &limit
	return cpq
}

// Offset to start from.
func (cpq *CallParticipantQuery) Offset(offset int) *CallParticipantQuery {
	cpq.ctx.Offset = &offset
	return cpq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (cpq *CallParticipantQuery) Unique(unique bool) *CallParticipantQuery {
	cpq.ctx.Unique = &unique
	return cpq
}

// Order specifies how the records should be ordered.
func (cpq *CallParticipantQuery) Order(o ...callparticipant.OrderOption) *CallParticipantQuery {
	cpq.order = append(cpq.order, o...)
	return cpq
}

// QueryCall chains the current query on the "call" edge.
func (cpq *CallParticipantQuery) QueryCall() *CallLogQuery {
	query := (&CallLogClient{config: cpq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := cpq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := cpq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(callparticipant.Table, callparticipant.FieldID, selector),
			sqlgraph.To(calllog.Table, calllog.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, callparticipant.CallTable, callparticipant.CallColumn),
		)
		fromU = sqlgraph.SetNeighbors(cpq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryParticipant chains the current query on the "participant" edge.
func (cpq *CallParticipantQuery) QueryParticipant() *UserQuery {
	query := (&UserClient{config: cpq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := cpq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := cpq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(callparticipant.Table, callparticipant.FieldID, selector),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, callparticipant.ParticipantTable, callparticipant.ParticipantColumn),
		)
		fromU = sqlgraph.SetNeighbors(cpq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first CallParticipant entity from the query.
// Returns a *NotFoundError when no CallParticipant was found.
func (cpq *CallParticipantQuery) First(ctx context.Context) (*CallParticipant, error) {
	nodes, err := cpq.Limit(1).All(setContextOp(ctx, cpq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{callparticipant.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (cpq *CallParticipantQuery) FirstX(ctx context.Context) *CallParticipant {
	node, err := cpq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first CallParticipant ID from the query.
// Returns a *NotFoundError when no CallParticipant ID was found.
func (cpq *CallParticipantQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = cpq.Limit(1).IDs(setContextOp(ctx, cpq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{callparticipant.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (cpq *CallParticipantQuery) FirstIDX(ctx context.Context) int {
	id, err := cpq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single CallParticipant entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one CallParticipant entity is found.
// Returns a *NotFoundError when no CallParticipant entities are found.
func (cpq *CallParticipantQuery) Only(ctx context.Context) (*CallParticipant, error) {
	nodes, err := cpq.Limit(2).All(setContextOp(ctx, cpq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{callparticipant.Label}
	default:
		return nil, &NotSingularError{callparticipant.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (cpq *CallParticipantQuery) OnlyX(ctx context.Context) *CallParticipant {
	node, err := cpq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only CallParticipant ID in the query.
// Returns a *NotSingularError when more than one CallParticipant ID is found.
// Returns a *NotFoundError when no entities are found.
func (cpq *CallParticipantQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = cpq.Limit(2).IDs(setContextOp(ctx, cpq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{callparticipant.Label}
	default:
		err = &NotSingularError{callparticipant.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (cpq *CallParticipantQuery) OnlyIDX(ctx context.Context) int {
	id, err := cpq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of CallParticipants.
func (cpq *CallParticipantQuery) All(ctx context.Context) ([]*CallParticipant, error) {
	ctx = setContextOp(ctx, cpq.ctx, "All")
	if err := cpq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*CallParticipant, *CallParticipantQuery]()
	return withInterceptors[[]*CallParticipant](ctx, cpq, qr, cpq.inters)
}

// AllX is like All, but panics if an error occurs.
func (cpq *CallParticipantQuery) AllX(ctx context.Context) []*CallParticipant {
	nodes, err := cpq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of CallParticipant IDs.
func (cpq *CallParticipantQuery) IDs(ctx context.Context) (ids []int, err error) {
	if cpq.ctx.Unique == nil && cpq.path != nil {
		cpq.Unique(true)
	}
	ctx = setContextOp(ctx, cpq.ctx, "IDs")
	if err = cpq.Select(callparticipant.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (cpq *CallParticipantQuery) IDsX(ctx context.Context) []int {
	ids, err := cpq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (cpq *CallParticipantQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, cpq.ctx, "Count")
	if err := cpq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, cpq, querierCount[*CallParticipantQuery](), cpq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (cpq *CallParticipantQuery) CountX(ctx context.Context) int {
	count, err := cpq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (cpq *CallParticipantQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, cpq.ctx, "Exist")
	switch _, err := cpq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (cpq *CallParticipantQuery) ExistX(ctx context.Context) bool {
	exist, err := cpq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the CallParticipantQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (cpq *CallParticipantQuery) Clone() *CallParticipantQuery {
	if cpq == nil {
		return nil
	}
	return &CallParticipantQuery{
		config:          cpq.config,
		ctx:             cpq.ctx.Clone(),
		order:           append([]callparticipant.OrderOption{}, cpq.order...),
		inters:          append([]Interceptor{}, cpq.inters...),
		predicates:      append([]predicate.CallParticipant{}, cpq.predicates...),
		withCall:        cpq.withCall.Clone(),
		withParticipant: cpq.withParticipant.Clone(),
		// clone intermediate query.
		sql:  cpq.sql.Clone(),
		path: cpq.path,
	}
}

// WithCall tells the query-builder to eager-load the nodes that are connected to
// the "call" edge. The optional arguments are used to configure the query builder of the edge.
func (cpq *CallParticipantQuery) WithCall(opts ...func(*CallLogQuery)) *CallParticipantQuery {
	query := (&CallLogClient{config: cpq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	cpq.withCall = query
	return cpq
}

// WithParticipant tells the query-builder to eager-load the nodes that are connected to
// the "participant" edge. The optional arguments are used to configure the query builder of the edge.
func (cpq *CallParticipantQuery) WithParticipant(opts ...func(*UserQuery)) *CallParticipantQuery {
	query := (&UserClient{config: cpq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	cpq.withParticipant = query
	return cpq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Role callparticipant.Role `json:"role,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.CallParticipant.Query().
//		GroupBy(callparticipant.FieldRole).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (cpq *CallParticipantQuery) GroupBy(field string, fields ...string) *CallParticipantGroupBy {
	cpq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &CallParticipantGroupBy{build: cpq}
	grbuild.flds = &cpq.ctx.Fields
	grbuild.label = callparticipant.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Role callparticipant.Role `json:"role,omitempty"`
//	}
//
//	client.CallParticipant.Query().
//		Select(callparticipant.FieldRole).
//		Scan(ctx, &v)
func (cpq *CallParticipantQuery) Select(fields ...string) *CallParticipantSelect {
	cpq.ctx.Fields = append(cpq.ctx.Fields, fields...)
	sbuild := &CallParticipantSelect{CallParticipantQuery: cpq}
	sbuild.label = callparticipant.Label
	sbuild.flds, sbuild.scan = &cpq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a CallParticipantSelect configured with the given aggregations.
func (cpq *CallParticipantQuery) Aggregate(fns ...AggregateFunc) *CallParticipantSelect {
	return cpq.Select().Aggregate(fns...)
}

func (cpq *CallParticipantQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range cpq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, cpq); err != nil {
				return err
			}
		}
	}
	for _, f := range cpq.ctx.Fields {
		if !callparticipant.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if cpq.path != nil {
		prev, err := cpq.path(ctx)
		if err != nil {
			return err
		}
		cpq.sql = prev
	}
	return nil
}

func (cpq *CallParticipantQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*CallParticipant, error) {
	var (
		nodes       = []*CallParticipant{}
		withFKs     = cpq.withFKs
		_spec       = cpq.querySpec()
		loadedTypes = [2]bool{
			cpq.withCall != nil,
			cpq.withParticipant != nil,
		}
	)
	if cpq.withCall != nil || cpq.withParticipant != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, callparticipant.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*CallParticipant).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &CallParticipant{config: cpq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, cpq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := cpq.withCall; query != nil {
		if err := cpq.loadCall(ctx, query, nodes, nil,
			func(n *CallParticipant, e *CallLog) { n.Edges.Call = e }); err != nil {
			return nil, err
		}
	}
	if query := cpq.withParticipant; query != nil {
		if err := cpq.loadParticipant(ctx, query, nodes, nil,
			func(n *CallParticipant, e *User) { n.Edges.Participant = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (cpq *CallParticipantQuery) loadCall(ctx context.Context, query *CallLogQuery, nodes []*CallParticipant, init func(*CallParticipant), assign func(*CallParticipant, *CallLog)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*CallParticipant)
	for i := range nodes {
		if nodes[i].call_participant_call == nil {
			continue
		}
		fk := *nodes[i].call_participant_call
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(calllog.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "call_participant_call" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (cpq *CallParticipantQuery) loadParticipant(ctx context.Context, query *UserQuery, nodes []*CallParticipant, init func(*CallParticipant), assign func(*CallParticipant, *User)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*CallParticipant)
	for i := range nodes {
		if nodes[i].call_participant_participant == nil {
			continue
		}
		fk := *nodes[i].call_participant_participant
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(user.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "call_participant_participant" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (cpq *CallParticipantQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := cpq.querySpec()
	_spec.Node.Columns = cpq.ctx.Fields
	if len(cpq.ctx.Fields) > 0 {
		_spec.Unique = cpq.ctx.Unique != nil && *cpq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, cpq.driver, _spec)
}

func (cpq *CallParticipantQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(callparticipant.Table, callparticipant.Columns, sqlgraph.NewFieldSpec(callparticipant.FieldID, field.TypeInt))
	_spec.From = cpq.sql
	if unique := cpq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if cpq.path != nil {
		_spec.Unique = true
	}
	if fields := cpq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, callparticipant.FieldID)
		for i := range fields {
			if fields[i] != callparticipant.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := cpq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := cpq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := cpq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := cpq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (cpq *CallParticipantQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(cpq.driver.Dialect())
	t1 := builder.Table(callparticipant.Table)
	columns := cpq.ctx.Fields
	if len(columns) == 0 {
		columns = callparticipant.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if cpq.sql != nil {
		selector = cpq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if cpq.ctx.Unique != nil && *cpq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range cpq.predicates {
		p(selector)
	}
	for _, p := range cpq.order {
		p(selector)
	}
	if offset := cpq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := cpq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// CallParticipantGroupBy is the group-by builder for CallParticipant entities.
type CallParticipantGroupBy struct {
	selector
	build *CallParticipantQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (cpgb *CallParticipantGroupBy) Aggregate(fns ...AggregateFunc) *CallParticipantGroupBy {
	cpgb.fns = append(cpgb.fns, fns...)
	return cpgb
}

// Scan applies the selector query and scans the result into the given value.
func (cpgb *CallParticipantGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, cpgb.build.ctx, "GroupBy")
	if err := cpgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*CallParticipantQuery, *CallParticipantGroupBy](ctx, cpgb.build, cpgb, cpgb.build.inters, v)
}

func (cpgb *CallParticipantGroupBy) sqlScan(ctx context.Context, root *CallParticipantQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(cpgb.fns))
	for _, fn := range cpgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*cpgb.flds)+len(cpgb.fns))
		for _, f := range *cpgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*cpgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := cpgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// CallParticipantSelect is the builder for selecting fields of CallParticipant entities.
type CallParticipantSelect struct {
	*CallParticipantQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (cps *CallParticipantSelect) Aggregate(fns ...AggregateFunc) *CallParticipantSelect {
	cps.fns = append(cps.fns, fns...)
	return cps
}

// Scan applies the selector query and scans the result into the given value.
func (cps *CallParticipantSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, cps.ctx, "Select")
	if err := cps.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*CallParticipantQuery, *CallParticipantSelect](ctx, cps.CallParticipantQuery, cps, cps.inters, v)
}

func (cps *CallParticipantSelect) sqlScan(ctx context.Context, root *CallParticipantQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(cps.fns))
	for _, fn := range cps.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*cps.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := cps.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
